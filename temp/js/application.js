(function() {
  var lang;

  lang = {
    sidebar: {
      overview: "概况",
      disk: "磁盘",
      raid: "阵列",
      volume: "虚拟磁盘",
      initr: "客户端",
      setting: "系统设置",
      maintain: "维护中心",
      quickmode: "快速创建",
      login: "登录"
    },
    diskpage: {
      title: "系统资源",
      tabletitle: "磁盘",
      tabletitle1: "磁盘信息",
      tabletitle2: "磁盘状态",
      btn_format_all: "格式化",
      th_location: "位置",
      th_host: "磁盘所属",
      th_health: "健康状态",
      th_raid: "组成阵列",
      th_role: "磁盘角色",
      th_capacity: "容量",
      th_init: "格式化",
      th_slot: "槽位",
      th_raidcolor: "阵列提示颜色",
      format_warning: function(location) {
        return "您确认要格式化" + location + "吗？";
      },
      format_all_warning: "您确认要格式化所有第三方硬盘吗？",
      mark_spare: "注意：橙色数字为专用热备盘"
    },
    raidpage: {
      title: "系统资源",
      tabletitle: "阵列",
      set_disk_role_btn: "热备盘",
      create_btn: "创建",
      delete_btn: "删除",
      th_detail: "详细",
      th_name: "名称",
      th_level: "阵列级别",
      th_chunk: "条块",
      th_health: "健康状态",
      th_rqrcount: "RQR计数",
      th_rebuilding: "重建进度",
      th_cap_usage: "容量使用情况",
      detail_row: {
        th_location: "位置",
        th_health: "健康状态",
        th_role: "磁盘角色"
      }
    },
    volumepage: {
      title: "系统资源",
      tabletitle: "虚拟磁盘",
      create_btn: "创建",
      delete_btn: "删除",
      th_detail: "详细",
      th_name: "名称",
      th_health: "健康状态",
      th_capacity: "容量",
      th_capacity_new: "容量",
      th_fs: "文件系统",
      th_syn: "同步进度",
      th_precreate: "预创建",
      th_syncing_warning: function(name) {
        return "虚拟卷 " + name + " 正在同步，请停止所有同步或等待同步完毕后重试";
      },
      th_precreating_warning: "正在预创建，请勿操作",
      th_store_server: "存储服务",
      th_forward_server: "转发服务",
      detail_row: {
        th_wwn: "已映射客户端",
        th_session: "iSCSI连接状态"
      },
      btn_enable_fs: "启用",
      btn_disable_fs: "禁用",
      btn_unavail_fs: "已被使用",
      btn_enable_sync: "开启",
      btn_pause_sync: "暂停",
      btn_stop_sync: "禁用",
      btn_stop_server: "关闭",
      btn_enable_server: "服务启用",
      btn_disable_server: "服务关闭",
      btn_precreate_fs: "预创建",
      btn_precreate_unavail: "未可用",
      btn_precreate_store: "存储服务",
      btn_precreate_forward: "转发服务",
      btn_precreate_unfinish: "预创建未完成",
      th_scan: "扫描完成",
      th_scan_safety: "扫描完成，系统正常",
      th_scan_warning: "文件系统挂载失败，请点击重启,重启后请人工介入文件系统修复",
      syncing: "开始同步，请等候"
    },
    initrpage: {
      title: "系统资源",
      tabletitle: "客户端",
      create_btn: "创建",
      delete_btn: "删除",
      th_detail: "详细",
      th_wwn: "WWN",
      th_wwpn: "WWPN",
      th_iface: "网口",
      th_session: "iSCSI状态",
      th_map: "映射",
      th_unmap: "解除",
      th_link: "iSCSI连接",
      td_link: "关联",
      td_unlink: "断开",
      detail_row: {
        th_name: "已映射虚拟磁盘"
      },
      warningtips: "注意:iSCSI状态更新可能有延时"
    },
    maintainpage: {
      title: "系统维护",
      upgrade: "升级",
      upgrade_tip1: "请严格按照按升级指导，对系统进行升级，如有疑问，请联系客服人员。",
      upgrade_tip2: "升级过程中，请确保不要关闭电源。",
      upgrade_btn: "选择升级文件",
      diagnostic: "诊断信息",
      diagnostic_tip1: "诊断信息用于帮助技术人员定位系统问题。",
      diagnostic_btn: "收集诊断信息",
      message_upgrade_success: "升级文件上传成功，请重启设备进行升级。",
      reboot_and_shutdown: "重启/关机",
      reboot_and_shutdown_tip: "关闭或者重启您的设备。",
      data_recovery_tip: "数据恢复用于返回上一工作阶段",
      btn_halt: "关机",
      btn_reboot: "重启",
      btn_sysinit: "系统初始化",
      btn_recover: "数据恢复",
      btn_scan: "文件系统扫描",
      warning_poweroff: "关闭设备会影响当前业务，您确定要继续吗？",
      warning_reboot: "重启设备会影响当前业务，您确定要继续吗？",
      warning_sysinit: "初始化系统会删除所有数据，请慎重考虑，您确定要继续吗？(初始化后系统将自动重启，IP地址将恢复为出厂配置)",
      warning_recover: "阵列恢复，重启生效。执行成功后，损坏的阵列将恢复到正常状态。请点击<重启>重启设备",
      warning_raids_safety: "数据正常，无需恢复",
      wait_recover: "正在数据恢复，请勿操作",
      finish_recover: "恢复完成，请手动重启"
    },
    quickmodepage: {
      title: "快速创建",
      raid: "阵列",
      chunk: "条块",
      raid_input_tip: "有效字符包括英文字母，数字，下划线(_)，字母开头，长度不能超过64",
      volume: "虚拟磁盘",
      volume_input_tip: "有效字符包括英文字母，数字，下划线(_)，字母开头，长度不能超过64",
      enable_fs: "启用文件系统",
      enable_iscsi: "iSCSI自动连接",
      create_files: "预创建",
      initr: "客户端",
      initr_input_tip: "客户端名称必须以iqn.2013-01.net.zbx.initiator:为前缀,且长度不能超过96",
      create_btn: "快速创建",
      create_error: "请选择创建阵列的磁盘",
      create_error_least: "级别5阵列最少需要3块磁盘"
    },
    settingpage: {
      title: "系统设置",
      title_iface_config: "网口设置",
      th_iface: "网口",
      th_ipaddr: "IP地址",
      th_netmask: "子网掩码",
      th_edit: "编辑",
      btn_iface_edit: "编辑",
      btn_iface_cancel: "取消",
      btn_iface_confirm: "确定",
      title_gateway_config: "网关设置",
      label_gateway: "网关地址",
      btn_config_gateway: "更改",
      title_useradmin: "用户密码设置",
      label_username: "用户名",
      label_oldpasswd: "原密码",
      label_newpasswd: "新密码",
      label_newpasswd_confirm: "新密码确认",
      tooltips_new_passwd: "密码长度不能超过32个字符",
      btn_changepasswd: "更改",
      btn_eth_bonding: "网口聚合",
      btn_eth_bonding_cancel: "取消网口聚合",
      btn_eth_bonding_warning: "设备存在客户端，请删除客户端再试",
      message_newpasswd_success: "修改密码成功",
      title_service_config: "服务器配置",
      title_service_id: "服务器ID",
      title_service_local_ip: "本机IP",
      title_service_type: "服务器类型",
      title_service_port: "监听端口",
      title_service_central_ip: "中心IP",
      title_service_central_config: "连接中心配置",
      more_config: "高级配置",
      select_central: "中心服务器",
      select_transform: "转发服务器",
      select_store_path: "存储路径",
      service_central_connect: "测试中心连接",
      service_success: "更改成功",
      iface_error: "请修改IP",
      useradmin_error: "两次输入密码相同"
    },
    overviewpage: {
      title: "系统概况",
      more: "更多",
      disk_num: "磁盘数目",
      raid_num: "阵列数目",
      volume_num: "虚拟磁盘数目",
      initr_num: "客户端数目",
      title_load: "设备负载",
      title_cpu_load: "处理器",
      title_mem_load: "缓存",
      title_temp_load: "温度",
      title_flow: "流量",
      btn_write_flow: "写",
      btn_read_flow: "读",
      title_notice: "通知",
      tab_log: "日志"
    },
    initr_create_modal: {
      title: "创建客户端",
      wwn: "WWN",
      wwpn: "WWPN",
      portals: "Portals",
      tooltips_initr: "客户端名称必须以iqn.2013-01.net.zbx.initiator:为前缀,且长度不能超过96",
      btn_cancel: "取消",
      btn_confirm: "确定",
      create_error: "客户端名称必须以iqn.2013-01.net.zbx.initiator:为前缀,且长度不能超过96"
    },
    volume_create_modal: {
      title: "创建虚拟磁盘",
      name: "名称",
      tooltips_name: "有效字符包括英文字母，数字，下划线(_)，字母开头，长度不能超过64",
      raid: "阵列",
      capacity: "容量",
      automap: "是否自动映射",
      initr: "客户端",
      tooltips_initr: "客户端名称必须以iqn.2013-01.net.zbx.initiator:为前缀,且长度不能超过96",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    raid_set_disk_role_modal: {
      title: "设置热备盘",
      label_role: "磁盘角色",
      role_global_spare: "全局热备盘",
      role_spare: "专用热备盘",
      label_raid: "阵列",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    raid_create_modal: {
      title: "创建磁盘阵列",
      label_name: "名称",
      tooltips_name: "有效字符包括英文字母，数字，下划线(_)，字母开头，长度不能超过64",
      label_level: "级别",
      label_chunk: "条块",
      label_rebuild_priority: "重建优先级",
      label_sync: "是否同步",
      btn_cancel: "取消",
      btn_confirm: "确定",
      label_raid_disks: "数据磁盘",
      label_spare_disks: "热备磁盘",
      label_rebuild_priority_low: "低",
      label_rebuild_priority_middle: "中",
      label_rebuild_priority_high: "高"
    },
    volume_map_modal: {
      title: "映射虚拟磁盘",
      th_volumes: "虚拟磁盘信息",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    message_modal: {
      btn_confirm: "确定",
      btn_reboot: "重启"
    },
    confirm_modal: {
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    confirm_reboot_modal: {
      heading: "注意",
      btn_reboot: "重启",
      label_res: "文件系统"
    },
    confirm_vaildate_modal: {
      heading: "注意",
      init_passwd: "请输入确认密码",
      btn_sysinit: "系统初始化",
      btn_recover: "数据恢复",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    confirm_sync_modal: {
      title: "同步终止",
      heading: "注意",
      message: "阵列损坏，请手动关闭volume同步",
      disable_sync: "关闭",
      disable_sync_success: "关闭成功",
      alert: "阵列损坏，请手动关闭volume同步",
      label_res: "虚拟磁盘",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    initr_delete_modal: {
      title: "删除客户端",
      heading: "注意",
      alert: "你确定要删除以下客户端吗?",
      label_res: "客户端",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    initr_unlink_modal: {
      title: "断开客户端",
      heading: "注意",
      alert1: "1.请停止客户端所有读写操作",
      alert2: "2.请确认该客户端连接的是本机"
    },
    initr_link_modal: {
      title: "关联客户端",
      heading: "注意",
      alert1: "1.由于网络延时,可能出现连接失败的情况,如果连接失败,建议重试",
      alert2: "2.若Iscsi服务未启动,可能出现连接失败的情况,如果连接失败,建议重试"
    },
    volume_delete_modal: {
      title: "删除虚拟磁盘",
      heading: "注意",
      alert: "您确定要删除以下虚拟磁盘吗?",
      label_res: "虚拟磁盘",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    volume_unmap_modal: {
      title: "解除虚拟磁盘映射",
      th_volumes: "虚拟磁盘信息",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    eth_bonding_modal: {
      title: "配置聚合网口信息",
      ip: "IP地址",
      netmask: "子网掩码",
      mode: "聚合模式",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    fs_create_modal: {
      title: "选择挂载目录",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    fs_choose_modal: {
      title: "选择文件系统类型",
      filesystems: "文件系统",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    raid_warning: {
      no_deleted_raid: "请选择要删除的阵列",
      no_raid: "设备没有正常可用阵列，请先创建阵列或修复阵列"
    },
    volume_warning: {
      no_deleted_volume: "请选择要删除的虚拟磁盘",
      no_raid: "设备没有阵列，请先创建阵列",
      no_fs: "设备正常，无需扫描",
      unnormal_raid: "阵列错误，无法同步，请手动暂停同步。",
      volume_mapped_to_initrs: function(name) {
        return "" + name + " 存在映射，无法删除";
      },
      volume_mapped_to_fs: function(name) {
        return "" + name + " 存在映射，无法启用文件系统";
      },
      fs_on_volume: function(name) {
        return "" + name + " 存在文件系统，无法删除";
      },
      only_support_one_fs: "设备仅支持启用一个文件系统",
      over_max_fs: "已超过可用最大文件系统数",
      enable_fs: "您确定要启用文件系统吗？",
      disable_fs: "禁用文件系统，会删除数据，您确定要禁用吗？",
      enable_sync: function(name) {
        return "启用全零同步会对虚拟卷进行格式化，您确定要同步虚拟卷" + name + "吗？";
      },
      disable_sync: "阵列错误，无法同步",
      syncing_error: "同步失败，请开启服务或更新至最新版本",
      scan_fs: "您确定要扫描文件系统吗？",
      scan_fs_fail: "扫描失败，请检查是否更新至最新版本或与管理员联系。"
    },
    initr_warning: {
      no_spared_volume: "没有可映射的虚拟磁盘",
      no_attached_volume: "没有任何可解除映射的虚拟磁盘",
      no_deleted_intir: "请选择要删除的客户端",
      detect_iscsi: function(wwn) {
        return "" + wwn + "存在iSCSI连接，无法进行映射，请先断开连接，再刷新界面";
      },
      unmap_iscsi: function(wwn) {
        return "" + wwn + "存在iSCSI连接，无法解除映射，请先断开连接，再刷新界面";
      },
      already_iscsi: function(wwn) {
        return "" + wwn + "存在iSCSI连接，请先断开连接，再进行下一步操作";
      },
      intitr_has_map: function(wwn) {
        return "" + wwn + "存在映射，无法删除";
      },
      intitr_has_link: "已存在iscsi连接,请先断开连接"
    },
    initr_link_warning: {
      link_finish: "iSCSI连接成功",
      link_err: "iSCSI连接失败",
      unlink_finish: "iSCSI断开成功",
      unlink_err: "iSCSI断开失败",
      confirm_link: function(wwn) {
        return "你确定需要连接到" + wwn + "吗?";
      },
      undo_link: function(wwn) {
        return "你确定需要断开" + wwn + "吗?";
      }
    },
    eth_bonding_cancel_warning: "您确认要取消聚合网口吗？",
    raid_delete_modal: {
      title: "删除磁盘阵列",
      heading: "注意",
      alert: "您确定要删除以下磁盘阵列吗?",
      label_res: "磁盘阵列",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    login: {
      title: "请输入账户密码",
      label_device: "设备地址",
      label_username: "账户",
      label_passwd: "密码",
      btn_login: "登录",
      copyright: "",
      passwd_error: "密码错误或账号不存在",
      login_error: "登录失败",
      version_invalid_error: "客户端版本较低，请重新下载客户端，继续使用当前客户端可能会有不兼容问题",
      has_logged_error: function(iface) {
        return "您已经使用" + iface + "登录该设备";
      },
      link_error: "连接服务器失败",
      online_error: "该用户已在线"
    },
    adminview: {
      menu_new: "新设备"
    },
    dsuui: {
      label_raid_disks: "数据磁盘",
      label_spare_disks: "热备磁盘"
    },
    header: {
      detect_machines_info: function(num) {
        return "发现了" + num + "台存储设备。";
      },
      detect_new_machines_info: function(num) {
        return "新发现了" + num + "台存储设备";
      },
      detect_no_machines_info: "未发现存储设备",
      detect_no_new_machine_info: "未发现新的存储设备",
      beep_need_login: "请登录后尝试",
      stop_beep_success: "静音成功",
      stop_beep_error: "静音失败，请开启服务或更新至最新版本",
      btn_poweroff: "关机",
      btn_reboot: "重启"
    },
    network_warning: {
      config_iface: "您确定要修改网口吗？",
      config_gateway: "您确定要修改网关吗？"
    },
    disconnect_warning: {
      disconnect_message: "与设备连接已中断，请重新登录。"
    },
    eth_bonding: {
      has_iscsi: "设备存在iScSI连接，请先断开iScSI连接再尝试此操作。"
    },
    login_by_other_warning: function(user) {
      return "用户" + user + "已在其他地方登录，请注意密码安全";
    },
    server: {
      centre: "中心服务器",
      store: "存储服务器",
      warning: "请问确定要切换服务器？"
    },
    centrallogin: {
      title: "登录",
      label_device: "设备地址",
      label_username: "账户",
      label_passwd: "密码",
      btn_login: "进入",
      setting: "高级设置",
      copyright: "2017 © Zexabox,Designed by Sam.",
      login_error: "登录失败",
      email_error: "该邮箱已存在,请重新输入",
      register_success: "注册成功",
      link_error: "服务器连接失败",
      location_a_error: "请选择市辖区",
      forget_email_error: "输入邮箱无效"
    },
    centralsidebar: {
      overview_server: "元数据",
      overview_store: "存储",
      monitor: "系统详情",
      store_monitor: "存储",
      server_monitor: "元数据",
      base: "系统服务",
      serverlist: "元数据",
      storelist: "存储",
      clientlist: "客户端",
      overview: "系统概况",
      warn: "系统告警"
    },
    centralview: {
      title1: "元数据概况",
      title2: "存储概况",
      title: "系统详情",
      more: "详情",
      remove: "解除",
      tips_detail: "查看详细信息",
      tabletitle: "存储",
      search_btn: "搜寻",
      add_btn: "添加",
      server_ip: "存储",
      detect_no_machines_info: "未发现存储设备",
      detect_no_new_machine_info: "未发现新的存储设备",
      unmonitor_tips: "您确定要取消对此设备的监控吗?",
      unmonitor_success: "解除监控成功"
    },
    centralmonitor: {
      title: "系统详情",
      more: "详情",
      remove: "解除",
      tips_detail: "查看详细信息",
      tabletitle: "拓扑图",
      search_btn: "搜寻",
      add_btn: "创建",
      server_ip: "存储",
      detect_no_machines_info: "未发现存储设备",
      detect_no_new_machine_info: "未发现新的存储设备",
      unmonitor_tips: "您确定要取消对此设备的监控吗?",
      unmonitor_success: "解除监控成功",
      detail_error: "获取失败",
      ip: "IP",
      tree: "拓扑图",
      detail: "详细信息"
    },
    centralstoremonitor: {
      title: "系统详情",
      more: "详情",
      remove: "解除",
      tips_detail: "查看详细信息",
      tabletitle: "存储",
      search_btn: "搜寻",
      add_btn: "创建",
      server_ip: "存储",
      detect_no_machines_info: "未发现存储设备",
      detect_no_new_machine_info: "未发现新的存储设备",
      unmonitor_tips: "您确定要取消对此设备的监控吗?",
      unmonitor_success: "解除监控成功",
      detail_error: "获取失败",
      ip: "IP",
      tree: "拓扑图",
      detail: "详细信息"
    },
    centralservermonitor: {
      title: "系统详情",
      more: "详情",
      remove: "解除",
      tips_detail: "查看详细信息",
      tabletitle: "元数据",
      search_btn: "搜寻",
      add_btn: "创建",
      server_ip: "存储",
      detect_no_machines_info: "未发现存储设备",
      detect_no_new_machine_info: "未发现新的存储设备",
      unmonitor_tips: "您确定要取消对此设备的监控吗?",
      unmonitor_success: "解除监控成功",
      ip: "IP"
    },
    centraldisk: {
      title: "系统详情",
      title_store: "存储监控",
      title_server: "服务器监控",
      tabletitle: "基本信息",
      tabletitle1: "磁盘信息",
      tabletitle2: "磁盘状态",
      tabletitle3: "阵列状态",
      tabletitle4: "虚拟磁盘",
      tabletitle5: "文件系统",
      tabletitle6: "客户端",
      tabletitle7: "设备负载",
      tabletitle8: "系统日志",
      clear_log: "清空日志",
      tabletitle_smart: "S.M.A.R.T",
      btn_back: "后退",
      btn_format_all: "格式化",
      th_location: "位置",
      th_host: "磁盘所属",
      th_health: "健康状态",
      th_raid: "组成阵列",
      th_role: "磁盘角色",
      th_capacity: "容量",
      th_capacity_used: "已用容量",
      th_init: "格式化",
      th_slot: "槽位",
      th_name: "名称",
      th_level: "级别",
      th_fs: "文件系统",
      th_chunk: "块大小",
      th_volume: "虚拟磁盘",
      th_wwn: "名称",
      th_iface: "网口",
      th_map: "映射",
      th_raidcolor: "阵列提示颜色",
      format_warning: function(location) {
        return "您确认要格式化" + location + "吗？";
      },
      format_all_warning: "您确认要格式化所有第三方硬盘吗？",
      mark_spare: "注意：橙色数字为专用热备盘",
      no_data: "请插入磁盘",
      th_smart_id: "ID",
      th_smart_current: "当前",
      th_smart_min: "最差",
      th_smart_threshold: "阈值",
      th_smart_value: "值",
      title_cpu_load: "处理器",
      title_cache_load: "缓存",
      title_mem_load: "内存",
      title_machine: "设备指标",
      title_flow_in: "网口流量",
      title_flow_out: "磁盘流量",
      date: "日期",
      level: "类型",
      message: "内容",
      status: "类型",
      all_info: "全部",
      mistake: "错误",
      warning: "警告",
      info: "提醒",
      clear_log_tips: "确定需要清空所有日志吗?",
      clear_log_success: "清空成功",
      btn_write_flow: "写",
      btn_read_flow: "读"
    },
    central_master_store_modal: {
      title: "存储",
      remove_btn: "删除",
      add_btn: "添加",
      th_name: "服务名称",
      th_ip: "IP地址",
      th_session: "状态",
      th_status: "健康",
      delete_error: "请选择删除的记录",
      delete_alert: "所有选择的配置记录会被删除,你确定吗?",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_delete_modal: {
      title: "删除配置记录",
      heading: "注意",
      alert1: "所有选择的配置记录会被删除,你确定吗?",
      delete_success: "删除成功",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_server_modal: {
      title: "系统资源",
      tabletitle1: "磁盘信息",
      tabletitle2: "磁盘状态",
      btn_format_all: "格式化",
      th_location: "位置",
      th_host: "磁盘所属",
      th_health: "健康状态",
      th_raid: "组成阵列",
      th_role: "磁盘角色",
      th_capacity: "容量",
      th_init: "格式化",
      th_slot: "槽位"
    },
    central_modal: {
      title: "创建",
      title_store: "扩容",
      title_node: "节点",
      btn_confirm: "确定",
      btn_cancel: "取消",
      label_ip: "ip地址",
      label_store_ip: "局域网内所有存储ip地址",
      btn_create: "一键创建",
      success: "创建成功",
      error: "创建失败,设备已存在",
      expand_success: "扩容成功",
      start_success: "开启成功",
      stop_success: "停止成功",
      choose: "请选择节点",
      fail: "配置失败",
      already_set: "错误:此项服务已配置",
      label_size: "高度",
      label_type: "类型",
      label_version: "型号",
      label_storage: "存储Ip",
      label_auto: "选择一个IP范围",
      label_manual: "自定义IP",
      label_number: "IP个数",
      label_start: "起初IP",
      label_service: "service IP",
      label_cloudstor: "cloudstor IP",
      label_master: "master IP",
      label_worker: "选择创建的IP如下所示:",
      label_node: "节点",
      label_status: "状态",
      label_func: "操作",
      step1: "请选择添加方式",
      step2: "请选择IP范围",
      step3: "请输入添加的IP,以,(逗号)隔开",
      step4: "请确认信息",
      step1s: "请选择添加节点",
      step2s: "请选择添加的IP",
      func_start: "启动",
      func_stop: "停止",
      btn_next: "下一步",
      btn_last: "上一步",
      ip_error: "设备已存在,请重新输入"
    },
    central_search_modal: {
      title: "添加",
      th_volumes: "存储信息",
      btn_cancel: "取消",
      btn_confirm: "确定",
      monitor_success: "监控成功",
      monitor_error: "监控失败，请联系管理员或升级到最新版本"
    },
    central_server_view: {
      title1: "元数据概况",
      title2: "存储概况",
      title: "系统概况",
      more: "详情",
      colony_num: "集群数目",
      machine_num: "服务器数目",
      warning_num: "告警数目",
      process_num: "监控数目",
      disk_num: "磁盘数目",
      raid_num: "阵列数目",
      volume_num: "虚拟磁盘数目",
      initr_num: "客户端数目",
      title_load: "流量监控",
      title_process: "进程监控",
      title_cpu_load: "处理器",
      title_cache_load: "系统空间",
      title_mem_load: "内存",
      title_notice: "管理日志",
      title_machine: "设备负载",
      title_temp_load: "温度",
      title_system_used: "系统空间",
      title_cap_used: "存储空间",
      clear_log: "清空日志",
      tab_log: "日志",
      tab_disks: "磁盘",
      disks_num: "磁盘总数",
      disks_status: "磁盘总状态",
      disks_cap: "总容量",
      disks_avail_cap: "可用容量",
      tab_raids: "阵列",
      raids_status: "阵列状态",
      raids_nums: "阵列总数",
      raids_avail_cap: "阵列可用容量",
      tab_nodes: "节点",
      nodes_status: "节点状态",
      nodes_nums: "节点数",
      nodes_cap: "总容量",
      tab_inits: "客户端",
      test: "一切正常！！！",
      title_flow_out: "磁盘流量",
      title_flow_in: "网口流量",
      btn_write_flow: "写",
      btn_read_flow: "读",
      date: "日期",
      level: "类型",
      status: "状态",
      message: "内容",
      all_info: "全部",
      mistake: "错误",
      warning: "警告",
      info: "提醒",
      clear_log_tips: "确定需要清空所有日志吗?",
      clear_log_success: "清空成功",
      clear_log_error: "无数据",
      status_normal: "良好",
      status_warning: "风险",
      status_danger: "危险",
      tips_cpu: "查看进程处理器使用情况",
      tips_mem: "查看进程内存使用情况"
    },
    central_store_view: {
      title1: "元数据概况",
      title2: "存储概况",
      title: "系统概况",
      more: "详细",
      cap_num: "集群容量",
      machine_num: "存储数目",
      warning_num: "告警数目",
      process_num: "监控数目",
      disk_num: "磁盘数目",
      raid_num: "阵列数目",
      volume_num: "虚拟磁盘数目",
      break_num: "阵列损坏数目",
      title_load: "流量监控",
      title_process: "进程监控",
      title_cap: "容量监控",
      title_store: "存储监控",
      title_machine: "设备负载",
      title_cpu_load: "处理器",
      title_cache_load: "缓存",
      title_mem_load: "内存",
      title_cap_total: "总容量",
      title_cap_used: "已用容量",
      title_cap_availed: "可用容量",
      title_cap: "容量使用情况",
      title_column_cap: "容量分布情况",
      title_raid: "阵列使用情况",
      title_notice: "管理日志",
      tab_log: "日志",
      clear_log: "清空日志",
      handle_log: "标记已读",
      tab_disks: "磁盘",
      disks_num: "磁盘总数",
      disks_status: "磁盘总状态",
      disks_cap: "总容量",
      disks_avail_cap: "可用容量",
      tab_raids: "阵列",
      raids_status: "阵列状态",
      raids_nums: "阵列总数",
      raids_avail_cap: "阵列可用容量",
      tab_nodes: "节点",
      nodes_status: "节点状态",
      nodes_nums: "节点数",
      nodes_cap: "总容量",
      tab_inits: "客户端",
      title_flow_out: "磁盘流量",
      title_flow_in: "网口流量",
      btn_write_flow: "写",
      btn_read_flow: "读",
      date: "日期",
      level: "类型",
      status: "状态",
      message: "内容",
      all_info: "全部",
      mistake: "错误",
      unhandled: "未处理",
      warning: "警告",
      info: "提醒",
      clear_log_tips: "确定需要清空所有日志吗?",
      clear_log_success: "清空成功",
      clear_log_error: "无数据",
      status_normal: "良好",
      status_warning: "风险",
      status_danger: "危险",
      title_mount: "挂载详情",
      mount: "文件系统名称",
      volume: "虚拟磁盘名称",
      raid: "阵列名称",
      dir: "挂载目录",
      mount_name: "/dev/mapper/VG--raid0-volume0",
      volume_name: "volume0",
      raid_name: "raid0",
      dir_name: "/nvr/d0",
      tips: "详情",
      tips_cpu: "查看进程处理器使用情况",
      tips_mem: "查看进程内存使用情况",
      title_webcam: "网络摄像机",
      btn_shot: "快照",
      title_shot: "快照结果"
    },
    central_server_cpu_modal: {
      title: "处理器",
      label_process: "进程名称",
      label_cpu: "占用比例(%)",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_server_cache_modal: {
      title: "缓存",
      label_process: "进程名称",
      label_cache: "占用比例(%)",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_server_mem_modal: {
      title: "内存",
      label_process: "进程名称",
      label_mem: "占用比例(%)",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_store_break_modal: {
      title: "处理器",
      label_process: "进程名称",
      label_cpu: "占用比例(%)",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_store_disk_modal: {
      title: "磁盘",
      label_location: "位置",
      label_health: "健康",
      label_role: "角色",
      label_cap: "容量",
      label_raid: "所属阵列",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_store_raid_modal: {
      title: "阵列",
      label_name: "名称",
      label_level: "阵列级别",
      label_health: "健康",
      label_cap: "容量",
      label_used_cap: "已用容量",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_store_volume_modal: {
      title: "虚拟磁盘",
      label_name: "名称",
      label_fs: "文件系统",
      label_health: "健康",
      label_cap: "容量",
      label_used_cap: "已用容量",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_pie_modal: {
      title: "容量比例",
      btn_cancel: "取消",
      btn_confirm: "确定"
    },
    central_server_detail: {
      title: "服务器监控",
      tabletitle: "基本信息",
      btn_back: "返回",
      title_flot: "流量监控",
      title_cpu_load: "处理器",
      title_cache_load: "缓存",
      title_mem_load: "内存"
    },
    central_server_list: {
      title: "基础服务",
      tabletitle: "元数据列表",
      add_btn: "创建",
      pre_btn: "预创建",
      remove_btn: "删除",
      th_name: "类型",
      th_ip: "地址",
      th_node: "节点",
      th_location: "位置",
      th_session: "状态",
      th_status: "健康",
      th_edit: "操作",
      th_func: "功能",
      th_detail: "详细",
      func_unset: "停止",
      func_set: "启动",
      func_pre: "扩容",
      func_node: "节点",
      check: "确认要检查此项服务吗?",
      start: "确认要启动此项服务吗?",
      stop: "确认要停止此项服务吗?",
      stop_success: "停止成功",
      start_success: "启动成功",
      check_error: "不支持检查",
      check_success: "检查成功",
      delete_error: "请选择删除的记录",
      pre_tips: "确定要进行预创建操作吗?",
      pre_success: "预创建成功"
    },
    central_store_list: {
      title: "基础服务",
      tabletitle: "存储列表",
      add_btn: "创建",
      pre_btn: "预创建",
      remove_btn: "删除",
      th_name: "类型",
      th_ip: "地址",
      th_server: "所属服务器",
      th_session: "状态",
      th_status: "健康",
      th_edit: "操作",
      th_detail: "详细",
      th_func: "功能",
      func_unset: "停止",
      func_mount: "开局",
      mount: "确认要挂载目录吗?",
      stop: "确认要停止此项服务吗?",
      stop_success: "停止成功",
      check_error: "不支持检查",
      check_success: "检查成功",
      mount_success: "挂载成功",
      delete_error: "请选择删除的记录",
      pre_tips: "确定要进行预创建操作吗?",
      pre_success: "预创建成功"
    },
    central_client_list: {
      title: "基础服务",
      tabletitle: "客户端列表",
      add_btn: "创建",
      pre_btn: "预创建",
      remove_btn: "删除",
      th_name: "类型",
      th_ip: "地址",
      th_session: "状态",
      th_status: "健康",
      th_edit: "操作",
      th_func: "功能",
      func_unset: "停止",
      func_start: "启动",
      check: "确认要检查此项服务吗?",
      stop: "确认要停止此项服务吗?",
      stop_success: "停止成功",
      check_error: "不支持检查",
      check_success: "检查成功",
      delete_error: "请选择删除的记录",
      pre_tips: "确定要进行预创建操作吗?",
      pre_success: "预创建成功",
      start: "确认要启动此客户端吗?",
      start_success: "启动成功"
    },
    central_warning: {
      title: "系统告警",
      title_max: "阈值设置",
      title_set: "阈值",
      th_type: "类型",
      th_normal: "普通阈值",
      th_bad: "严重阈值",
      th_edit: "操作",
      func_change: "修改",
      diagnostic: "诊断信息",
      email: "邮件告警",
      warning: "告警阈值",
      diagnostic_tip1: "诊断信息用于帮助技术人员定位系统问题。",
      diagnostic_tip2: "此功能将收集监控的所有设备的日志。",
      diagnostic_btn: "收集诊断信息",
      label_ip: "收集地址",
      download_success: "收集成功",
      add_btn: "创建",
      remove_btn: "删除",
      th_email: "邮件地址",
      th_email_level: "等级",
      th_email_ttl: "告警时间",
      delete_error: "请选择删除的邮件地址",
      warn_tip: "当相应指标超过设置的阈值时，系统将会提示告警信息并发送告警邮件。",
      email_tip: "设置需要告警的邮件，当设备出现故障时可第一时间得到通知。"
    },
    central_manual: {
      title: "手动添加",
      btn_cancel: "取消",
      btn_confirm: "确认",
      mode: "类型",
      label_ip: "IP地址",
      add_server_error: "目前只支持一台元数据",
      add_store_error: "机器已监控"
    },
    central_value: {
      btn_cancel: "取消",
      btn_confirm: "确认",
      label_normal: "普通阈值",
      label_bad: "严重阈值",
      success: "修改成功"
    },
    central_email: {
      title_add: "创建",
      title_change: "修改",
      label_address: "地址",
      label_level: "等级",
      label_ttl: "告警时间",
      success_change: "修改成功",
      success_add: "添加成功",
      error: "添加失败",
      delete_error: "请选择删除的邮件地址",
      delete_success: "删除成功",
      btn_cancel: "取消",
      btn_confirm: "确认"
    },
    central_handle_log: {
      title: "未处理告警",
      btn_cancel: "取消",
      btn_confirm: "标记已读",
      date: "日期",
      level: "类型",
      status: "状态",
      message: "内容",
      success: "处理成功"
    },
    central_unmonitor: {
      title: "解除",
      ip: "地址",
      status: "状态",
      type: "类型",
      btn_cancel: "取消",
      btn_confirm: "确认",
      success: "解除成功"
    },
    facepage: {
      title: "人脸识别",
      get_card_error: "未连接读卡器或读卡器上无身份证",
      compare_success: function(num) {
        return "识别成功,相似度:" + num + "%";
      },
      compare_error: "识别度过低，请将头像对准摄像头",
      compare_link_error: "与对比系统连接失败",
      compare_remain_error: "无剩余次数,请充值"
    },
    register: {
      title: "修改资料",
      label_id: "账号",
      label_sex: "性别",
      label_username: "用户名",
      label_email: "邮箱",
      label_tel: "电话",
      label_hotelname: "酒店名称",
      label_realname: "真实姓名",
      label_location: "酒店位置",
      label_location_detail: "详细地址",
      label_summary: "简介",
      success_change: "修改成功",
      map_error: "地图连接失败,请联网",
      address_error: "地址无效,请输入正确地址",
      btn_cancel: "取消",
      btn_confirm: "确认",
      part_map_error: "部分地址获取失败",
      old_pass_error: "旧密码错误,请重新输入"
    },
    fileupload: {
      btn_cancel: "取消",
      btn_confirm: "确认",
      upgrade_btn: "上传",
      upgrade: "请选择上传文件",
      upload_success: "上传成功"
    },
    register_change_head: {
      btn_cancel: "取消",
      btn_confirm: "确认"
    },
    register_recharge: {
      title: "充值中心"
    },
    manager: {
      map_error: "地图连接失败,请联网",
      address_error: "地址无效,请输入正确地址",
      confirm_delete: "您确认要删除改用户吗?",
      delete_success: "删除成功"
    },
    precountpage: {
      no_select: "请填写完整",
      time_error: "请重新选择时间",
      no_data: "无数据,请重新选择",
      search_error: "连接服务器失败"
    },
    register_record: {
      no_data: "获取身份证信息失败,请重试",
      location_a_error: "请选择市辖区"
    }
  };

  this.lang = lang;

}).call(this);

(function() {
  var active_session, cap, cap_usage, cap_usage_raid, cap_usage_vol, caps, compare_status, disk_status, fattr, health, host, journal_status, machine_status, monitor_status, precreating, process, process_step, raid, raid_status, rebuilding, role, server_health, server_status, show_link, show_server, synchronizing, view_status, view_status_fixed, _import;

  health = function(val) {
    switch (val) {
      case "failed":
        return "<span class='label label-important'>损坏</span>";
      case "down":
        return "<span class='label label-important'>下线</span>";
      case "degraded":
        return "<span class='label label-warning'>降级</span>";
      default:
        return "<span class='label label-success'>正常</span>";
    }
  };

  role = function(val) {
    switch (val) {
      case "data":
        return "<span class='label label-success'>数据盘</span>";
      case "unused":
        return "<span class='label label-info'>未使用</span>";
      case "spare":
        return "<span class='label label-warning'>热备盘</span>";
      case "data&spare":
        return "<span class='label label-warning'>数据热备盘</span>";
      case "global_spare":
        return "<span class='label label-warning'>全局热备盘</span>";
    }
  };

  rebuilding = function(rebuilding, rebuild_progress) {
    if (!rebuilding) {
      return "<span class='label label-success'>否</span>";
    } else {
      return "" + ((rebuild_progress * 100).toFixed(2)) + "%";
    }
  };

  synchronizing = function(v) {
    var avail, _ref;
    avail = parseInt(v.sync_progress * 100);
    if (v.sync_progress === 1) {
      return "<span class='label label-success'> 完成</span>";
    } else if ((0 <= (_ref = v.sync_progress) && _ref < 1) && v.syncing === false || v.sync === false) {
      return "<a href='javascript:;' class='btn mini blue ' style='width:34px'><i class='icon-play' style='float:left'></i> " + avail + "%</a>";
    } else if (v.syncing === true || v.sync_progress === 0 || v.sync === true) {
      return "<a href='javascript:;' class='btn mini blue ' style='width:70px'><i class='icon-pause'  style='float:left'></i> 同步中 " + avail + "%</a>";
    } else if (v.sync_progress === 0 && v.syncing === false) {
      return "<a href='javascript:;' class='btn mini green '><i class='icon-ok'></i> 开启</a>";
    }
  };

  precreating = function(precreate_progress) {
    return "<span class='label label-warning'>" + precreate_progress + "%</span>";
  };

  cap_usage_vol = function(cap, used) {
    var avail, type;
    avail = parseInt(cap / 2 / 1024 / 1024 / 1024);
    type = "TB";
    if (avail <= 0) {
      avail = cap / 2 / 1024 / 1024;
      type = "GB";
    }
    if (avail <= 0) {
      avail = cap / 2 / 1024;
      type = "MB";
    }
    return "<span>" + avail + type + "</span>\n<div class=\"bar bar-danger\" style=\"width:0\"></div>\n<div class=\"bar\" style=\"width:100%\"></div>";
  };

  cap_usage_raid = function(cap, used) {
    var avail, avail_ratio, used_ratio;
    used_ratio = used / cap;
    if (used === 0) {
      used_ratio = 0;
    } else if (used_ratio < 0.01) {
      used_ratio = 1;
    } else {
      used_ratio = parseInt(used_ratio * 100);
    }
    avail_ratio = 100 - used_ratio;
    avail = parseInt((cap - used) / 2 / 1024 / 1024);
    return "<span>可用" + avail + "GB</span>\n<div class=\"bar bar-danger\" style=\"width:" + used_ratio + "%\"></div>\n<div class=\"bar\" style=\"width:" + avail_ratio + "%\"></div>";
  };

  cap = function(val) {
    var value;
    value = val / 2 / 1024 / 1024;
    return "" + (value | 0) + "GB";
  };

  caps = function(val) {
    var value;
    value = val / 1024 / 1024;
    return "" + (value | 0) + "GB";
  };

  raid = function(val) {
    if (val != null) {
      return val;
    } else {
      return 'N/A';
    }
  };

  host = function(val) {
    switch (val) {
      case "native":
        return "<span class='label label-success'>本地</span>";
      case "foreign":
        return "<span class='label label-info'>第三方</span>";
      case "used":
        return "<span class='label label-warning'>分区</span>";
    }
  };

  _import = function(val) {
    switch (val) {
      case "native":
        return "<span class='label label-success'>不需要</span>";
      case "foreign":
        return "<a href='javascript:;' class='btn mini yellow init-disk'><i class='icon-eraser'></i> 格式化</a>";
      case "used":
        return "<a href='javascript:;' class='btn mini yellow init-disk'><i class='icon-eraser'></i> 格式化</a>";
    }
  };

  active_session = function(val) {
    if (val) {
      return "<span class='label label-success'>连接中</span>";
    } else {
      return "<span class='label label-info'>未连接</span>";
    }
  };

  show_link = function(val) {
    if (val) {
      return true;
    } else {
      return false;
    }
  };

  cap_usage = function(cap, used, type) {
    var avail, avail_ratio, used_ratio;
    used_ratio = used / cap;
    if (used === 0) {
      used_ratio = 0;
    } else if (used_ratio < 0.01) {
      used_ratio = 1;
    } else {
      used_ratio = parseInt(used_ratio * 100);
    }
    avail_ratio = 100 - used_ratio;
    if (type === "GB") {
      avail = parseInt((cap - used) / 2 / 1024 / 1024);
    } else if (type === "MB") {
      avail = parseInt((cap - used) / 2 / 1024);
    } else {
      avail = parseInt((cap - used) / 2 / 1024 / 1024 / 1024);
    }
    return "<span>可用" + avail + type + "</span>\n<div class=\"bar bar-danger\" style=\"width:" + used_ratio + "%\"></div>\n<div class=\"bar\" style=\"width:" + avail_ratio + "%\"></div>";
  };

  disk_status = function(role, raidcolor, slot) {
    var style;
    style = '';
    if (role === "unused") {
      return "<span class='label label-disk-normal-noraid'>" + slot + "</span>";
    } else if (role === "nodisk") {
      return "<span class='label label-nodisk-noraid'>" + slot + "</span>";
    } else if (role === "down") {
      switch (raidcolor) {
        case "color1":
          return "<span class='label label-nodisk-raid1'>" + slot + "</span>";
        case "color2":
          return "<span class='label label-nodisk-raid2'>" + slot + "</span>";
        case "color3":
          return "<span class='label label-nodisk-raid3'>" + slot + "</span>";
        case "color4":
          return "<span class='label label-nodisk-raid4'>" + slot + "</span>";
      }
    } else if (role === "global_spare") {
      return "<span class='label label-disk-globalspare'>" + slot + "</span>";
    } else if (role === "kicked") {
      switch (raidcolor) {
        case "color0":
          return "<span class='label label-disk-unormal'>" + slot + "</span>";
        case "color1":
          return "<span class='label label-disk-unormal-raid1'>" + slot + "</span>";
        case "color2":
          return "<span class='label label-disk-unormal-raid2'>" + slot + "</span>";
        case "color3":
          return "<span class='label label-disk-unormal-raid3'>" + slot + "</span>";
        case "color4":
          return "<span class='label label-disk-unormal-raid4'>" + slot + "</span>";
      }
    } else {
      if (role === "spare") {
        style = 'color:#CC7A00';
      }
      switch (raidcolor) {
        case "color1":
          return "<span class='label label-disk-normal-raid1' style='" + style + "'>" + slot + "</span>";
        case "color2":
          return "<span class='label label-disk-normal-raid2' style='" + style + "'>" + slot + "</span>";
        case "color3":
          return "<span class='label label-disk-normal-raid3' style='" + style + "'>" + slot + "</span>";
        case "color4":
          return "<span class='label label-disk-normal-raid4' style='" + style + "'>" + slot + "</span>";
      }
    }
  };

  raid_status = function(name, color) {
    switch (color) {
      case "color1":
        return "<span style='float:left'>" + name + " :</span><div style='border:2px; background:#45d1e3; float:left; width:20px; height:20px'></div>";
      case "color2":
        return "<span style='float:left'>" + name + " :</span><div style='border:2px; background:#ffb848; float:left; width:20px; height:20px'></div>";
      case "color3":
        return "<span style='float:left'>" + name + " :</span><div style='border:2px; background:#1a1de3; float:left; width:20px; height:20px'></div>";
      case "color4":
        return "<span style='float:left'>" + name + " :</span><div style='border:2px; background:#852b99; float:left; width:20px; height:20px'></div>";
      case "color5":
        return "<span style='float:left'>全局热备 :</span><div style='border:2px; background:#e30f1b; float:left; width:20px; height:20px'></div>";
    }
  };

  server_status = function(session) {
    if (session) {
      return "<span class='label label-success'>已配置</span>";
    } else {
      return "<span class='label label-warning'>未配置</span>";
    }
  };

  server_health = function(session) {
    if (session) {
      return "<span class='label label-success'>可用</span>";
    } else {
      return "<span class='label label-important'>不可用</span>";
    }
  };

  process = function(i) {
    return "<div class=\"bar\" style=\"width:" + i + "%\"></div>";
  };

  process_step = function(i) {
    return "<span style='font-size: 15px;font-weight: bold;color: rgb(35, 138, 233);'>(步骤" + i + "/3)</span>";
  };

  show_server = function(session) {
    if (session) {
      return true;
    } else {
      return false;
    }
  };

  journal_status = function(level) {
    switch (level) {
      case "info":
        return "<span class='label label-success'><i class='icon-volume-up'></i>提醒</span>";
      case "warning":
        return "<span class='label label-warning'><i class='icon-warning-sign'></i>警告</span>";
      case "critical":
        return "<span class='label label-important'><i class='icon-remove'></i>错误</span>";
    }
  };

  monitor_status = function(total, online) {
    var rate;
    if (online !== 0) {
      rate = online / total;
      if (rate === 1) {
        return "<span class='label label-success' style='border-radius: 20px !important;'><i class='icon-like'></i>良好</span>";
      } else if ((0.8 < rate && rate < 1)) {
        return "<span class='label label-warning' style='border-radius: 20px !important;'><i class='icon-warning-sign'></i>警告</span>";
      } else {
        return "<span class='label label-important' style='border-radius: 20px !important;'><i class='icon-remove'></i>危险</span>";
      }
    } else {
      return "<span class='label label-success' style='border-radius: 20px !important;'><i class='icon-volume-up'></i>良好</span>";
    }
  };

  view_status = function(rate, alarm, alarm_type) {
    var i, _i, _len;
    if (alarm_type === "") {
      if ((0 <= rate && rate <= 30)) {
        return "<span class='label label-success' style='border-radius: 20px !important;'><i class='icon-like'></i>良好</span>";
      } else if ((30 < rate && rate <= 60)) {
        return "<span class='label label-warning' style='border-radius: 20px !important;'><i class='icon-warning-sign'></i>警告</span>";
      } else {
        return "<span class='label label-important' style='border-radius: 20px !important;'><i class='icon-remove'></i>危险</span>";
      }
    } else {
      for (_i = 0, _len = alarm.length; _i < _len; _i++) {
        i = alarm[_i];
        if (i.type === alarm_type) {
          if ((0 <= rate && rate <= i.normal)) {
            return "<span class='label label-success' style='border-radius: 20px !important;'><i class='icon-like'></i>良好</span>";
          } else if ((i.normal < rate && rate <= i.warning)) {
            return "<span class='label label-warning' style='border-radius: 20px !important;'><i class='icon-warning-sign'></i>警告</span>";
          } else {
            return "<span class='label label-important' style='border-radius: 20px !important;'><i class='icon-remove'></i>危险</span>";
          }
        }
      }
    }
  };

  view_status_fixed = function(rate) {
    if ((0 <= rate && rate <= 30)) {
      return "<span class='label label-success' style='border-radius: 20px !important;'><i class='icon-like'></i>良好</span>";
    } else if ((30 < rate && rate <= 60)) {
      return "<span class='label label-warning' style='border-radius: 20px !important;'><i class='icon-warning-sign'></i>警告</span>";
    } else {
      return "<span class='label label-important' style='border-radius: 20px !important;'><i class='icon-remove'></i>危险</span>";
    }
  };

  machine_status = (function(_this) {
    return function(e) {
      if (e) {
        return "<span class='label label-success' style='padding: 5px;border-radius: 20px !important;'><i class='icon-like'></i>良好</span>";
      } else {
        return "<span class='label label-warning' style='padding: 5px;border-radius: 20px !important;'><i class='icon-warning-sign'></i>警告</span>";
      }
    };
  })(this);

  monitor_status = function(session) {
    if (session) {
      return "<span class='label label-success'>在线</span>";
    } else {
      return "<span class='label label-important'>掉线</span>";
    }
  };

  compare_status = function(session) {
    if (session === "未对比") {
      return "<span class='label' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>未对比</span>";
    } else if (session === "正在上传图片") {
      return "<span class='label label-info' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>正在上传图片</span>";
    } else if (session === "很抱歉,不通过") {
      return "<span class='label label-important' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>不通过</span>";
    } else if (session === "恭喜你,通过") {
      return "<span class='label label-info' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>通过</span>";
    } else if (session === "对比次数已用完，请充值") {
      return "<span class='label label-important' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>对比次数已用完，请充值</span>";
    } else if (session === "读卡器未连接") {
      return "<span class='label label-important' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>读卡器未连接</span>";
    } else if (session === "读卡失败") {
      return "<span class='label label-important' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>读卡失败</span>";
    } else if (session === "未安装驱动") {
      return "<span class='label label-important' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>未安装驱动</span>";
    } else if (session === "已通过") {
      return "<span class='label label-info' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>已通过</span>";
    } else if (session === "对比完成") {
      return "<span class='label label-info' style='vertical-align: text-top;margin-right: 10px;border-radius: 10px !important;'>对比完成</span>";
    } else {
      return "<span style='vertical-align: text-top;font-size: 12px;padding-right: 14px;color: rgb(136, 136, 136);color: #169EF4;'>" + session + "</span>";
    }
  };

  fattr = {
    health: health,
    role: role,
    rebuilding: rebuilding,
    cap_usage_vol: cap_usage_vol,
    cap: cap,
    raid: raid,
    host: host,
    _import: _import,
    active_session: active_session,
    cap_usage: cap_usage,
    cap_usage_raid: cap_usage_raid,
    disk_status: disk_status,
    raid_status: raid_status,
    show_link: show_link,
    synchronizing: synchronizing,
    precreating: precreating,
    server_status: server_status,
    show_server: show_server,
    server_health: server_health,
    process: process,
    process_step: process_step,
    journal_status: journal_status,
    caps: caps,
    monitor_status: monitor_status,
    view_status: view_status,
    machine_status: machine_status,
    monitor_status: monitor_status,
    view_status_fixed: view_status_fixed,
    compare_status: compare_status
  };

  this.fattr = fattr;

}).call(this);

(function() {
  var CenterRest, CloudRest, CommandRest, DSURest, DiskRest, EmailRest, FileSystemRest, GatewayRest, IfacesRest, InitiatorRest, JournalRest, MachineDetailRest, MachineRest, ManagerRest, MonFSRest, NetworkRest, PayRest, RaidRest, RegisterRest, ResRest, Rest, SessionRest, StoreRest, SyncConfigRest, SystemInfoRest, UserRest, VolumeRest, WarningRest, ZnvConfigRest,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Rest = (function() {
    function Rest(host) {
      this.host = host;
      this.put = __bind(this.put, this);
      this.post = __bind(this.post, this);
      this._delete = __bind(this._delete, this);
      this.get = __bind(this.get, this);
      this.ajax = __bind(this.ajax, this);
    }

    Rest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        beforeSend: function(request) {
          var timestamp;
          timestamp = Date.parse(new Date());
          timestamp = timestamp / 1000;
          return request.setRequestHeader("x-amz-Date", timestamp);
        },
        data: data
      });
    };

    Rest.prototype.get = function(url, data) {
      return this.ajax("get", url, data);
    };

    Rest.prototype._delete = function(url, data) {
      return this.ajax("delete", url, data);
    };

    Rest.prototype.post = function(url, data) {
      return this.ajax("post", url, data);
    };

    Rest.prototype.put = function(url, data) {
      return this.ajax("put", url, data);
    };

    return Rest;

  })();

  ResRest = (function(_super) {
    __extends(ResRest, _super);

    function ResRest(host, res, user) {
      this.host = host;
      this.res = res;
      this.user = user;
      this["delete"] = __bind(this["delete"], this);
      this.create = __bind(this.create, this);
      this.list = __bind(this.list, this);
    }

    ResRest.prototype.list = function() {
      return this.get("/api/" + this.res + "/" + this.user);
    };

    ResRest.prototype.create = function(params) {
      return this.post("/api/" + this.res, params);
    };

    ResRest.prototype["delete"] = function(id) {
      return this._delete("/api/" + this.res + "/" + id);
    };

    return ResRest;

  })(Rest);

  DiskRest = (function(_super) {
    __extends(DiskRest, _super);

    function DiskRest() {
      this.set_disk_role = __bind(this.set_disk_role, this);
      this.format = __bind(this.format, this);
      this.list = __bind(this.list, this);
      return DiskRest.__super__.constructor.apply(this, arguments);
    }

    DiskRest.prototype.list = function() {
      return this.get("/api/disks");
    };

    DiskRest.prototype.format = function(location) {
      return this.put("/api/disks/" + location, {
        host: 'native'
      });
    };

    DiskRest.prototype.set_disk_role = function(location, role, raidname) {
      var data;
      data = {
        role: role
      };
      if (raidname !== null) {
        data.raid = raidname;
      }
      return this.put("/api/disks/" + location, data);
    };

    return DiskRest;

  })(Rest);

  RaidRest = (function(_super) {
    __extends(RaidRest, _super);

    function RaidRest(host) {
      RaidRest.__super__.constructor.call(this, host, 'raids');
    }

    return RaidRest;

  })(ResRest);

  VolumeRest = (function(_super) {
    __extends(VolumeRest, _super);

    function VolumeRest(host) {
      VolumeRest.__super__.constructor.call(this, host, 'volumes');
    }

    return VolumeRest;

  })(ResRest);

  InitiatorRest = (function(_super) {
    __extends(InitiatorRest, _super);

    function InitiatorRest(host) {
      this.unmap = __bind(this.unmap, this);
      this.map = __bind(this.map, this);
      InitiatorRest.__super__.constructor.call(this, host, 'initiators');
    }

    InitiatorRest.prototype.map = function(wwn, volume) {
      return this.post("/api/" + this.res + "/" + wwn + "/luns", {
        volume: volume
      });
    };

    InitiatorRest.prototype.unmap = function(wwn, volume) {
      return this["delete"]("" + wwn + "/luns/" + volume);
    };

    return InitiatorRest;

  })(ResRest);

  DSURest = (function(_super) {
    __extends(DSURest, _super);

    function DSURest() {
      this.slient = __bind(this.slient, this);
      this.list = __bind(this.list, this);
      return DSURest.__super__.constructor.apply(this, arguments);
    }

    DSURest.prototype.list = function() {
      return this.get("/api/dsus");
    };

    DSURest.prototype.slient = function() {
      return this.put("/api/beep");
    };

    return DSURest;

  })(Rest);

  NetworkRest = (function(_super) {
    __extends(NetworkRest, _super);

    function NetworkRest() {
      this.cancel_eth_bonding = __bind(this.cancel_eth_bonding, this);
      this.modify_eth_bonding = __bind(this.modify_eth_bonding, this);
      this.create_eth_bonding = __bind(this.create_eth_bonding, this);
      this.config = __bind(this.config, this);
      this.list = __bind(this.list, this);
      this.ajax = __bind(this.ajax, this);
      return NetworkRest.__super__.constructor.apply(this, arguments);
    }

    NetworkRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        data: data,
        timeout: 6000
      });
    };

    NetworkRest.prototype.list = function() {
      return this.get("/api/interfaces");
    };

    NetworkRest.prototype.config = function(iface, ipaddr, netmask) {
      return this.put("/api/network/interfaces/" + iface, {
        address: ipaddr,
        netmask: netmask
      });
    };

    NetworkRest.prototype.create_eth_bonding = function(ip, netmask, mode) {
      return this.post("/api/network/bond/bond0", {
        slaves: "eth0,eth1",
        address: ip,
        netmask: netmask,
        mode: mode
      });
    };

    NetworkRest.prototype.modify_eth_bonding = function(ip, netmask) {
      return this.put("/api/network/bond/bond0", {
        address: ip,
        netmask: netmask
      });
    };

    NetworkRest.prototype.cancel_eth_bonding = function() {
      return this._delete("/api/network/bond/bond0");
    };

    return NetworkRest;

  })(Rest);

  JournalRest = (function(_super) {
    __extends(JournalRest, _super);

    function JournalRest() {
      this.raid_info = __bind(this.raid_info, this);
      this.disk_info = __bind(this.disk_info, this);
      this.delete_log = __bind(this.delete_log, this);
      this.list = __bind(this.list, this);
      return JournalRest.__super__.constructor.apply(this, arguments);
    }

    JournalRest.prototype.list = function(offset, limit) {
      return this.get("/api/journals");
    };

    JournalRest.prototype.delete_log = function() {
      return this.post("/api/journalsdel");
    };

    JournalRest.prototype.disk_info = function(ip) {
      return this.post("/api/cloudredisks", {
        ip: ip
      });
    };

    JournalRest.prototype.raid_info = function(ip) {
      return this.post("/api/cloudreraids", {
        ip: ip
      });
    };

    return JournalRest;

  })(Rest);

  UserRest = (function(_super) {
    __extends(UserRest, _super);

    function UserRest() {
      this.change_password = __bind(this.change_password, this);
      return UserRest.__super__.constructor.apply(this, arguments);
    }

    UserRest.prototype.change_password = function(name, old_password, new_password) {
      return this.put("/api/users/" + name + "/password", {
        old_password: old_password,
        new_password: new_password
      });
    };

    return UserRest;

  })(Rest);

  ZnvConfigRest = (function(_super) {
    __extends(ZnvConfigRest, _super);

    function ZnvConfigRest() {
      this.stop_service = __bind(this.stop_service, this);
      this.start_service = __bind(this.start_service, this);
      this.znvconfig = __bind(this.znvconfig, this);
      this.precreate = __bind(this.precreate, this);
      return ZnvConfigRest.__super__.constructor.apply(this, arguments);
    }

    ZnvConfigRest.prototype.precreate = function(volume) {
      return this.post("/api/precreate", {
        volume: volume
      });
    };

    ZnvConfigRest.prototype.znvconfig = function(bool, serverid, local_serverip, local_serverport, cmssverip, cmssverport, directory) {
      if (bool) {
        return this.put("/api/zxconfig/store/set", {
          serverid: serverid,
          local_serverip: local_serverip,
          local_serverport: local_serverport,
          cmssverip: cmssverip,
          cmssverport: cmssverport,
          directory: directory
        });
      } else {
        return this.put("/api/zxconfig/dispath/set", {
          serverid: serverid,
          local_serverip: local_serverip,
          local_serverport: local_serverport,
          cmssverip: cmssverip,
          cmssverport: cmssverport
        });
      }
    };

    ZnvConfigRest.prototype.start_service = function(bool) {
      if (bool) {
        return this.put("/api/zxconfig/store/start");
      } else {
        return this.put("/api/zxconfig/dispath/start");
      }
    };

    ZnvConfigRest.prototype.stop_service = function(bool) {
      if (bool) {
        return this.put("/api/zxconfig/store/stop");
      } else {
        return this.put("/api/zxconfig/dispath/stop");
      }
    };

    return ZnvConfigRest;

  })(Rest);

  CommandRest = (function(_super) {
    __extends(CommandRest, _super);

    function CommandRest() {
      this.slient = __bind(this.slient, this);
      this.create_lw_files = __bind(this.create_lw_files, this);
      this.recover = __bind(this.recover, this);
      this.sysinit = __bind(this.sysinit, this);
      this.reboot = __bind(this.reboot, this);
      this.poweroff = __bind(this.poweroff, this);
      this.ajax = __bind(this.ajax, this);
      return CommandRest.__super__.constructor.apply(this, arguments);
    }

    CommandRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        data: data,
        timeout: 4000
      });
    };

    CommandRest.prototype.poweroff = function() {
      return this.put("/api/commands/poweroff");
    };

    CommandRest.prototype.reboot = function() {
      return this.put("/api/commands/reboot");
    };

    CommandRest.prototype.sysinit = function() {
      return this.put("/api/commands/init");
    };

    CommandRest.prototype.recover = function() {
      return this.put("/api/commands/recovery");
    };

    CommandRest.prototype.create_lw_files = function() {
      return this.put("/api/commands/create_lw_files", {
        async: true
      });
    };

    CommandRest.prototype.slient = function() {
      return this.put("/api/beep");
    };

    return CommandRest;

  })(Rest);

  GatewayRest = (function(_super) {
    __extends(GatewayRest, _super);

    function GatewayRest() {
      this.config = __bind(this.config, this);
      this.query = __bind(this.query, this);
      return GatewayRest.__super__.constructor.apply(this, arguments);
    }

    GatewayRest.prototype.query = function() {
      return this.get("/api/network/gateway");
    };

    GatewayRest.prototype.config = function(address) {
      return this.put("/api/network/gateway", {
        address: address
      });
    };

    return GatewayRest;

  })(Rest);

  SystemInfoRest = (function(_super) {
    __extends(SystemInfoRest, _super);

    function SystemInfoRest() {
      this.query = __bind(this.query, this);
      return SystemInfoRest.__super__.constructor.apply(this, arguments);
    }

    SystemInfoRest.prototype.query = function() {
      return this.get("/api/systeminfo");
    };

    return SystemInfoRest;

  })(Rest);

  SessionRest = (function(_super) {
    __extends(SessionRest, _super);

    function SessionRest() {
      this.change_pass = __bind(this.change_pass, this);
      this.forget = __bind(this.forget, this);
      this.create = __bind(this.create, this);
      this.login = __bind(this.login, this);
      this.register = __bind(this.register, this);
      this.ajax = __bind(this.ajax, this);
      return SessionRest.__super__.constructor.apply(this, arguments);
    }

    SessionRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        beforeSend: function(request) {
          var kDate, kRegion, kService, kSigning, key, timestamp;
          timestamp = Date.parse(new Date());
          timestamp = (timestamp / 1000).toString();
          key = data["password"];
          kDate = CryptoJS.HmacSHA256(timestamp, "AWS4" + key);
          kRegion = CryptoJS.HmacSHA256('a', kDate);
          kService = CryptoJS.HmacSHA256('a', kRegion);
          kSigning = CryptoJS.HmacSHA256("aws4_request", kService);
          request.setRequestHeader("x-amz-Date", timestamp);
          return request.setRequestHeader("Authorization", kSigning);
        },
        data: data,
        timeout: 4000
      });
    };

    SessionRest.prototype.register = function(name, passwd, email, location) {
      return this.post("/api/register", {
        user: name,
        password: passwd,
        email: email,
        location: location
      });
    };

    SessionRest.prototype.login = function(name, passwd) {
      return this.post("/api/login", {
        account: name,
        password: passwd
      });
    };

    SessionRest.prototype.create = function(name, passwd) {
      return this.post("/api/sessions", {
        name: name,
        password: passwd
      });
    };

    SessionRest.prototype.forget = function(email) {
      return this.post("/api/findPasswd", {
        email: email
      });
    };

    SessionRest.prototype.change_pass = function(account, old_pass, new_pass) {
      return this.post("/api/updatePassword", {
        account: account,
        old: old_pass,
        "new": new_pass
      });
    };

    return SessionRest;

  })(Rest);

  FileSystemRest = (function(_super) {
    __extends(FileSystemRest, _super);

    function FileSystemRest() {
      this.scan = __bind(this.scan, this);
      this["delete"] = __bind(this["delete"], this);
      this.create = __bind(this.create, this);
      this.create_cy = __bind(this.create_cy, this);
      this.query = __bind(this.query, this);
      this.ajax = __bind(this.ajax, this);
      return FileSystemRest.__super__.constructor.apply(this, arguments);
    }

    FileSystemRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        data: data,
        timeout: 300 * 1000
      });
    };

    FileSystemRest.prototype.query = function() {
      return this.get("/api/filesystems");
    };

    FileSystemRest.prototype.create_cy = function(name, volume) {
      return this.post("/api/filesystems", {
        name: name,
        volume: volume
      });
    };

    FileSystemRest.prototype.create = function(name, type, volume) {
      return this.post("/api/filesystems", {
        name: name,
        type: type,
        volume: volume
      });
    };

    FileSystemRest.prototype["delete"] = function(name) {
      return this._delete("/api/filesystems/" + name);
    };

    FileSystemRest.prototype.scan = function(name) {
      return this.put("/api/filesystems/detection", {
        name: name
      });
    };

    return FileSystemRest;

  })(Rest);

  MachineRest = (function(_super) {
    __extends(MachineRest, _super);

    function MachineRest() {
      this.delete_user = __bind(this.delete_user, this);
      this.search_data = __bind(this.search_data, this);
      this.change_data = __bind(this.change_data, this);
      this.uploadpic = __bind(this.uploadpic, this);
      this.compare_own = __bind(this.compare_own, this);
      this.compare = __bind(this.compare, this);
      this.get_pic = __bind(this.get_pic, this);
      this.get_path = __bind(this.get_path, this);
      this.get_card = __bind(this.get_card, this);
      this.change_email = __bind(this.change_email, this);
      this.refresh_detail = __bind(this.refresh_detail, this);
      this.handle_log = __bind(this.handle_log, this);
      this.change_value = __bind(this.change_value, this);
      this.delete_email = __bind(this.delete_email, this);
      this.download_log = __bind(this.download_log, this);
      this.client = __bind(this.client, this);
      this.storage = __bind(this.storage, this);
      this["export"] = __bind(this["export"], this);
      this.rozostop = __bind(this.rozostop, this);
      this.delete_record = __bind(this.delete_record, this);
      this.add = __bind(this.add, this);
      this.machine = __bind(this.machine, this);
      this.unmonitor = __bind(this.unmonitor, this);
      this.monitor = __bind(this.monitor, this);
      this.query = __bind(this.query, this);
      this.ajax = __bind(this.ajax, this);
      return MachineRest.__super__.constructor.apply(this, arguments);
    }

    MachineRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        data: data
      });
    };

    MachineRest.prototype.query = function() {
      return this.get("/api/machines");
    };

    MachineRest.prototype.monitor = function(uuid, ip, slotnr, devtype) {
      return this.post("/api/machines", {
        uuid: uuid,
        ip: ip,
        slotnr: slotnr,
        devtype: devtype
      });
    };

    MachineRest.prototype.unmonitor = function(uuid) {
      return this._delete("/api/machines/" + uuid);
    };

    MachineRest.prototype.machine = function(uuid) {
      return this.get("/api/machine/" + uuid);
    };

    MachineRest.prototype.add = function(ip, type) {
      return this.post("/api/devices", {
        ip: ip,
        version: "ZS2000",
        devtype: type,
        size: "4U"
      });
    };

    MachineRest.prototype.delete_record = function(uuid) {
      return this._delete("/api/devices/" + uuid);
    };

    MachineRest.prototype.rozostop = function(name, ip) {
      return this.post("/api/rozostop", {
        stoptype: name,
        ip: ip
      });
    };

    MachineRest.prototype["export"] = function(ip, expand) {
      return this.post("/api/export", {
        ip: ip,
        expand: expand
      });
    };

    MachineRest.prototype.storage = function(ip, cid) {
      return this.post("/api/storage", {
        "export": ip,
        cid: cid
      });
    };

    MachineRest.prototype.client = function(ip) {
      return this.post("/api/client", {
        ip: ip
      });
    };

    MachineRest.prototype.download_log = function(ip) {
      return this.get("/api/diagnosis/" + ip);
    };

    MachineRest.prototype.delete_email = function(address) {
      return this._delete("/api/mail/" + address);
    };

    MachineRest.prototype.change_value = function(type, normal, bad) {
      return this.post("/api/threshhold", {
        type: type,
        normal: normal,
        warning: bad
      });
    };

    MachineRest.prototype.handle_log = function(uid) {
      return this.post("/api/attention", {
        uid: uid
      });
    };

    MachineRest.prototype.refresh_detail = function(uid) {
      return this.post("/api/machinedetails", {
        uuid: uid
      });
    };

    MachineRest.prototype.change_email = function(address, level, ttl) {
      return this.post("/api/mail", {
        address: address,
        level: level,
        ttl: ttl
      });
    };

    MachineRest.prototype.get_card = function(names) {
      return this.post("/api/getMsg", {
        name: names
      });
    };

    MachineRest.prototype.get_path = function(tmp) {
      return this.post("/api/getPath", {
        path: tmp
      });
    };

    MachineRest.prototype.get_pic = function(pic) {
      return this.post("/api/getPic", {
        base64: pic
      });
    };

    MachineRest.prototype.compare = function(user, ID, msg) {
      return this.post("/api/compare", {
        account: user,
        ID: ID,
        msg: msg
      });
    };

    MachineRest.prototype.compare_own = function(user) {
      return this.post("/v1/compare", {
        uname: user
      });
    };

    MachineRest.prototype.uploadpic = function(pic) {
      return this.post("/api/upload", {
        image: pic
      });
    };

    MachineRest.prototype.change_data = function(user, email, hotelname, location, realname, tel, acount, sex) {
      return this.post("/api/updateUMsg", {
        user: user,
        realname: realname,
        tel: tel,
        email: email,
        hotelname: hotelname,
        location: location,
        account: acount,
        sex: sex
      });
    };

    MachineRest.prototype.search_data = function(ipc) {
      return this.get("/api/statistics");
    };

    MachineRest.prototype.delete_user = function(account) {
      return this.post("/api/deleteUser", {
        account: account
      });
    };

    return MachineRest;

  })(Rest);

  MonFSRest = (function(_super) {
    __extends(MonFSRest, _super);

    function MonFSRest() {
      this["delete"] = __bind(this["delete"], this);
      this.create = __bind(this.create, this);
      this.query = __bind(this.query, this);
      return MonFSRest.__super__.constructor.apply(this, arguments);
    }

    MonFSRest.prototype.query = function() {
      return this.get("/api/monfs");
    };

    MonFSRest.prototype.create = function(name, volume) {
      return this.post("/api/monfs", {
        name: name,
        volume: volume
      });
    };

    MonFSRest.prototype["delete"] = function(name) {
      return this._delete("/api/monfs/" + name);
    };

    return MonFSRest;

  })(Rest);

  IfacesRest = (function(_super) {
    __extends(IfacesRest, _super);

    function IfacesRest() {
      this.query = __bind(this.query, this);
      this.ajax = __bind(this.ajax, this);
      return IfacesRest.__super__.constructor.apply(this, arguments);
    }

    IfacesRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        data: data,
        timeout: 2000
      });
    };

    IfacesRest.prototype.query = function() {
      return this.get("/api/ifaces");
    };

    return IfacesRest;

  })(Rest);

  SyncConfigRest = (function(_super) {
    __extends(SyncConfigRest, _super);

    function SyncConfigRest() {
      this.sync_disable = __bind(this.sync_disable, this);
      this.sync_enable = __bind(this.sync_enable, this);
      this.ajax = __bind(this.ajax, this);
      return SyncConfigRest.__super__.constructor.apply(this, arguments);
    }

    SyncConfigRest.prototype.ajax = function(type, url, data) {
      return $.ajax({
        headers: {
          Accept: "application/json"
        },
        type: type,
        url: "http://" + this.host + url,
        data: data,
        timeout: 400000
      });
    };

    SyncConfigRest.prototype.sync_enable = function(name) {
      return this.put("/api/sync", {
        name: name,
        command: "start"
      });
    };

    SyncConfigRest.prototype.sync_disable = function(name) {
      return this.put("/api/sync", {
        name: name,
        command: "stop"
      });
    };

    return SyncConfigRest;

  })(Rest);

  CenterRest = (function(_super) {
    __extends(CenterRest, _super);

    function CenterRest(host) {
      CenterRest.__super__.constructor.call(this, host, 'machines');
    }

    return CenterRest;

  })(ResRest);

  CloudRest = (function(_super) {
    __extends(CloudRest, _super);

    function CloudRest(host) {
      CloudRest.__super__.constructor.call(this, host, 'devices');
    }

    return CloudRest;

  })(ResRest);

  MachineDetailRest = (function(_super) {
    __extends(MachineDetailRest, _super);

    function MachineDetailRest(host) {
      MachineDetailRest.__super__.constructor.call(this, host, 'machinedetails');
    }

    return MachineDetailRest;

  })(ResRest);

  StoreRest = (function(_super) {
    __extends(StoreRest, _super);

    function StoreRest(host) {
      StoreRest.__super__.constructor.call(this, host, 'storeviews');
    }

    return StoreRest;

  })(ResRest);

  WarningRest = (function(_super) {
    __extends(WarningRest, _super);

    function WarningRest(host) {
      WarningRest.__super__.constructor.call(this, host, 'threshhold');
    }

    return WarningRest;

  })(ResRest);

  EmailRest = (function(_super) {
    __extends(EmailRest, _super);

    function EmailRest(host) {
      EmailRest.__super__.constructor.call(this, host, 'mail');
    }

    return EmailRest;

  })(ResRest);

  RegisterRest = (function(_super) {
    __extends(RegisterRest, _super);

    function RegisterRest(host, user) {
      RegisterRest.__super__.constructor.call(this, host, 'getUMsg', user);
    }

    return RegisterRest;

  })(ResRest);

  PayRest = (function(_super) {
    __extends(PayRest, _super);

    function PayRest(host, user) {
      PayRest.__super__.constructor.call(this, host, 'getRecord', user);
    }

    return PayRest;

  })(ResRest);

  ManagerRest = (function(_super) {
    __extends(ManagerRest, _super);

    function ManagerRest(host, user) {
      user = '123123';
      ManagerRest.__super__.constructor.call(this, host, 'getAll', user);
    }

    return ManagerRest;

  })(ResRest);

  this.ManagerRest = ManagerRest;

  this.RegisterRest = RegisterRest;

  this.PayRest = PayRest;

  this.MachineDetailRest = MachineDetailRest;

  this.EmailRest = EmailRest;

  this.WarningRest = WarningRest;

  this.CenterRest = CenterRest;

  this.CloudRest = CloudRest;

  this.StoreRest = StoreRest;

  this.DSURest = DSURest;

  this.DiskRest = DiskRest;

  this.RaidRest = RaidRest;

  this.VolumeRest = VolumeRest;

  this.InitiatorRest = InitiatorRest;

  this.UserRest = UserRest;

  this.NetworkRest = NetworkRest;

  this.JournalRest = JournalRest;

  this.CommandRest = CommandRest;

  this.GatewayRest = GatewayRest;

  this.SystemInfoRest = SystemInfoRest;

  this.SessionRest = SessionRest;

  this.MachineRest = MachineRest;

  this.MonFSRest = MonFSRest;

  this.IfacesRest = IfacesRest;

  this.FileSystemRest = FileSystemRest;

  this.ZnvConfigRest = ZnvConfigRest;

  this.SyncConfigRest = SyncConfigRest;

  this.Rest = Rest;

}).call(this);

(function() {
  var arr_remove, base_data, cap_to_sector, compare_Interval, compare_card, compare_result, compare_temp, disks_type, gb_to_sector, global_Interval, mb_to_sector, prefix_wwn, random, random_id, sector_to_gb, sector_to_mb, sector_to_tb, server_type, subitems, subitems_key, tb_to_sector, temp_data, unique;

  prefix_wwn = "iqn.2013-01.net.zbx.initiator";

  temp_data = [];

  server_type = {
    store: '',
    header: true,
    type: ''
  };

  global_Interval = [];

  compare_Interval = [];

  compare_result = [];

  compare_card = [];

  compare_temp = [];

  random = "";

  disks_type = {
    enterprise: ['ST4000NM0033', 'ST3000NM0033', 'ST2000NM0033', 'ST1000NM0033', 'WD1000FYYZ', 'WD2000FYYZ', 'WD3000FYYZ', 'WD4000FYYZ', 'HUS723040ALA640', 'MG03ACA300'],
    monitor: ['ST8000VX0002', 'ST1000VX000', 'ST2000VX000', 'ST3000VX000', 'ST3000VX006', 'ST4000VX000', 'WD10PURX', 'WD20PURX', 'WD30PURX', 'WD40PURX'],
    sas: ['WD3001FYYG', 'ST2000NM0023']
  };

  random_id = function(prefix) {
    var nr;
    nr = Math.floor(Math.random() * Math.pow(2, 32));
    return "" + prefix + nr;
  };

  sector_to_mb = function(sector) {
    return sector / 2 / 1024;
  };

  sector_to_gb = function(sector) {
    return sector / 2 / 1024 / 1024;
  };

  sector_to_tb = function(sector) {
    return sector / 2 / 1024 / 1024 / 1024;
  };

  mb_to_sector = function(mb) {
    return mb * 1024 * 2;
  };

  gb_to_sector = function(gb) {
    return gb * 1024 * 1024 * 2;
  };

  tb_to_sector = function(tb) {
    return tb * 1024 * 1024 * 1024 * 2;
  };

  cap_to_sector = function(cap, unit) {
    unit = unit.toUpperCase();
    switch (unit) {
      case "MB":
        return mb_to_sector(cap);
      case "GB":
        return gb_to_sector(cap);
      case "TB":
        return tb_to_sector(cap);
    }
  };

  subitems = function(items, templ) {
    var item, _i, _len, _results, _templ;
    _templ = function(item, templ) {
      var attr, o, v;
      o = {};
      for (attr in templ) {
        v = templ[attr];
        o[attr] = attr in item ? item[attr] : v;
      }
      return o;
    };
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      _results.push(_templ(item, templ));
    }
    return _results;
  };

  subitems_key = function(items, templ) {
    var item, _i, _len, _results, _templ;
    _templ = function(item, templ) {
      var attr, o, v;
      o = {};
      for (attr in templ) {
        v = templ[attr];
        o[attr] = v in item ? item[v] : '';
      }
      return o;
    };
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      _results.push(_templ(item, templ));
    }
    return _results;
  };

  arr_remove = function(items, item) {
    var index;
    index = items.indexOf(item);
    if (index !== -1) {
      items.splice(index, 1);
    }
    return items;
  };

  unique = function(arr) {
    var is_unique, item, result, result_item, _i, _j, _len, _len1;
    result = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      is_unique = true;
      for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
        result_item = result[_j];
        if (result_item === item) {
          is_unique = false;
          break;
        }
      }
      if (is_unique) {
        result.push(item);
      }
    }
    return result;
  };

  base_data = [];

  this.random = random;

  this.base_data = base_data;

  this.compare_temp = compare_temp;

  this.compare_card = compare_card;

  this.compare_result = compare_result;

  this.global_Interval = global_Interval;

  this.compare_Interval = compare_Interval;

  this.prefix_wwn = prefix_wwn;

  this.disks_type = disks_type;

  this.subitems = subitems;

  this.subitems_key = subitems_key;

  this.arr_remove = arr_remove;

  this.cap_to_sector = cap_to_sector;

  this.gb_to_sector = gb_to_sector;

  this.mb_to_sector = mb_to_sector;

  this.random_id = random_id;

  this.sector_to_gb = sector_to_gb;

  this.sector_to_mb = sector_to_mb;

  this.sector_to_tb = sector_to_tb;

  this.server_type = server_type;

  this.tb_to_sector = tb_to_sector;

  this.unique = unique;

  this.temp_data = temp_data;

}).call(this);

(function() {
  var CentralStorageData, Chain, ResSource, SingleSource, StorageData,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ResSource = (function() {
    function ResSource(rest, process) {
      this.rest = rest;
      this.process = process;
      this.notify_updated = __bind(this.notify_updated, this);
      this._update_data = __bind(this._update_data, this);
      this.get = __bind(this.get, this);
      this.update = __bind(this.update, this);
      this.items = [];
      this.map = {};
    }

    ResSource.prototype.update = function() {
      return this.rest.list().done((function(_this) {
        return function(data) {
          if (data.status === "success") {
            return _this._update_data(data.detail);
          } else {
            return _this._update_data([]);
          }
        };
      })(this)).fail((function(_this) {
        return function(jqXHR, text_status, e) {
          return _this._update_data([]);
        };
      })(this));
    };

    ResSource.prototype.get = function(id) {
      return this.map[id];
    };

    ResSource.prototype._update_data = function(data) {
      var o, _i, _len, _ref;
      if (this.process) {
        data = this.process(data);
      }
      this.items = data;
      this.map = {};
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        this.map[o.id] = o;
      }
      return this.notify_updated();
    };

    ResSource.prototype.notify_updated = function() {
      return $(this).triggerHandler("updated", this);
    };

    return ResSource;

  })();

  SingleSource = (function() {
    function SingleSource(rest, _default) {
      this.rest = rest;
      this["default"] = _default;
      this.notify_updated = __bind(this.notify_updated, this);
      this.update = __bind(this.update, this);
      this.data = this["default"];
    }

    SingleSource.prototype.update = function() {
      return this.rest.query().done((function(_this) {
        return function(data) {
          if (data.status === "success") {
            _this.data = data.detail;
          } else {
            _this.data = _this["default"];
          }
          return _this.notify_updated();
        };
      })(this)).fail((function(_this) {
        return function(jqXHR, text_status, e) {
          _this.data = _this["default"];
          return _this.notify_updated();
        };
      })(this));
    };

    SingleSource.prototype.notify_updated = function() {
      return $(this).triggerHandler("updated", this);
    };

    return SingleSource;

  })();

  Chain = (function() {
    function Chain(errc) {
      this.errc = errc;
      this.execute = __bind(this.execute, this);
      this._fail = __bind(this._fail, this);
      this._done = __bind(this._done, this);
      this._notify_progress = __bind(this._notify_progress, this);
      this.chain = __bind(this.chain, this);
      this.dfd = $.Deferred();
      this.chains = [];
      this.total = 0;
    }

    Chain.prototype.chain = function(arg) {
      var queue, step, _i, _len;
      if (arg instanceof Chain) {
        queue = arg.chains;
      } else if ($.isArray(arg)) {
        queue = arg;
      } else {
        queue = [arg];
      }
      for (_i = 0, _len = queue.length; _i < _len; _i++) {
        step = queue[_i];
        this.chains.push(step);
        this.total += 1;
      }
      return this;
    };

    Chain.prototype._notify_progress = function() {
      return $(this).triggerHandler("progress", {
        ratio: (this.total - this.chains.length) / this.total
      });
    };

    Chain.prototype._done = function(data, text_status, jqXHR) {
      var _ref;
      if (this.chains.length === 0) {
        $(this).triggerHandler("completed");
        temp_data.push(data);
        return this.dfd.resolve();
      } else {
        _ref = this.chains, this.cur = _ref[0], this.chains = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
        jqXHR = this.cur();
        this._notify_progress();
        return jqXHR.done(this._done).fail(this._fail);
      }
    };

    Chain.prototype._fail = function(jqXHR, text_status, e) {
      var reason;
      reason = jqXHR.status === 400 ? JSON.parse(jqXHR.responseText) : text_status;
      $(this).triggerHandler("error", {
        error: reason,
        step: this.cur
      });
      if (this.errc) {
        this.errc({
          error: reason,
          step: this.cur
        });
        return this._done();
      } else {
        return this.dfd.reject(jqXHR.status, reason);
      }
    };

    Chain.prototype.execute = function() {
      this._done();
      this.promise = this.dfd.promise();
      return this.promise;
    };

    return Chain;

  })();

  StorageData = (function() {
    function StorageData(host) {
      this.host = host;
      this.disconnect_listener = __bind(this.disconnect_listener, this);
      this.close_socket = __bind(this.close_socket, this);
      this._update_loop = __bind(this._update_loop, this);
      this.update = __bind(this.update, this);
      this.feed_event = __bind(this.feed_event, this);
      this.spare_volumes = __bind(this.spare_volumes, this);
      this.initr_volumes = __bind(this.initr_volumes, this);
      this.volume_initrs = __bind(this.volume_initrs, this);
      this.raid_disks = __bind(this.raid_disks, this);
      this._update_queue = [];
      this._deps = {
        disks: ["disks", "raids", "journals"],
        raids: ["disks", "raids", "journals"],
        volumes: ["raids", "volumes", "initrs", "journals"],
        initrs: ["volumes", "initrs", "journals"],
        networks: ["networks", "gateway", "journals"],
        monfs: ["monfs", "volumes", "journals"],
        filesystem: ["filesystem", "volumes", "journals"],
        all: ["dsus", "disks", "raids", "volumes", "initrs", "networks", "journals", "gateway", "filesystem", "systeminfo"]
      };
      this.disks = new ResSource(new DiskRest(this.host));
      this.raids = new ResSource(new RaidRest(this.host));
      this.volumes = new ResSource(new VolumeRest(this.host));
      this.initrs = new ResSource(new InitiatorRest(this.host));
      this.networks = new ResSource(new NetworkRest(this.host));
      this.journals = new ResSource(new JournalRest(this.host));
      this.dsus = new ResSource(new DSURest(this.host));
      this.gateway = new SingleSource(new GatewayRest(this.host), {
        ipaddr: ""
      });
      this.monfs = new SingleSource(new MonFSRest(this.host), {});
      this.filesystem = new SingleSource(new FileSystemRest(this.host), {});
      this.systeminfo = new SingleSource(new SystemInfoRest(this.host), {
        version: "UNKOWN"
      });
      this.stats = {
        items: []
      };
      this.socket_statist = io.connect("" + this.host + "/statistics", {
        "reconnect": false,
        "force new connection": true
      });
      this.socket_statist.on("statistics", (function(_this) {
        return function(data) {
          if (_this.stats.items.length > 120) {
            _this.stats.items.shift();
          }
          _this.stats.items.push(data);
          return $(_this.stats).triggerHandler("updated", _this.stats);
        };
      })(this));
      this.socket_event = io.connect("" + this.host + "/event", {
        "reconnect": false,
        "force new connection": true
      });
      this.socket_event.on("event", this.feed_event);
      this.socket_event.on("disconnect", this.disconnect_listener);
      this._update_loop();
    }

    StorageData.prototype.raid_disks = function(raid) {
      var d, disks;
      disks = (function() {
        var _i, _len, _ref, _results;
        _ref = this.disks.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          if (d.raid === raid.name) {
            _results.push(d);
          }
        }
        return _results;
      }).call(this);
      disks.sort(function(o1, o2) {
        return o1.slot - o2.slot;
      });
      return disks;
    };

    StorageData.prototype.volume_initrs = function(volume) {
      var initr, v, _i, _len, _ref, _ref1, _results;
      _ref = this.initrs.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        initr = _ref[_i];
        if (_ref1 = volume.name, __indexOf.call((function() {
          var _j, _len1, _ref2, _results1;
          _ref2 = initr.volumes;
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            v = _ref2[_j];
            _results1.push(v);
          }
          return _results1;
        })(), _ref1) >= 0) {
          _results.push(initr);
        }
      }
      return _results;
    };

    StorageData.prototype.initr_volumes = function(initr) {
      var v, _i, _len, _ref, _ref1, _results;
      _ref = this.volumes.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (_ref1 = v.name, __indexOf.call(initr.volumes, _ref1) >= 0) {
          _results.push(v);
        }
      }
      return _results;
    };

    StorageData.prototype.spare_volumes = function() {
      var initr, used, volume, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
      used = [];
      _ref = this.initrs.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        initr = _ref[_i];
        used = used.concat(initr.volumes);
      }
      _ref1 = this.volumes.items;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        volume = _ref1[_j];
        if (_ref2 = volume.name, __indexOf.call(used, _ref2) < 0) {
          _results.push(volume);
        }
      }
      return _results;
    };

    StorageData.prototype.feed_event = function(e) {
      var initr, raid, volume;
      console.log(e);
      switch (e.event) {
        case "disk.ioerror":
        case "disk.formated":
        case "disk.plugged":
        case "disk.unplugged":
          this._update_queue.push(this.disks);
          return this._update_queue.push(this.journals);
        case "disk.role_changed":
          this._update_queue.push(this.disks);
          this._update_queue.push(this.raids);
          return this._update_queue.push(this.journals);
        case "raid.normal":
        case "raid.degraded":
        case "raid.failed":
          this._update_queue.push(this.raids);
          return this._update_queue.push(this.journals);
        case "raid.rebuild":
          raid = this.raids.get(e.raid);
          if (raid !== void 0) {
            raid.rebuilding = e.rebuilding;
            raid.health = e.health;
            raid.rebuild_progress = e.rebuild_progress;
            return $(this).triggerHandler("raid", raid);
          }
          break;
        case "raid.rebuild_done":
          raid = this.raids.get(e.raid);
          if (raid !== void 0) {
            raid.rebuilding = e.rebuilding;
            raid.health = e.health;
            raid.rebuild_progress = e.rebuild_progress;
            $(this).triggerHandler("raid", raid);
            return this._update_queue.push(this.disks);
          }
          break;
        case "raid.created":
        case "raid.removed":
          this._update_queue.push(this.disks);
          this._update_queue.push(this.raids);
          return this._update_queue.push(this.journals);
        case "raid.rqr":
          raid = this.raids.get(e.raid);
          raid.rqr_count = e.rqr_count;
          return $(this).triggerHandler("raid", raid);
        case "volume.failed":
        case "volume.normal":
          volume = this.volumes.get(e.uuid);
          if (volume !== void 0) {
            volume.event = e.event;
            $(this).triggerHandler("volume", volume);
            this._update_queue.push(this.volumes);
            return this._update_queue.push(this.journals);
          }
          break;
        case "volume.created":
          this._update_queue.push(this.volumes);
          this._update_queue.push(this.raids);
          this._update_queue.push(this.journals);
          volume = {
            event: e.event
          };
          return $(this).triggerHandler("volume", volume);
        case "volume.removed":
          this._update_queue.push(this.volumes);
          this._update_queue.push(this.raids);
          return this._update_queue.push(this.journals);
        case "volume.sync":
          volume = this.volumes.get(e.lun);
          if (volume !== void 0) {
            volume.sync_progress = e.sync_progress;
            volume.syncing = e.syncing;
            volume.event = e.event;
            return $(this).triggerHandler("volume", volume);
          }
          break;
        case "volume.syncing":
          volume = this.volumes.get(e.lun);
          if (volume !== void 0) {
            volume.sync_progress = e.sync_progress;
            volume.syncing = e.syncing;
            volume.event = e.event;
            return $(this).triggerHandler("volume", volume);
          }
          break;
        case "volume.sync_done":
          volume = this.volumes.get(e.lun);
          if (volume !== void 0) {
            volume.sync_progress = e.sync_progress;
            volume.syncing = e.syncing;
            volume.event = e.event;
            return $(this).triggerHandler("volume", volume);
          }
          break;
        case "initiator.created":
        case "initiator.removed":
          this._update_queue.push(this.initrs);
          return this._update_queue.push(this.journals);
        case "initiator.session_change":
          initr = this.initrs.get(e.initiator);
          initr.active_session = e.session;
          return $(this).triggerHandler("initr", initr);
        case "vi.mapped":
        case "vi.unmapped":
          this._update_queue.push(this.initrs);
          this._update_queue.push(this.volumes);
          return this._update_queue.push(this.journals);
        case "monfs.created":
        case "monfs.removed":
          this._update_queue.push(this.monfs);
          this._update_queue.push(this.volumes);
          return this._update_queue.push(this.journals);
        case "fs.created":
        case "fs.removed":
          this._update_queue.push(this.filesystem);
          this._update_queue.push(this.volumes);
          return this._update_queue.push(this.journals);
        case "notification":
          return $(this).triggerHandler("notification", e);
        case "user.login":
          return $(this).triggerHandler("user_login", e.login_id);
      }
    };

    StorageData.prototype.update = function(res, errc) {
      var chain;
      chain = new Chain(errc);
      chain.chain($.map(this._deps[res], (function(_this) {
        return function(name) {
          return function() {
            return _this[name].update();
          };
        };
      })(this)));
      return chain;
    };

    StorageData.prototype._update_loop = function() {
      return this._looper_id = setInterval(((function(_this) {
        return function() {
          var _base;
          _this._update_queue = unique(_this._update_queue);
          if (_this._update_queue[0] != null) {
            if (typeof (_base = _this._update_queue[0]).update === "function") {
              _base.update();
            }
          }
          _this._update_queue = _this._update_queue.slice(1);
        };
      })(this)), 1000);
    };

    StorageData.prototype.close_socket = function() {
      this.socket_event.disconnect();
      this.socket_statist.disconnect();
      if (this._looper_id != null) {
        clearInterval(this._looper_id);
      }
    };

    StorageData.prototype.disconnect_listener = function() {
      return $(this).triggerHandler("disconnect", this.host);
    };

    return StorageData;

  })();

  CentralStorageData = (function() {
    function CentralStorageData(host, user) {
      var port1;
      this.host = host;
      this.user = user;
      this.disconnect_listener = __bind(this.disconnect_listener, this);
      this.close_socket = __bind(this.close_socket, this);
      this._update_loop = __bind(this._update_loop, this);
      this.update = __bind(this.update, this);
      this._tooltips = __bind(this._tooltips, this);
      this.feed_event = __bind(this.feed_event, this);
      this.ws_feed_event = __bind(this.ws_feed_event, this);
      this.store_servers = __bind(this.store_servers, this);
      this.server_stores = __bind(this.server_stores, this);
      this._data = __bind(this._data, this);
      this._update_queue = [];
      this._deps = {

        /*
        centers: ["centers", "journals"]
        clouds: ["clouds", "journals"]
        machinedetails:['machinedetails','journals']
        warnings: ["warnings", "journals"]
        emails: ["emails", "journals"]
        stores: ["stores", "journals"]
        disks: ["disks", "raids", "journals"]
        raids: ["disks", "raids", "journals"]
        volumes: ["raids", "volumes", "initrs", "journals"]
        initrs: ["volumes", "initrs", "journals"]
        networks: ["networks", "gateway", "journals"]
        monfs: ["monfs", "volumes", "journals"]
        filesystem: ["filesystem", "volumes", "journals"]
         *all: ["centers", "networks", "journals", "gateway", "filesystem", "systeminfo"]
         *all: ["centers","clouds","stores","warnings","emails","machinedetails","journals"]
         */
        register: ["register"],
        pay: ["pay"],
        manager: ["manager"],
        all: ["register", "pay", "manager"]
      };
      this.register = new ResSource(new RegisterRest(this.host, this.user));
      this.pay = new ResSource(new PayRest(this.host, this.user));
      this.manager = new ResSource(new ManagerRest(this.host, this.user));

      /*@centers = new ResSource(new CenterRest(@host))
      @clouds = new ResSource(new CloudRest(@host))
      @stores = new ResSource(new StoreRest(@host))
      @journals = new ResSource(new JournalRest(@host))
      @warnings = new ResSource(new WarningRest(@host))
      @emails = new ResSource(new EmailRest(@host))
      @machinedetails = new ResSource(new MachineDetailRest(@host))
       */
      this.stats = {
        items: []
      };
      port1 = this.host.split(':')[0] + ':5000';

      /*@socket_statist = io.connect "#{port1}/statistics", {
          "reconnect": false,
          "force new connection": true
      }
      
      @socket_statist.on "statistics", (data) =>
          return
          console.log data
          if @stats.items.length > 120
              @stats.items.shift()
          try
              datas = @_data(data)
              @stats.items.push(datas)
              $(@stats).triggerHandler "updated", @stats
          catch e
              return
      port2 = @host.split(':')[0] + ':8012'
      @socket_event = io.connect "#{port2}/event", {
          "reconnect": false,
          "force new connection": true
      }
      @socket_event.on "event", @feed_event
      @socket_event.on "disconnect", @disconnect_listener
       */
      this.ws_port = this.host.split(':')[0] + ':8080';
      this.ws = new WebSocket('ws://' + this.ws_port + '/ws/join?uname=' + this.user);
      this.ws.onmessage = this.ws_feed_event;
      this._update_loop();
    }

    CentralStorageData.prototype._data = function(data) {
      var e, i, socket_data, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      try {
        socket_data = {};
        _ref = ['server_cpu', 'server_mem', 'server_cache', 'store_cpu', 'store_mem', 'store_cache', 'server_receive', 'server_sent', "store_net_write", "store_net_read", "store_vol_write", "store_vol_read", "break_number", "raid_number", "volume_number", "disk_number", "store_system", "store_cap", "server_system", "server_cap", "temp", "server_net_write", "server_net_read", "server_vol_write", "server_vol_read", "storages", "exports", "store_cap_total", 'store_cap_remain'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          socket_data[i] = 0;
        }
        if (data.exports.length) {
          _ref1 = data.exports;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            i = _ref1[_j];
            socket_data['server_cpu'] = socket_data['server_cpu'] + i.info[i.info.length - 1].cpu;
            socket_data['server_mem'] = socket_data['server_mem'] + i.info[i.info.length - 1].mem;
            socket_data['server_net_write'] = socket_data['server_net_write'] + i.info[i.info.length - 1].write_mb;
            socket_data['server_net_read'] = socket_data['server_net_read'] + i.info[i.info.length - 1].read_mb;
            socket_data['server_system'] = socket_data['server_system'] + i.info[i.info.length - 1].df[0].used_per;
          }
          socket_data['server_cpu'] = (socket_data['server_cpu'] / data.exports.length) + (Math.random()) * 2;
          socket_data['server_mem'] = (socket_data['server_mem'] / data.exports.length) + (Math.random()) * 2;
          socket_data['server_vol_write'] = 0;
          socket_data['server_vol_read'] = 0;
          socket_data['server_cache'] = 0;
          socket_data['server_cap'] = 0;
          socket_data["exports"] = data.exports;
        }
        if (data.storages.length) {
          _ref2 = data.storages;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            i = _ref2[_k];
            socket_data['store_cpu'] = socket_data['store_cpu'] + i.info[i.info.length - 1].cpu;
            socket_data['store_mem'] = socket_data['store_mem'] + i.info[i.info.length - 1].mem;
            socket_data['temp'] = socket_data['temp'] + i.info[i.info.length - 1].temp;
            socket_data['store_net_write'] = socket_data['store_net_write'] + i.info[i.info.length - 1].write_mb;
            socket_data['store_net_read'] = socket_data['store_net_read'] + i.info[i.info.length - 1].read_mb;
            socket_data['store_vol_write'] = socket_data['store_vol_write'] + i.info[i.info.length - 1].write_vol;
            socket_data['store_vol_read'] = socket_data['store_vol_read'] + i.info[i.info.length - 1].read_vol;
            if (i.info[i.info.length - 1].cache_total !== 0) {
              socket_data['store_cache'] = socket_data['store_cache'] + i.info[i.info.length - 1].cache_used / i.info[i.info.length - 1].cache_total;
            }
            if (i.info[i.info.length - 1].df.length === 2) {
              socket_data['store_system'] = socket_data['store_system'] + i.info[i.info.length - 1].df[0].used_per;
              socket_data['store_cap'] = socket_data['store_cap'] + i.info[i.info.length - 1].df[1].used_per;
              socket_data['store_cap_total'] = socket_data['store_cap_total'] + i.info[i.info.length - 1].df[1].total;
              socket_data['store_cap_remain'] = socket_data['store_cap_remain'] + i.info[i.info.length - 1].df[1].available;
            } else {
              socket_data['store_system'] = socket_data['store_system'] + i.info[i.info.length - 1].df[0].used_per;
            }
          }
          socket_data['store_cpu'] = (socket_data['store_cpu'] / data.storages.length) + (Math.random()) * 2;
          socket_data['store_mem'] = (socket_data['store_mem'] / data.storages.length) + (Math.random()) * 2;
          socket_data['store_cache'] = socket_data['store_cache'] / data.storages.length;
          socket_data['store_system'] = socket_data['store_system'] / data.storages.length;
          socket_data['store_cap'] = socket_data['store_cap'] / data.storages.length;
          socket_data['temp'] = (socket_data['temp'] / data.storages.length) + (Math.random()) * 5;
          socket_data['storages'] = data.storages;
        }
        return socket_data;
      } catch (_error) {
        e = _error;
        socket_data;
        return console.log(e);
      }
    };

    CentralStorageData.prototype.server_stores = function(server) {
      var i, store, _i, _len, _ref;
      store = [];
      _ref = this.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i["export"] === server.ip && i.cid !== 0) {
          store.push({
            "node": i.cid,
            "ip": i.ip,
            "location": i.sid
          });
        }
      }
      return store;
    };

    CentralStorageData.prototype.store_servers = function(store) {
      return [
        {
          "ip": store["export"]
        }
      ];
    };

    CentralStorageData.prototype.ws_feed_event = function(e) {
      var data;
      data = JSON.parse(event.data);
      console.log(data);
      switch (data.name) {
        case "compareResult":
          return $(this).triggerHandler("compareresult", data);
        case "user.login":
          return $(this).triggerHandler("user_login", data);
      }
    };

    CentralStorageData.prototype.feed_event = function(e) {
      var events;
      return;
      console.log(e);
      return events = ["disk.plugged", "disk.unplugged", "raid.created", "volume.created", "volume.removed", "raid.removed", "raid.failed", "volume.failed", "raid.degraded"];

      /*switch e.event
          when "ping.offline"
              @_tooltips(e.ip,"掉线了")
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
          when "ping.online"
              @_tooltips(e.ip,"上线了")
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
          when "disk.unplugged"
              @_tooltips(e.ip,"掉盘了")
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
      
          when "raid.degraded", "raid.failed"
              @_tooltips(e.ip,"有阵列损坏")
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
          when "volume.failed"
              @_tooltips("e.ip","有虚拟磁盘损坏")
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
          when "databox.created"
              @_tooltips("","进入保险箱模式")
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
           
          
          when "raid.created","volume.created", "volume.removed","raid.removed"
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @machinedetails
          when "disk.ioerror", "disk.formated", "disk.plugged"
              @_update_queue.push @centers
              @_update_queue.push @journals
              @_update_queue.push @stores
              @_update_queue.push @stats
              @_update_queue.push @disks
              @_update_queue.push @machinedetails
          when "disk.role_changed"
              @_update_queue.push @disks
              @_update_queue.push @raids
              @_update_queue.push @journals
              @_update_queue.push @machinedetails
          when "raid.normal"
              @_update_queue.push @raids
              @_update_queue.push @journals
              @_update_queue.push @machinedetails
      
          when "raid.rebuild"
              raid = @raids.get e.raid
              if raid != undefined
                  raid.rebuilding = e.rebuilding
                  raid.health = e.health
                  raid.rebuild_progress = e.rebuild_progress
                  $(this).triggerHandler "raid", raid 
          when "raid.rebuild_done"
              raid = @raids.get e.raid
              if raid != undefined
                  raid.rebuilding = e.rebuilding
                  raid.health = e.health
                  raid.rebuild_progress = e.rebuild_progress
                  $(this).triggerHandler "raid", raid
                  @_update_queue.push @disks
          when "raid.created", "raid.removed"           
              @_update_queue.push @disks
              @_update_queue.push @raids
              @_update_queue.push @journals
          when "raid.rqr"
              raid = @raids.get e.raid
              raid.rqr_count = e.rqr_count
              $(this).triggerHandler "raid", raid
          when "notification"
              $(this).triggerHandler "notification", e
          when "user.login"
              $(this).triggerHandler "user_login", e.login_id
       */
    };

    CentralStorageData.prototype._tooltips = function(ip, type) {
      return $(function(){
            $.extend($.gritter.options, {
                class_name: 'gritter', 
                position: 'bottom-right', 
                fade_in_speed: 100, 
                fade_out_speed: 100, 
                time: 30000 
            });
            $.gritter.add({
                title: '<i class="icon-bell">告警信息</i>',
                text: '<a href="#" style="color:#ccc;font-size:14px;">' + ip + type + '</a><br>已发送邮件告警.'
            });
            return false;
        });
    };

    CentralStorageData.prototype.update = function(res, errc) {
      var chain;
      chain = new Chain(errc);
      chain.chain($.map(this._deps[res], (function(_this) {
        return function(name) {
          return function() {
            return _this[name].update();
          };
        };
      })(this)));
      return chain;
    };

    CentralStorageData.prototype._update_loop = function() {
      return this._looper_id = setInterval(((function(_this) {
        return function() {
          var _base;
          _this._update_queue = unique(_this._update_queue);
          if (_this._update_queue[0] != null) {
            if (typeof (_base = _this._update_queue[0]).update === "function") {
              _base.update();
            }
          }
          _this._update_queue = _this._update_queue.slice(1);
        };
      })(this)), 1000);
    };

    CentralStorageData.prototype.close_socket = function() {
      var e;
      try {
        this.ws.close();
        if (this._looper_id != null) {
          clearInterval(this._looper_id);
        }
        $(".page-content").css("background-color", "#364150");
        $('.menu-toggler').attr('style', 'display:none');
        $('.navbar-fixed-top').attr('style', 'display:none');
        if ($('body').hasClass("page-sidebar-closed")) {
          $('body').removeClass("page-sidebar-closed");
        }
      } catch (_error) {
        e = _error;
      }
    };

    CentralStorageData.prototype.disconnect_listener = function() {
      return $(this).triggerHandler("disconnect", this.host);
    };

    return CentralStorageData;

  })();

  this.Chain = Chain;

  this.StorageData = StorageData;

  this.CentralStorageData = CentralStorageData;

}).call(this);

(function() {
  var BCST, CameraManager, HotKeyManager, IScSiManager, NotificationManager, SettingsManager, StorageHelper, WindowManager,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BCST = (function() {
    function BCST() {
      this.isContained = __bind(this.isContained, this);
      this.getMachines = __bind(this.getMachines, this);
      this.getDetachMachines = __bind(this.getDetachMachines, this);
      this.broadcast = __bind(this.broadcast, this);
      this.dfd = $.Deferred();
      this.client = (require('broadcast').BCST_FACTORY)();
    }

    BCST.prototype.broadcast = function() {
      return this.client.broadcast(2000, this.dfd);
    };

    BCST.prototype.getDetachMachines = function() {
      return this.client.getDetachMachines();
    };

    BCST.prototype.getMachines = function() {
      return this.client.getMachines();
    };

    BCST.prototype.isContained = function(ip) {
      return this.client.isContained(ip);
    };

    return BCST;

  })();

  SettingsManager = (function() {
    function SettingsManager() {
      this.getLoginedMachine = __bind(this.getLoginedMachine, this);
      this.removeLoginedMachine = __bind(this.removeLoginedMachine, this);
      this.addLoginedMachine = __bind(this.addLoginedMachine, this);
      this.isLoginedMachine = __bind(this.isLoginedMachine, this);
      this.removeSearchedMachine = __bind(this.removeSearchedMachine, this);
      this.addSearchedMachine = __bind(this.addSearchedMachine, this);
      this.getSearchedMachines = __bind(this.getSearchedMachines, this);
      this.removeUsedMachine = __bind(this.removeUsedMachine, this);
      this.addUsedMachine = __bind(this.addUsedMachine, this);
      this.getUsedMachines = __bind(this.getUsedMachines, this);
      this.storage = new StorageHelper;
    }

    SettingsManager.prototype.getUsedMachines = function() {
      return this.storage.getItem("usedMachines");
    };

    SettingsManager.prototype.addUsedMachine = function(ip) {
      var temp;
      temp = this.storage.getItem("usedMachines");
      if (!temp) {
        temp = [];
      }
      if (temp.indexOf(ip) === -1) {
        temp.push(ip);
      }
      this.storage.setItem("usedMachines", temp);
    };

    SettingsManager.prototype.removeUsedMachine = function(ip) {
      var index, temp;
      temp = this.storage.getItem("usedMachines");
      if (!temp || temp.length === 0) {
        return;
      }
      index = temp.indexOf(ip);
      temp.splice(index, 1);
      this.storage.setItem("usedMachines", temp);
    };

    SettingsManager.prototype.getSearchedMachines = function() {
      return this.storage.getItem("searchedMachines");
    };

    SettingsManager.prototype.addSearchedMachine = function(ip) {
      var temp;
      temp = this.storage.getItem("searchedMachines");
      if (!temp) {
        temp = [];
      }
      if (temp.indexOf(ip) === -1) {
        temp.push(ip);
      }
      this.storage.setItem("searchedMachines", temp);
    };

    SettingsManager.prototype.removeSearchedMachine = function(ip) {
      var index, temp;
      temp = this.storage.getItem("searchedMachines");
      if (!temp || temp.length === 0) {
        return;
      }
      index = temp.indexOf(ip);
      temp.splice(index, 1);
      this.storage.setItem("searchedMachines", temp);
    };

    SettingsManager.prototype.isLoginedMachine = function(ip) {
      var machines;
      machines = this.storage.getTempItem("LoginedMachines");
      if (machines) {
        return __indexOf.call(machines, ip) >= 0;
      } else {
        return false;
      }
    };

    SettingsManager.prototype.addLoginedMachine = function(ip) {
      var temp;
      temp = this.storage.getTempItem("LoginedMachines");
      if (!temp) {
        temp = [];
      }
      if (temp.indexOf(ip) === -1) {
        temp.push(ip);
      }
      this.storage.setTempItem("LoginedMachines", temp);
    };

    SettingsManager.prototype.removeLoginedMachine = function(ip) {
      var index, temp;
      temp = this.storage.getTempItem("LoginedMachines");
      if (!temp || temp.length === 0) {
        return;
      }
      index = temp.indexOf(ip);
      temp.splice(index, 1);
      this.storage.setTempItem("LoginedMachines", temp);
    };

    SettingsManager.prototype.getLoginedMachine = function() {
      var temp;
      temp = this.storage.getTempItem("LoginedMachines");
      if (!temp) {
        temp = [];
      }
      return temp;
    };

    SettingsManager.prototype.localIP = function() {
      var iface, system, _i, _len, _ref, _results;
      system = new (require("system").SystemInfo)();
      _ref = system.getNetList();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        iface = _ref[_i];
        _results.push(iface.address);
      }
      return _results;
    };

    return SettingsManager;

  })();

  StorageHelper = (function() {
    function StorageHelper() {
      this.clearStorage = __bind(this.clearStorage, this);
      this.removeTempItem = __bind(this.removeTempItem, this);
      this.removeItem = __bind(this.removeItem, this);
      this.setItem = __bind(this.setItem, this);
      this.setTempItem = __bind(this.setTempItem, this);
      this.getTempItem = __bind(this.getTempItem, this);
      this.getItem = __bind(this.getItem, this);
      this._db = window.localStorage;
      this._temp_db = window.sessionStorage;
    }

    StorageHelper.prototype.getItem = function(key) {
      var temp;
      temp = this._db[key];
      if (temp) {
        temp = JSON.parse(this._db[key]);
        return temp[key];
      }
      return temp;
    };

    StorageHelper.prototype.getTempItem = function(key) {
      var temp;
      temp = this._temp_db[key];
      if (temp) {
        temp = JSON.parse(this._temp_db[key]);
        return temp[key];
      }
      return temp;
    };

    StorageHelper.prototype.setTempItem = function(key, value) {
      var temp;
      if (value) {
        temp = {};
        temp[key] = value;
        this._temp_db[key] = JSON.stringify(temp);
      }
    };

    StorageHelper.prototype.setItem = function(key, value) {
      var temp;
      if (value) {
        temp = {};
        temp[key] = value;
        this._db[key] = JSON.stringify(temp);
      }
    };

    StorageHelper.prototype.removeItem = function(key) {
      this._db.removeItem(key);
    };

    StorageHelper.prototype.removeTempItem = function(key) {
      this._temp_db.removeItem(key);
    };

    StorageHelper.prototype.clearStorage = function() {
      this._db.clear();
      this._temp_db.clear();
    };

    return StorageHelper;

  })();

  IScSiManager = (function() {
    function IScSiManager() {
      this.disconnect = __bind(this.disconnect, this);
      this.mark = __bind(this.mark, this);
      this.linkinit = __bind(this.linkinit, this);
      this.connect = __bind(this.connect, this);
      this.iScSiAvalable = __bind(this.iScSiAvalable, this);
      var SystemInfo;
      SystemInfo = require("system").SystemInfo;
      this._system = new SystemInfo;
      this._iscsi = require("iscsi");
    }

    IScSiManager.prototype.iScSiAvalable = function() {
      var error, version;
      if (this._system.getLocalSystem() !== "win32") {
        return false;
      } else {
        try {
          version = navigator.userAgent.split("\ ")[3];
          version = parseFloat(version);
          if (version >= 6.0) {
            return true;
          } else {
            return false;
          }
        } catch (_error) {
          error = _error;
          console.log(error);
          return false;
        }
      }
    };

    IScSiManager.prototype.connect = function(initr, ip) {
      var err;
      if (this.iScSiAvalable()) {
        try {
          this._iscsi.init(initr, ip);
          return true;
        } catch (_error) {
          err = _error;
          console.log(err);
          return false;
        }
      }
    };

    IScSiManager.prototype.linkinit = function(initr, ip) {
      return this._iscsi.linkinit(initr, ip);
    };

    IScSiManager.prototype.mark = function() {
      var e;
      try {
        console.log(999);
        return this._iscsi.mark;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    IScSiManager.prototype.disconnect = function(initr, ip) {
      var err;
      if (this.iScSiAvalable()) {
        try {
          this._iscsi.disinit(initr, ip);
          return true;
        } catch (_error) {
          err = _error;
          console.log(err);
          return false;
        }
      }
    };

    return IScSiManager;

  })();

  HotKeyManager = (function() {
    function HotKeyManager() {}

    HotKeyManager.hotkey = function() {
      return document.addEventListener("keyup", this._keyup, false);
    };

    HotKeyManager._keyup = function(event) {
      if (event.keyCode === 112) {
        (new WindowManager).openDevTools();
        return HotKeyManager._stop_bubble(event);
      }
    };

    HotKeyManager._stop_bubble = function(event) {
      return event.stopPropagation();
    };

    return HotKeyManager;

  })();

  WindowManager = (function() {
    function WindowManager() {
      this.openDevTools = __bind(this.openDevTools, this);
      this.closeWindow = __bind(this.closeWindow, this);
      this.unmaximizeWindow = __bind(this.unmaximizeWindow, this);
      this.maximizeWindow = __bind(this.maximizeWindow, this);
      this.minimizeWindow = __bind(this.minimizeWindow, this);
      this._gui = require('nw.gui');
      this._cur_window = this._gui.Window.get();
    }

    WindowManager.prototype.minimizeWindow = function() {
      return this._cur_window.minimize();
    };

    WindowManager.prototype.maximizeWindow = function() {
      return this._cur_window.maximize();
    };

    WindowManager.prototype.unmaximizeWindow = function() {
      return this._cur_window.unmaximize();
    };

    WindowManager.prototype.closeWindow = function() {
      return this._cur_window.close();
    };

    WindowManager.prototype.openDevTools = function() {
      return this._cur_window.showDevTools();
    };

    return WindowManager;

  })();

  NotificationManager = (function() {
    function NotificationManager(sd) {
      this.sd = sd;
      this._new_progress = __bind(this._new_progress, this);
      this._progress = __bind(this._progress, this);
      this.task_id = -1;
    }

    NotificationManager.prototype.notice = function() {
      return $(this.sd).on("notification", (function(_this) {
        return function(e, event) {
          if (event.tpye === "message") {
            _this._message(event.message);
          }
          if (event.type === "progress") {
            return _this._progress(event);
          }
        };
      })(this));
    };

    NotificationManager.prototype._message = function(message) {
      return (new MessageModal(message)).attach();
    };

    NotificationManager.prototype._progress = function(event) {
      if (this.task_id !== event.id) {
        this.task_id = event.id;
        return this._new_progress(event.message);
      } else if (event.status === "inprogress") {
        return $(this.sd).triggerHandler("inprogress", {
          message: event.message,
          ratio: event.ratio
        });
      } else if (event.status === "completed") {
        return $(this.sd).triggerHandler("incompleted", {
          message: event.message
        });
      }
    };

    NotificationManager.prototype._new_progress = function(message) {
      var progress;
      progress = new NotificationProgress(this.sd, message);
      return progress.show();
    };

    return NotificationManager;

  })();

  CameraManager = (function() {
    function CameraManager() {
      this.connect_ipcam = __bind(this.connect_ipcam, this);
      this._cam = require("camera");
    }

    CameraManager.prototype.connect_ipcam = function(url) {
      var err;
      try {
        return this._cam.connectcam(url);
      } catch (_error) {
        err = _error;
        return console.log(err);
      }
    };

    return CameraManager;

  })();

  this.CameraManager = CameraManager;

  this.BCST = BCST;

  this.HotKeyManager = HotKeyManager;

  this.IScSiManager = IScSiManager;

  this.NotificationManager = NotificationManager;

  this.SettingsManager = SettingsManager;

  this.StorageHelper = StorageHelper;

  this.WindowManager = WindowManager;

}).call(this);

(function() {
  var AdminView, AvalonTemplUI, CentralDeviceView, CentralView, ChainProgress, DeviceView, HeaderUI, NotificationProgress, avalon_templ, dtable_opt, scan_avalon_templ, show_chain_progress, table_update_listener, valid_opt, _show_chain_progress,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  dtable_opt = function(opt) {
    var global;
    global = {
      aLengthMenu: [[10, 20, 30, -1], [10, 20, 30, "All"]],
      iDisplayLength: 20,
      sDom: '<"row-fluid"<"span6"l><"span6"f>r>t<"row-fluid"<"span6"i><"span6"p>>',
      sPaginationType: "bootstrap",
      oLanguage: {
        sLengthMenu: "_MENU_ 每页",
        oPaginate: {
          sPrevious: "",
          sNext: ""
        },
        sEmptyTable: "没有数据",
        sSearch: "搜索:   ",
        sInfo: "总共有 _TOTAL_ 条数据",
        sInfoEmpty: "",
        sProcessing: "正在加载中……",
        sInfoFiltered: "",
        sZeroRecords: "没有数据"
      },
      aoColumnDefs: [
        {
          bSortable: false,
          aTargets: [0]
        }
      ]
    };
    return $.extend({}, global, opt);
  };

  table_update_listener = function(res, table, call) {
    return $(res).on("updated", function(e, source) {
      $("" + table).DataTable().clear().draw();
      $("" + table).DataTable().destroy();
      call(e, source);
      $("" + table).dataTable(dtable_opt());
    });
  };

  valid_opt = function(opt) {
    var global;
    global = {
      focusInvalid: false,
      ignore: '',
      highlight: function(elem) {
        return $(elem).closest('.control-group').addClass('error');
      },
      success: function(label) {
        label.closest('.control-group').removeClass('error');
        return label.remove();
      },
      errorPlacement: function(error, elem) {
        return error.addClass('help-inline help-small no-left-padding').appendTo(elem.closest('.controls'));
      }
    };
    return $.extend({}, global, opt);
  };

  avalon_templ = function(id, src, attr) {
    var k, v;
    if (attr == null) {
      attr = {};
    }
    attr = ((function() {
      var _results;
      _results = [];
      for (k in attr) {
        v = attr[k];
        _results.push("" + k + "='" + v + "'");
      }
      return _results;
    })()).join(" ");
    return "<div id=\"" + id + "\" ms-controller=\"" + id + "\" ms-include-src=\"'" + src + "'\" " + attr + "></div>";
  };

  scan_avalon_templ = function(vm, id, src, attr) {
    var elem, html;
    if (attr == null) {
      attr = {};
    }
    html = avalon_templ(id, src, attr);
    elem = $(html)[0];
    avalon.scan(elem, vm);
    return elem;
  };

  ChainProgress = (function() {
    function ChainProgress(chain, unblock) {
      this.chain = chain;
      this.unblock = unblock != null ? unblock : true;
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.id = random_id("progress-");
      this.vm = avalon.define(this.id, function(vm) {
        return vm.ratio = 0;
      });
    }

    ChainProgress.prototype.show = function() {
      if (this.unblock) {
        $(this.chain).one('completed', (function(_this) {
          return function() {
            _this.vm.ratio = 100;
            return setTimeout((function() {
              return _this.hide();
            }), 500);
          };
        })(this));
        $(this.chain).one('error', (function(_this) {
          return function() {
            return _this.hide();
          };
        })(this));
      }
      $(this.chain).on('progress', (function(_this) {
        return function(e, a) {
          return _this.vm.ratio = a.ratio * 100;
        };
      })(this));
      return $.blockUI({
        message: scan_avalon_templ(this.vm, this.id, "html/chain_progress.html"),
        css: {
          padding: '19px',
          border: '0px solid #eee',
          backgroundColor: 'none'
        }
      });
    };

    ChainProgress.prototype.hide = function() {
      $.unblockUI();
      $("#" + this.id).remove();
      return delete avalon.vmodels[this.id];
    };

    return ChainProgress;

  })();

  _show_chain_progress = function(cprog, chain, ignore_status_0) {
    if (ignore_status_0 == null) {
      ignore_status_0 = false;
    }
    cprog.show();
    return chain.execute().done(function() {
      return setTimeout((function() {
        return $.unblockUI();
      }), 1000);
    }).fail(function(status, reason) {
      return setTimeout((function() {
        switch (status) {
          case 400:
            (new MessageModal(reason.description)).attach();
            break;
          default:
            if (status === 0 && ignore_status_0) {
              break;
            }
            (new MessageModal(reason)).attach();
        }
        return $.unblockUI();
      }), 1000);
    });
  };

  show_chain_progress = function(chain, ignore_status_0, unblock) {
    var cprog;
    if (ignore_status_0 == null) {
      ignore_status_0 = false;
    }
    if (unblock == null) {
      unblock = true;
    }
    cprog = new ChainProgress(chain, unblock);
    return _show_chain_progress(cprog, chain, ignore_status_0);
  };

  NotificationProgress = (function() {
    function NotificationProgress(sd, title, unblock) {
      this.sd = sd;
      this.title = title != null ? title : "";
      this.unblock = unblock != null ? unblock : true;
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.id = random_id("inprogress-");
      this.vm = avalon.define(this.id, (function(_this) {
        return function(vm) {
          vm.ratio = 0;
          return vm.message = _this.title;
        };
      })(this));
    }

    NotificationProgress.prototype.show = function() {
      if (this.unblock) {
        $(this.sd).one('incompleted', (function(_this) {
          return function(e, event) {
            _this.vm.message = event.message;
            _this.vm.ratio = 100;
            return setTimeout((function() {
              return _this.hide();
            }), 500);
          };
        })(this));
      }
      $(this.sd).on('inprogress', (function(_this) {
        return function(e, event) {
          _this.vm.message = event.message;
          return _this.vm.ratio = event.ratio * 100;
        };
      })(this));
      return $.blockUI({
        message: scan_avalon_templ(this.vm, this.id, "html/notification_progress.html"),
        css: {
          padding: '19px',
          border: '1px solid #eee',
          backgroundColor: '#fafafa'
        }
      });
    };

    NotificationProgress.prototype.hide = function() {
      $.unblockUI();
      $("#" + this.id).remove();
      return delete avalon.vmodels[this.id];
    };

    return NotificationProgress;

  })();

  AvalonTemplUI = (function() {
    function AvalonTemplUI(prefix, src, parent_selector, replace, attr) {
      this.prefix = prefix;
      this.src = src;
      this.parent_selector = parent_selector;
      this.replace = replace != null ? replace : true;
      this.attr = attr != null ? attr : {};
      this.remove = __bind(this.remove, this);
      this.detach = __bind(this.detach, this);
      this.attach = __bind(this.attach, this);
      this.frozen = __bind(this.frozen, this);
      this.refresh = __bind(this.refresh, this);
      this.rendered = __bind(this.rendered, this);
      this.add_child = __bind(this.add_child, this);
      this.define_vm = __bind(this.define_vm, this);
      this.has_rendered = false;
      this.has_frozen = false;
      this.id = this.ctrl = random_id(this.prefix);
      $.extend(this.attr, {
        "data-include-rendered": "rendered"
      });
      this.vm = avalon.define(this.ctrl, (function(_this) {
        return function(vm) {
          vm.rendered = _this.rendered;
          return _this.define_vm(vm);
        };
      })(this));
      this.children = [];
    }

    AvalonTemplUI.prototype.define_vm = function(vm) {};

    AvalonTemplUI.prototype.add_child = function(child) {
      return this.children.push(child);
    };

    AvalonTemplUI.prototype.rendered = function() {
      return this.has_rendered = true;
    };

    AvalonTemplUI.prototype.refresh = function() {
      return this.attach();
    };

    AvalonTemplUI.prototype.frozen = function() {
      return this.has_frozen = true;
    };

    AvalonTemplUI.prototype.attach = function() {
      var elem, parent;
      this.has_frozen = false;
      if (this.has_rendered) {
        this.remove();
      }
      if (!(this.id in avalon.vmodels)) {
        avalon.vmodels[this.id] = this.vm;
      }
      parent = $(this.parent_selector);
      elem = avalon_templ(this.ctrl, this.src, this.attr);
      if (this.replace) {
        parent.html(elem);
      } else {
        parent.append(elem);
      }
      return avalon.scan(parent[0], this.vm);
    };

    AvalonTemplUI.prototype.detach = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.detach();
      }
      this.has_rendered = false;
      avalon.vmodels[this.id] = null;
      delete avalon.vmodels[this.id];
      return this.remove();
    };

    AvalonTemplUI.prototype.remove = function() {
      var $self;
      $self = $("#" + this.id);
      return $self.remove();
    };

    return AvalonTemplUI;

  })();

  HeaderUI = (function(_super) {
    __extends(HeaderUI, _super);

    function HeaderUI(admin, server) {
      this.admin = admin;
      this.server = server;
      this.resize_window = __bind(this.resize_window, this);
      this.close_window = __bind(this.close_window, this);
      this.mini_window = __bind(this.mini_window, this);
      this.refresh_facepage = __bind(this.refresh_facepage, this);
      this.add_machine = __bind(this.add_machine, this);
      this._get_shown_machies = __bind(this._get_shown_machies, this);
      this.server_switch = __bind(this.server_switch, this);
      this.broadcast = __bind(this.broadcast, this);
      this.slient = __bind(this.slient, this);
      this.hide_log = __bind(this.hide_log, this);
      this.change_data = __bind(this.change_data, this);
      this.change_passwd = __bind(this.change_passwd, this);
      this.change_head = __bind(this.change_head, this);
      this.register = __bind(this.register, this);
      this.facequick = __bind(this.facequick, this);
      this.lock = __bind(this.lock, this);
      this.back_to_top = __bind(this.back_to_top, this);
      this.avatar = __bind(this.avatar, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      HeaderUI.__super__.constructor.call(this, "header-", "html/header.html", "#header", false);
      this.window_manager = new WindowManager;
      this.vm.show_server = this.server.type === "store" ? true : false;
      this.server.header = false;
    }

    HeaderUI.prototype.define_vm = function(vm) {
      vm.lang = lang.header;
      vm.slient = this.slient;
      vm.refresh = this.refresh;
      vm.broadcast = this.broadcast;
      vm.add_machine = this.add_machine;
      vm.server_switch = this.server_switch;
      vm.mini_window = this.mini_window;
      vm.close_window = this.close_window;
      vm.resize_window = this.resize_window;
      vm.fullscreen = false;
      vm.show_server = true;
      vm.rendered = this.rendered;
      vm.change_data = this.change_data;
      vm.lock = this.lock;
      vm.change_passwd = this.change_passwd;
      vm.change_head = this.change_head;
      vm.register = this.register;
      vm.facequick = this.facequick;
      return vm.username = "";
    };

    HeaderUI.prototype.rendered = function() {
      new WOW().init();
      $('.tip-twitter').remove();
      $('.hastip-header').poshytip({
        className: 'tip-twitter',
        showTimeout: 0,
        alignTo: 'target',
        alignX: 'center',
        alignY: 'bottom',
        offsetY: 5,
        allowTipHover: false,
        fade: false
      });
      this.back_to_top();
    };

    HeaderUI.prototype.avatar = function(host, user) {
      var random, urls;
      random = Math.random();
      urls = 'http://' + host + '/downloadAvatar/' + user + '/head/' + user + '_head.jpg';
      return $("#user_img_log").attr('src', urls + "?t=" + random);
    };

    HeaderUI.prototype.back_to_top = function() {
      return $(function() {
            if ($('#back-to-top').length) {
                var scrollTrigger = 100, // px
                    backToTop = function () {
                        var scrollTop = $(window).scrollTop();
                        if (scrollTop > scrollTrigger) {
                            $('#back-to-top').addClass('show');
                        } else {
                            $('#back-to-top').removeClass('show');
                        }
                    };
                backToTop();
                $(window).on('scroll', function () {
                    backToTop();
                });
                $('#back-to-top').on('click', function (e) {
                    e.preventDefault();
                    $('html,body').animate({
                        scrollTop: 0
                    }, 700);
                });
            }
        });
    };

    HeaderUI.prototype.lock = function() {};

    HeaderUI.prototype.facequick = function() {
      return (new FaceQuickProPage(sds[0], "")).attach();
    };

    HeaderUI.prototype.register = function() {
      this.refresh_facepage();
      return (new RegisterPage(sds[0], "")).attach();
    };

    HeaderUI.prototype.change_head = function() {
      return (new RegisterChangeHeadModal(sds[0], new RegisterPage(sds[0], ""))).attach();
    };

    HeaderUI.prototype.change_passwd = function() {
      return (new RegisterChangePasswdModal(sds[0], this)).attach();
    };

    HeaderUI.prototype.change_data = function() {
      var account;
      account = sds[0].register.items['account'];
      return (new RegisterDetailModal(sds[0], this, account)).attach();
    };

    HeaderUI.prototype.hide_log = function() {
      return $("#log_event").hide();
    };

    HeaderUI.prototype.refresh = function() {
      var chain, sd, _i, _len;
      chain = new Chain;
      for (_i = 0, _len = sds.length; _i < _len; _i++) {
        sd = sds[_i];
        chain.chain(sd.update("all"));
      }
      show_chain_progress(chain).done(function() {
        return console.log("Refresh Storage Data");
      });
    };

    HeaderUI.prototype.slient = function() {
      var beep, chain, host, sd, _i, _len;
      this.admin.remove_all();
      host = [];
      for (_i = 0, _len = sds.length; _i < _len; _i++) {
        sd = sds[_i];
        if (sd.host === "") {
          continue;
        } else {
          if (sd.systeminfo.data.version === "UNKOWN") {
            continue;
          } else {
            host.push(sd.host);
          }
        }
      }
      if (host.length === 0) {
        return (new MessageModal(lang.header.beep_need_login)).attach();
      } else {
        beep = new CommandRest(host[0]);
        chain = new Chain;
        return (beep.slient()).done((function(_this) {
          return function(data) {
            return (new MessageModal(lang.header.stop_beep_success)).attach();
          };
        })(this)).fail((function(_this) {
          return function(data) {
            return (new MessageModal(lang.header.stop_beep_error)).attach();
          };
        })(this));
      }
    };

    HeaderUI.prototype.broadcast = function() {
      var bcst, chain;
      chain = new Chain();
      bcst = new BCST;
      chain.chain(bcst.broadcast);
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          var device, machine, machines, _i, _len;
          machines = _this._filter_machine(bcst);
          _this._show_bcst_message(machines);

          /*regex = /^\d{1,3}(\.\d{1,3}){3}$/
          for nav in @admin.vm.navs
              continue if regex.test(nav.title)
              break if machines.length is 0
              device = @admin.deviceviews[nav.menuid]
              device.change_device machines[0]
              machines = machines[1..]
           */
          for (_i = 0, _len = machines.length; _i < _len; _i++) {
            machine = machines[_i];
            device = _this.admin.new_machine(true);
            device.change_device(machine);
          }
        };
      })(this));
    };

    HeaderUI.prototype.server_switch = function() {
      return (new ConfirmModal(lang.server.warning, (function(_this) {
        return function() {
          _this.frozen();
          if (_this.vm.show_server) {
            _this.admin.remove_all();
            _this.vm.show_server = false;
            return (new ServerUI(_this.server)).central();
          } else {
            _this.vm.show_server = true;
            return (new ServerUI(_this.server)).store();
          }
        };
      })(this))).attach();
    };

    HeaderUI.prototype._show_bcst_message = function(machines) {
      var logined, message, settings;
      settings = new SettingsManager;
      logined = settings.getLoginedMachine();
      if (logined.length === 0) {
        if (machines.length === 0) {
          message = lang.header.detect_no_machines_info;
        } else {
          message = lang.header.detect_machines_info(machines.length);
        }
      } else {
        if (machines.length === 0) {
          message = lang.header.detect_no_new_machine_info;
        } else {
          message = lang.header.detect_new_machines_info(machines.length);
        }
      }
      (new MessageModal(message)).attach();
    };

    HeaderUI.prototype._filter_machine = function(bcst) {
      var addr, isLoged, is_add, machine, machines, settings, shown_machines, temp, temp_machines, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref;
      settings = new SettingsManager;
      machines = bcst.getDetachMachines();
      shown_machines = this._get_shown_machies();
      temp_machines = [];
      isLoged = false;
      temp = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        machine = machines[_i];
        for (_j = 0, _len1 = machine.length; _j < _len1; _j++) {
          addr = machine[_j];
          if (__indexOf.call(shown_machines, addr) >= 0) {
            isLoged = true;
            break;
          }
        }
        if (!isLoged) {
          temp_machines.push(machine);
        }
        isLoged = false;
      }
      machines = [];
      for (_k = 0, _len2 = temp_machines.length; _k < _len2; _k++) {
        machine = temp_machines[_k];
        is_add = false;
        if (machines.length === 0) {
          machines.push(machine);
          continue;
        }
        for (_l = 0, _len3 = machines.length; _l < _len3; _l++) {
          temp = machines[_l];
          if (_ref = temp[0], __indexOf.call(machine, _ref) >= 0) {
            is_add = true;
            break;
          }
        }
        if (!is_add) {
          machines.push(machine);
        }
      }
      temp_machines = [];
      for (_m = 0, _len4 = machines.length; _m < _len4; _m++) {
        machine = machines[_m];
        for (_n = 0, _len5 = machine.length; _n < _len5; _n++) {
          addr = machine[_n];
          if (bcst.isContained(addr)) {
            temp_machines.push(addr);
            break;
          }
        }
      }
      return temp_machines;
    };

    HeaderUI.prototype._get_shown_machies = function() {
      var machines, nav, regex, _i, _len, _ref;
      machines = [];
      regex = /^\d{1,3}(\.\d{1,3}){3}$/;
      _ref = this.admin.vm.navs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nav = _ref[_i];
        if (regex.test(nav.title)) {
          machines.push(nav.title);
        }
      }
      return machines;
    };

    HeaderUI.prototype.add_machine = function() {
      return (new ConfirmModal("确定要登出此账号吗?", (function(_this) {
        return function() {
          _this.admin.remove_all();
          _this.admin.new_machine(true);
          return _this.refresh_facepage();
        };
      })(this))).attach();
    };

    HeaderUI.prototype.refresh_facepage = function() {
      var i, _i, _len;
      for (_i = 0, _len = compare_Interval.length; _i < _len; _i++) {
        i = compare_Interval[_i];
        window.clearInterval(i);
      }
      if (compare_card.length) {
        compare_card.splice(0, compare_card.length);
      }
      if (compare_result.length) {
        return compare_result.splice(0, compare_result.length);
      }
    };

    HeaderUI.prototype.mini_window = function() {
      return this.window_manager.minimizeWindow();
    };

    HeaderUI.prototype.close_window = function() {
      return this.window_manager.closeWindow();
    };

    HeaderUI.prototype.resize_window = function() {
      if (this.vm.fullscreen) {
        this.window_manager.unmaximizeWindow();
      } else {
        this.window_manager.maximizeWindow();
      }
      return this.vm.fullscreen = !this.vm.fullscreen;
    };

    return HeaderUI;

  })(AvalonTemplUI);

  DeviceView = (function(_super) {
    __extends(DeviceView, _super);

    function DeviceView(menuid) {
      this.menuid = menuid;
      this.detach_all_page = __bind(this.detach_all_page, this);
      this.attach_page = __bind(this.attach_page, this);
      this.switch_to_page = __bind(this.switch_to_page, this);
      this.change_device = __bind(this.change_device, this);
      this.attach = __bind(this.attach, this);
      this.switch_to_login_page = __bind(this.switch_to_login_page, this);
      this.login_event = __bind(this.login_event, this);
      this.disconnect = __bind(this.disconnect, this);
      this.destroy = __bind(this.destroy, this);
      this.init = __bind(this.init, this);
      this.define_vm = __bind(this.define_vm, this);
      DeviceView.__super__.constructor.call(this, "submenu-", "html/submenu.html", "." + this.menuid + " .sub-menu", false);
      this.loginpage = new LoginPage(this);
      this.login = false;
      this.cur_page = this.loginpage;
      this.host = "";
      this.reconnect = false;
    }

    DeviceView.prototype.define_vm = function(vm) {
      vm.navs = [
        {
          title: lang.sidebar.overview,
          icon: "icon-dashboard",
          id: "overview"
        }, {
          title: lang.sidebar.disk,
          icon: "icon-hdd",
          id: "disk"
        }, {
          title: lang.sidebar.raid,
          icon: "icon-tasks",
          id: "raid"
        }, {
          title: lang.sidebar.volume,
          icon: "icon-list-alt",
          id: "volume"
        }, {
          title: lang.sidebar.initr,
          icon: "icon-sitemap",
          id: "initr"
        }, {
          title: lang.sidebar.setting,
          icon: "icon-cogs",
          id: "setting"
        }, {
          title: lang.sidebar.maintain,
          icon: "icon-wrench",
          id: "maintain"
        }, {
          title: lang.sidebar.quickmode,
          icon: "icon-magic",
          id: "quickmode"
        }
      ];
      vm.active_index = 0;
      return vm.switch_to_page = (function(_this) {
        return function(e) {
          return _this.switch_to_page($(e.target).data("id"));
        };
      })(this);
    };

    DeviceView.prototype.init = function(host) {
      var port, _settings;
      _settings = new (require("settings").Settings);
      port = _settings.port;
      this.login = true;
      this.host = host;
      this.sd = new StorageData(("" + host + ":") + port);
      this.overviewpage = new OverviewPage(this.sd, this.switch_to_page);
      this.diskpage = new DiskPage(this.sd);
      this.raidpage = new RaidPage(this.sd);
      this.volumepage = new VolumePage(this.sd);
      this.initrpage = new InitrPage(this.sd);
      this.settingpage = new SettingPage(this, this.sd);
      this.maintainpage = new MaintainPage(this, this.sd);
      this.quickmodepage = new QuickModePage(this, this.sd);
      this.pages = [this.overviewpage, this.diskpage, this.raidpage, this.volumepage, this.initrpage, this.settingpage, this.maintainpage, this.quickmodepage];
      $(this.sd).one("disconnect", this.disconnect);
      $("." + this.menuid).addClass("open");
      $("." + this.menuid + " .sub-menu").show();
      $("." + this.menuid + " a>span:last-child").addClass("arrow open");
      sds.push(this.sd);
      this.notification_manager = new NotificationManager(this.sd);
      this.notification_manager.notice();
      $(this.sd).one("user_login", this.login_event);
      return this.sd.update("all");
    };

    DeviceView.prototype.destroy = function() {
      if (this.login) {
        (new SettingsManager).removeLoginedMachine(this.host);
        this.reconnect = true;
        this.sd.close_socket();
        return arr_remove(sds, this.sd);
      }
    };

    DeviceView.prototype.disconnect = function(element, host) {
      if (!this.reconnect && host === this.sd.host) {
        arr_remove(sds, this.sd);
        (new SettingsManager).removeLoginedMachine(this.host);
        this.switch_to_login_page();
        this.sd.close_socket();
        (new MessageModal(lang.disconnect_warning.disconnect_message)).attach();
      }
    };

    DeviceView.prototype.login_event = function(element, id) {
      if (this.token) {
        if (id !== this.token) {
          this.reconnect = true;
          arr_remove(sds, this.sd);
          (new SettingsManager).removeLoginedMachine(this.host);
          this.switch_to_login_page();
          this.sd.close_socket();
          (new MessageModal(lang.login_by_other_warning(this.host))).attach();
        }
      }
    };

    DeviceView.prototype.switch_to_login_page = function() {
      this.detach_all_page();
      this.login = false;
      this.loginpage.attach();
      this.vm.active_index = 0;
      $("." + this.menuid).removeClass("open");
      $("." + this.menuid + " .sub-menu").hide();
      $("." + this.menuid + " a>span:last-child").removeClass("arrow open");
      return this.detach();
    };

    DeviceView.prototype.attach = function() {
      if (!this.login) {
        return this.loginpage.attach();
      } else {
        DeviceView.__super__.attach.call(this);
        return this.attach_page();
      }
    };

    DeviceView.prototype.change_device = function(device) {
      return this.loginpage.change_device(device);
    };

    DeviceView.prototype.switch_to_page = function(pageid) {
      var idx, nav, _i, _len, _ref;
      this.vm.active_index = 0;
      _ref = this.vm.navs;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        nav = _ref[idx];
        if (nav.id === pageid) {
          this.vm.active_index = idx;
        }
      }
      return this.attach_page();
    };

    DeviceView.prototype.attach_page = function() {
      var _base;
      if (this.cur_page) {
        if (typeof (_base = this.cur_page).detach === "function") {
          _base.detach();
        }
      }
      this.cur_page = this.pages[this.vm.active_index];
      return this.cur_page.attach();
    };

    DeviceView.prototype.detach_all_page = function() {
      var page, _base, _i, _len, _ref;
      if (this.pages) {
        _ref = this.pages;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          if (typeof page.detach === "function") {
            page.detach();
          }
        }
      }
      if (typeof (_base = this.loginpage).detach === "function") {
        _base.detach();
      }
    };

    return DeviceView;

  })(AvalonTemplUI);

  AdminView = (function() {
    function AdminView(server) {
      var newid;
      this.server = server;
      this.find_nav_index = __bind(this.find_nav_index, this);
      this._new_machine = __bind(this._new_machine, this);
      this.new_machine = __bind(this.new_machine, this);
      this._del_dview = __bind(this._del_dview, this);
      this.attach_dview = __bind(this.attach_dview, this);
      this.switch_tab = __bind(this.switch_tab, this);
      this.remove_tab = __bind(this.remove_tab, this);
      this.remove_all = __bind(this.remove_all, this);
      this.tab_click = __bind(this.tab_click, this);
      this.get_history_machines = __bind(this.get_history_machines, this);
      this.deviceviews = {};
      this.cur_view = null;
      newid = random_id('menu-');
      this.vm = avalon.define("sidebar", (function(_this) {
        return function(vm) {
          vm.navs = [
            {
              title: lang.adminview.menu_new,
              icon: "icon-home",
              menuid: "" + newid
            }
          ];
          vm.active_index = 0;
          vm.tab_click = _this.tab_click;
          return vm.server = "store";
        };
      })(this));
      this.get_history_machines();
      if (this.server.header) {
        this.header = new HeaderUI(this, this.server);
        this.header.attach();
      } else {
        this.header = new HeaderUI(this, this.server);
        this.new_machine(true);
      }
    }

    AdminView.prototype.get_history_machines = function() {
      var index, machine, nav, newId, settings, _i, _len, _ref, _results;
      settings = new SettingsManager;
      if (settings.getSearchedMachines() && settings.getSearchedMachines().length !== 0) {
        _ref = settings.getSearchedMachines();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          machine = _ref[_i];
          console.log(machine);
          console.log(settings.getSearchedMachines());
          nav = {
            title: lang.adminview.menu_new,
            icon: "icon-home"
          };
          newId = random_id("menu-");
          nav.menuid = newId;
          nav.title = machine;
          this.vm.navs.push(nav);
          index = this.vm.navs.length - 1;
          this.attach_dview(this.vm.navs[index]);
          this.vm.active_index = index;
          _results.push(this.deviceviews[newId].change_device(machine));
        }
        return _results;
      } else {
        return this.attach_dview(this.vm.navs[0]);
      }
    };

    AdminView.prototype.tab_click = function(e) {
      var index;
      index = parseInt(e.currentTarget.dataset.idx);
      if (e.target.className !== "icon-remove-circle") {
        this.switch_tab(index);
        return console.log(index);
      } else {
        return this.remove_tab(index);
      }
    };

    AdminView.prototype.remove_all = function() {
      var i, _i, _ref;
      for (i = _i = _ref = this.vm.navs.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        this.remove_tab(i);
      }
      this.vm.navs.splice(0, 1);
      return this.deviceviews = {};
    };

    AdminView.prototype.remove_tab = function(index) {
      var del_nav, settings, target;
      settings = new SettingsManager;
      if (this.vm.navs.length === 1) {
        target = index;
        this.new_machine(true);
      } else if (index === this.vm.navs.length - 1) {
        target = index - 1;
      } else {
        target = index;
      }
      del_nav = this.vm.navs[index];
      console.log(del_nav);
      if (index !== -1) {
        this.vm.navs.splice(index, 1);
      }
      this.switch_tab(target);
      settings.removeSearchedMachine(this.vm.navs[index]);
      return this._del_dview(del_nav);
    };

    AdminView.prototype.switch_tab = function(index) {
      var nav, old_nav;
      old_nav = this.cur_view;
      this.vm.active_index = index != null ? index : 0;
      nav = this.vm.navs[this.vm.active_index];
      return this.attach_dview(nav);
    };

    AdminView.prototype.attach_dview = function(nav) {
      var dview, new_view, _base, _base1;
      if (!(nav.menuid in this.deviceviews)) {
        dview = new DeviceView(nav.menuid);
        this.deviceviews[nav.menuid] = dview;
        dview.loginpage.vm.$watch("device", function(nval, oval) {
          if (nval !== "") {
            return nav.title = nval;
          } else {
            return nav.title = lang.adminview.menu_new;
          }
        });
      }
      new_view = this.deviceviews[nav.menuid];
      if (new_view === this.cur_view) {
        return;
      }
      if (this.cur_view) {
        if (typeof (_base = this.cur_view).detach_all_page === "function") {
          _base.detach_all_page();
        }
        if (typeof (_base1 = this.cur_view).detach === "function") {
          _base1.detach();
        }
      }
      this.cur_view = new_view;
      return this.cur_view.attach();
    };

    AdminView.prototype._del_dview = function(nav) {
      var dview;
      if (!(nav.menuid in this.deviceviews)) {
        return;
      }
      dview = this.deviceviews[nav.menuid];
      dview.destroy();
    };

    AdminView.prototype.new_machine = function(is_bcst) {
      var menuid;
      menuid = this._new_machine({
        title: lang.adminview.menu_new,
        icon: "icon-home"
      }, is_bcst);
      return this.deviceviews[menuid];
    };

    AdminView.prototype._new_machine = function(nav, is_bcst) {
      var cur_nav, index, newId;
      if (this.cur_view.login === false && !is_bcst) {
        cur_nav = this.vm.navs[this.vm.active_index];
        return cur_nav.menuid;
      }
      newId = random_id("menu-");
      nav.menuid = newId;
      this.vm.navs.push(nav);
      index = this.vm.navs.length - 1;
      this.vm.active_index = index;
      this.attach_dview(this.vm.navs[index]);
      return nav.menuid;
    };

    AdminView.prototype.find_nav_index = function(menuid) {
      var index, nav, _i, _len, _ref;
      _ref = this.vm.navs;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        nav = _ref[index];
        if (nav.menuid === menuid) {
          return index;
        }
      }
      return -1;
    };

    return AdminView;

  })();

  CentralDeviceView = (function(_super) {
    __extends(CentralDeviceView, _super);

    function CentralDeviceView(menuid) {
      this.menuid = menuid;
      this.detach_all_page = __bind(this.detach_all_page, this);
      this.attach_page_base = __bind(this.attach_page_base, this);
      this.attach_page_monitor = __bind(this.attach_page_monitor, this);
      this.attach_page_overview = __bind(this.attach_page_overview, this);
      this.attach_page = __bind(this.attach_page, this);
      this.attach_dview = __bind(this.attach_dview, this);
      this.switch_tab = __bind(this.switch_tab, this);
      this.switch_to_page_base = __bind(this.switch_to_page_base, this);
      this.switch_to_page_monitor = __bind(this.switch_to_page_monitor, this);
      this.switch_to_page_overview = __bind(this.switch_to_page_overview, this);
      this.switch_to_page = __bind(this.switch_to_page, this);
      this.switch_remove = __bind(this.switch_remove, this);
      this.change_device = __bind(this.change_device, this);
      this.attach = __bind(this.attach, this);
      this.switch_to_login_page = __bind(this.switch_to_login_page, this);
      this.login_event = __bind(this.login_event, this);
      this.switch_remove = __bind(this.switch_remove, this);
      this.disconnect = __bind(this.disconnect, this);
      this.destroy = __bind(this.destroy, this);
      this.open_base = __bind(this.open_base, this);
      this.open_monitor = __bind(this.open_monitor, this);
      this.open_overview = __bind(this.open_overview, this);
      this.init = __bind(this.init, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralDeviceView.__super__.constructor.call(this, "submenu-", "html/submenu_central.html", "." + this.menuid + " .sub-menu", false);
      this.loginpage = new CentralLoginPage(this);
      this.login = false;
      this.cur_page = this.loginpage;
      this.host = "";
      this.user = "";
      this.reconnect = false;
      this.user_name = "";
    }

    CentralDeviceView.prototype.define_vm = function(vm) {
      vm.navs = [
        {
          title: '基本功能',
          icon: "icon-magic-wand",
          id: "Facedetect"
        }
      ];

      /*
      vm.navs = [{title: lang.centralsidebar.overview, icon: "icon-graph", id: "overview"},
                 {title: lang.centralsidebar.monitor, icon: "icon-bar-chart",   id: "monitor"},
                 {title: lang.centralsidebar.base, icon: "icon-layers", id: "base"},
                 {title: lang.centralsidebar.warn, icon: "icon-bell", id: "warning"}]
       */
      vm.navs_overview = [
        {
          title: lang.centralsidebar.overview_store,
          icon: "icon-briefcase",
          id: "store_overview"
        }, {
          title: lang.centralsidebar.overview_server,
          icon: " icon-briefcase",
          id: "server_overview"
        }
      ];
      vm.navs_monitor = [
        {
          title: lang.centralsidebar.store_monitor,
          icon: "icon-briefcase",
          id: "store_monitor"
        }, {
          title: lang.centralsidebar.server_monitor,
          icon: " icon-briefcase",
          id: "server_monitor"
        }
      ];
      vm.navs_base = [
        {
          title: lang.centralsidebar.serverlist,
          icon: "icon-briefcase",
          id: "serverlist"
        }, {
          title: lang.centralsidebar.storelist,
          icon: "icon-briefcase",
          id: "storelist"
        }, {
          title: lang.centralsidebar.clientlist,
          icon: "icon-briefcase",
          id: "clientlist"
        }
      ];
      vm.active_index = 0;
      vm.active_index_overview = 0;
      vm.active_index_monitor = 0;
      vm.active_index_base = 0;
      vm.switch_to_page = (function(_this) {
        return function(e) {
          return _this.switch_to_page($(e.target).data("id"));
        };
      })(this);
      vm.switch_to_page_overview = (function(_this) {
        return function(s) {
          return _this.switch_to_page_overview($(s.target).data("id"));
        };
      })(this);
      vm.switch_to_page_monitor = (function(_this) {
        return function(i) {
          return _this.switch_to_page_monitor($(i.target).data("id"));
        };
      })(this);
      vm.switch_to_page_base = (function(_this) {
        return function(t) {
          return _this.switch_to_page_base($(t.target).data("id"));
        };
      })(this);
      vm.open_overview = this.open_overview;
      vm.open_monitor = this.open_monitor;
      vm.open_base = this.open_base;
      return vm.user_name = this.user_name;
    };

    CentralDeviceView.prototype.init = function(host, user) {
      var port, _settings;
      _settings = new (require("settings").Settings);
      $(".page-content").css("background-color", "#f7f8fa");
      $('.menu-toggler').attr('style', 'display:block');
      $('.navbar-fixed-top').attr('style', 'display:block');
      $('#user_setting').attr('style', 'display:block');
      port = _settings.port;
      this.login = true;
      this.host = host;
      this.user = user;
      this.sd = new CentralStorageData(("" + host + ":") + port, user);

      /*
      @centralserverviewpage = new CentralServerViewPage(@sd, @switch_to_page)
      @centralstoreviewpage = new CentralStoreViewPage(@sd, @switch_to_page)
      @centralstoremonitorpage = new CentralStoremonitorPage(@sd, @switch_to_page_monitor)
      @centralservermonitorpage = new CentralServermonitorPage(@sd, @switch_to_page_monitor)
      @centralserverlistpage = new CentralServerlistPage(@sd)
      @centralstorelistpage = new CentralStorelistPage(@sd)
      @centralclientpage = new CentralClientlistPage(@sd)
      @centralwarningpage = new CentralWarningPage(@sd)
      @centralmonitorpage = new CentralMonitorPage(@sd, @switch_to_page)
       */
      this.registerpage = new RegisterPage(this.sd, this.switch_to_page);
      this.countpage = new PreCountPage(this.sd, this.switch_to_page);
      this.managerpage = new ManagerPage(this.sd, this.switch_to_page);
      this.facequickpropage = new FaceQuickProPage(this.sd, this.switch_to_page);
      this.pages = [this.facequickpropage];
      this.pages_title = [this.facequickpropage];

      /*@pages = [@centralserverviewpage, @centralstoreviewpage, @centralmonitorpage , @centralserverlistpage, @centralstorelistpage, @centralclientpage,@centralwarningpage ]
      @pages_title = [@centralstoreviewpage, @centralmonitorpage, @centralserverlistpage, @centralwarningpage]
      @pages_overview = [@centralstoreviewpage, @centralserverviewpage]
       *@pages_monitor = [@centralstoremonitorpage , @centralservermonitorpage]
      @pages_base =  [@centralserverlistpage, @centralstorelistpage, @centralclientpage]
       */
      $(this.sd).one("disconnect", this.disconnect);
      $("." + this.menuid).addClass("open");
      $("." + this.menuid + " .sub-menu").show();
      $("." + this.menuid + " a>span:last-child").addClass("arrow open");
      sds.push(this.sd);
      this.notification_manager = new NotificationManager(this.sd);
      this.notification_manager.notice();
      $(this.sd).one("user_login", this.login_event);
      return this.sd.update("all");
    };

    CentralDeviceView.prototype.open_overview = function(id) {
      if (id === "overview") {
        return true;
      } else {
        return false;
      }
    };

    CentralDeviceView.prototype.open_monitor = function(id) {
      if (id === "monitor") {
        return true;
      } else {
        return false;
      }
    };

    CentralDeviceView.prototype.open_base = function(id) {
      if (id === "base") {
        return true;
      } else {
        return false;
      }
    };

    CentralDeviceView.prototype.destroy = function() {
      if (this.login) {
        (new SettingsManager).removeLoginedMachine(this.host);
        this.reconnect = true;
        this.sd.close_socket();
        return arr_remove(sds, this.sd);
      }
    };

    CentralDeviceView.prototype.disconnect = function(element, host) {
      var server;
      if (!this.reconnect && host === this.sd.host) {
        arr_remove(sds, this.sd);
        (new SettingsManager).removeLoginedMachine(this.host);
        this.switch_to_login_page();
        this.sd.close_socket();
        (new MessageModal(lang.disconnect_warning.disconnect_message)).attach();
        server = {};
        this.log = new HeaderUI(this.sd, server);
        this.log.hide_log();
      }
    };

    CentralDeviceView.prototype.switch_remove = function() {
      $("." + this.menuid + " .sub-menu li").removeClass("open");
      return $("." + this.menuid + " .sub-menu li>ul").css('display', 'none');
    };

    CentralDeviceView.prototype.login_event = function(element, data) {
      console.log(data.confidence);
      console.log(element);
      console.log(data.uuid);
      if (this.token) {
        if (data.confidence !== "" && data.confidence !== this.token) {
          this.reconnect = true;
          arr_remove(sds, this.sd);
          (new SettingsManager).removeLoginedMachine(this.host);
          this.switch_to_login_page();
          this.sd.close_socket();
          (new MessageModal(lang.login_by_other_warning(this.user))).attach();
        }
      }
    };

    CentralDeviceView.prototype.switch_to_login_page = function() {
      this.detach_all_page();
      this.login = false;
      this.loginpage.attach();
      this.vm.active_index = 0;
      $("." + this.menuid).removeClass("open");
      $("." + this.menuid + " .sub-menu").hide();
      $("." + this.menuid + " a>span:last-child").removeClass("arrow open");
      return this.detach();
    };

    CentralDeviceView.prototype.attach = function() {
      if (!this.login) {
        return this.loginpage.attach();
      } else {
        CentralDeviceView.__super__.attach.call(this);
        return this.attach_page();
      }
    };

    CentralDeviceView.prototype.change_device = function(device) {
      return this.loginpage.change_device(device);
    };

    CentralDeviceView.prototype.switch_remove = function() {
      $("." + this.menuid + " .sub-menu li").removeClass("open");
      return $("." + this.menuid + " .sub-menu li>ul").css('display', 'none');
    };

    CentralDeviceView.prototype.switch_to_page = function(pageid) {
      var i, idx, mainpage, nav, _i, _j, _k, _len, _len1, _len2, _ref;
      for (_i = 0, _len = compare_Interval.length; _i < _len; _i++) {
        i = compare_Interval[_i];
        window.clearInterval(i);
      }
      if (compare_Interval.length) {
        compare_Interval.splice(0, compare_Interval.length);
      }
      for (_j = 0, _len1 = global_Interval.length; _j < _len1; _j++) {
        i = global_Interval[_j];
        window.clearInterval(i);
      }
      if (global_Interval.length) {
        global_Interval.splice(0, global_Interval.length);
      }
      mainpage = ['basicdata', 'Facedetect'];
      if (pageid === "overview") {
        this.vm.active_index = 0;
        this.vm.active_index_overview = 0;
        this.attach_page_overview();
      } else if (pageid === "base") {
        this.vm.active_index = 2;
        this.vm.active_index_base = 0;
        this.attach_page_base();
      } else {
        _ref = this.vm.navs;
        for (idx = _k = 0, _len2 = _ref.length; _k < _len2; idx = ++_k) {
          nav = _ref[idx];
          if (nav.id === pageid) {
            this.vm.active_index = idx;
            this.attach_page();
          }
        }
      }
      if (__indexOf.call(mainpage, pageid) >= 0) {
        return this.switch_remove();
      }
    };

    CentralDeviceView.prototype.switch_to_page_overview = function(pageid) {
      var idx, nav, _i, _len, _ref;
      this.vm.active_index = 0;
      _ref = this.vm.navs_overview;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        nav = _ref[idx];
        if (nav.id === pageid) {
          this.vm.active_index_overview = idx;
        }
      }
      return this.attach_page_overview();
    };

    CentralDeviceView.prototype.switch_to_page_monitor = function(pageid) {
      var idx, nav, _i, _len, _ref;
      this.vm.active_index = 1;
      _ref = this.vm.navs_monitor;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        nav = _ref[idx];
        if (nav.id === pageid) {
          this.vm.active_index_monitor = idx;
        }
      }
      return this.attach_page_monitor();
    };

    CentralDeviceView.prototype.switch_to_page_base = function(pageid) {
      var idx, nav, _i, _len, _ref;
      this.vm.active_index = 2;
      _ref = this.vm.navs_base;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        nav = _ref[idx];
        if (nav.id === pageid) {
          this.vm.active_index_base = idx;
        }
      }
      return this.attach_page_base();
    };

    CentralDeviceView.prototype.switch_tab = function(index) {
      var nav, old_nav;
      old_nav = this.cur_view;
      this.vm.active_index = index != null ? index : 0;
      nav = this.vm.navs[this.vm.active_index];
      return this.attach_dview(nav);
    };

    CentralDeviceView.prototype.attach_dview = function(nav) {
      var dview, new_view, _base, _base1;
      if (!(nav.menuid in this.deviceviews)) {
        dview = new DeviceView(nav.menuid);
        this.deviceviews[nav.menuid] = dview;
        dview.loginpage.vm.$watch("device", function(nval, oval) {
          if (nval !== "") {
            return nav.title = nval;
          } else {
            return nav.title = lang.adminview.menu_new;
          }
        });
      }
      new_view = this.deviceviews[nav.menuid];
      if (new_view === this.cur_view) {
        return;
      }
      if (this.cur_view) {
        if (typeof (_base = this.cur_view).detach_all_page === "function") {
          _base.detach_all_page();
        }
        if (typeof (_base1 = this.cur_view).detach === "function") {
          _base1.detach();
        }
      }
      this.cur_view = new_view;
      return this.cur_view.attach();
    };

    CentralDeviceView.prototype.attach_page = function() {
      var _base;
      if (this.cur_page) {
        if (typeof (_base = this.cur_page).detach === "function") {
          _base.detach();
        }
      }
      this.cur_page = this.pages_title[this.vm.active_index];
      return this.cur_page.attach();
    };

    CentralDeviceView.prototype.attach_page_overview = function() {
      var _base;
      if (this.cur_page) {
        if (typeof (_base = this.cur_page).detach === "function") {
          _base.detach();
        }
      }
      this.cur_page = this.pages_overview[this.vm.active_index_overview];
      return this.cur_page.attach();
    };

    CentralDeviceView.prototype.attach_page_monitor = function() {
      var _base;
      if (this.cur_page) {
        if (typeof (_base = this.cur_page).detach === "function") {
          _base.detach();
        }
      }
      this.cur_page = this.pages_monitor[this.vm.active_index_monitor];
      return this.cur_page.attach();
    };

    CentralDeviceView.prototype.attach_page_base = function() {
      var _base;
      if (this.cur_page) {
        if (typeof (_base = this.cur_page).detach === "function") {
          _base.detach();
        }
      }
      this.cur_page = this.pages_base[this.vm.active_index_base];
      return this.cur_page.attach();
    };

    CentralDeviceView.prototype.detach_all_page = function() {
      var page, _base, _i, _len, _ref;
      if (this.pages) {
        _ref = this.pages;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          if (typeof page.detach === "function") {
            page.detach();
          }
        }
      }
      if (typeof (_base = this.loginpage).detach === "function") {
        _base.detach();
      }
    };

    return CentralDeviceView;

  })(AvalonTemplUI);

  CentralView = (function() {
    function CentralView(server) {
      var newid;
      this.server = server;
      this.find_nav_index = __bind(this.find_nav_index, this);
      this._new_machine = __bind(this._new_machine, this);
      this.new_machine = __bind(this.new_machine, this);
      this._del_dview = __bind(this._del_dview, this);
      this.attach_dview = __bind(this.attach_dview, this);
      this.switch_tab = __bind(this.switch_tab, this);
      this.remove_tab = __bind(this.remove_tab, this);
      this.remove_all = __bind(this.remove_all, this);
      this.tab_click = __bind(this.tab_click, this);
      this.deviceviews = {};
      this.cur_view = null;
      newid = random_id('menu-');
      this.vm = avalon.define("sidebar", (function(_this) {
        return function(vm) {
          vm.navs = [
            {
              title: lang.server.centre,
              icon: "icon-home",
              menuid: "" + newid
            }
          ];
          vm.active_index = 0;
          vm.tab_click = _this.tab_click;
          return vm.server = "central";
        };
      })(this));
      if (this.server.header) {
        this.header = new HeaderUI(this, this.server);
        this.header.attach();
      } else {
        console.log("store -->central");
        this.header = new HeaderUI(this, this.server);
      }
      this.attach_dview(this.vm.navs[0]);
    }

    CentralView.prototype.tab_click = function(e) {
      var index;
      index = parseInt(e.currentTarget.dataset.idx);
      if (e.target.className !== "icon-remove-circle") {
        return this.switch_tab(index);
      } else {
        return this.remove_tab(index);
      }
    };

    CentralView.prototype.remove_all = function() {
      var del_nav, i, _i, _ref, _results;
      _results = [];
      for (i = _i = _ref = this.vm.navs.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        del_nav = this.vm.navs[i];
        if (i !== -1) {
          this.vm.navs.splice(i, 1);
        }
        if (del_nav !== void 0) {
          _results.push(this._del_dview(del_nav));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    CentralView.prototype.remove_tab = function(index) {
      var del_nav, settings, target;
      settings = new SettingsManager;
      if (this.vm.navs.length === 1) {
        target = index;
        this.new_machine(true);
      } else if (index === this.vm.navs.length - 1) {
        target = index - 1;
      } else {
        target = index;
      }
      del_nav = this.vm.navs[index];
      console.log(del_nav);
      if (index !== -1) {
        this.vm.navs.splice(index, 1);
      }
      this.switch_tab(target);
      settings.removeSearchedMachine(this.vm.navs[index]);
      return this._del_dview(del_nav);
    };

    CentralView.prototype.switch_tab = function(index) {
      var nav, old_nav;
      old_nav = this.cur_view;
      this.vm.active_index = index != null ? index : 0;
      nav = this.vm.navs[this.vm.active_index];
      return this.attach_dview(nav);
    };

    CentralView.prototype.attach_dview = function(nav) {
      var dview, new_view, _base, _base1;
      if (!(nav.menuid in this.deviceviews)) {
        dview = new CentralDeviceView(nav.menuid);
        this.deviceviews[nav.menuid] = dview;
        dview.loginpage.vm.$watch("device", function(nval, oval) {
          if (nval !== "") {
            return nav.title = nval;
          } else {
            return nav.title = lang.adminview.menu_new;
          }
        });
      }
      new_view = this.deviceviews[nav.menuid];
      if (new_view === this.cur_view) {
        return;
      }
      if (this.cur_view) {
        if (typeof (_base = this.cur_view).detach_all_page === "function") {
          _base.detach_all_page();
        }
        if (typeof (_base1 = this.cur_view).detach === "function") {
          _base1.detach();
        }
      }
      this.cur_view = new_view;
      return this.cur_view.attach();
    };

    CentralView.prototype._del_dview = function(nav) {
      var dview;
      if (!(nav.menuid in this.deviceviews)) {
        return;
      }
      dview = this.deviceviews[nav.menuid];
      dview.destroy();
    };

    CentralView.prototype.new_machine = function(is_bcst) {
      var menuid;
      menuid = this._new_machine({
        title: lang.adminview.menu_new,
        icon: "icon-home"
      }, is_bcst);
      return this.deviceviews[menuid];
    };

    CentralView.prototype._new_machine = function(nav, is_bcst) {
      var cur_nav, index, newId;
      if (this.cur_view.login === false && !is_bcst) {
        cur_nav = this.vm.navs[this.vm.active_index];
        return cur_nav.menuid;
      }
      newId = random_id("menu-");
      nav.menuid = newId;
      this.vm.navs.push(nav);
      index = this.vm.navs.length - 1;
      this.vm.active_index = index;
      this.attach_dview(this.vm.navs[index]);
      return nav.menuid;
    };

    CentralView.prototype.find_nav_index = function(menuid) {
      var index, nav, _i, _len, _ref;
      _ref = this.vm.navs;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        nav = _ref[index];
        if (nav.menuid === menuid) {
          return index;
        }
      }
      return -1;
    };

    return CentralView;

  })();

  this.AdminView = AdminView;

  this.AvalonTemplUI = AvalonTemplUI;

  this.CentralView = CentralView;

  this.CentralDeviceView = CentralDeviceView;

  this.ChainProgress = ChainProgress;

  this.DeviceView = DeviceView;

  this.HeaderUI = HeaderUI;

  this.NotificationProgress = NotificationProgress;

  this.valid_opt = valid_opt;

  this._show_chain_progress = _show_chain_progress;

  this.avalon_templ = avalon_templ;

  this.dtable_opt = dtable_opt;

  this.scan_avalon_templ = scan_avalon_templ;

  this.show_chain_progress = show_chain_progress;

  this.table_update_listener = table_update_listener;

}).call(this);

(function() {
  var CentralAddEmailModal, CentralChangeEmailModal, CentralChangeValueModal, CentralCreateClientModal, CentralCreateServerModal, CentralCreateStoreModal, CentralDownloadLogModal, CentralEmailDeleteModal, CentralExpandModal, CentralHandleLogModal, CentralManualModal, CentralPieModal, CentralRecordDeleteModal, CentralSearchModal, CentralServerCacheModal, CentralServerCpuModal, CentralServerMemModal, CentralStartModal, CentralStoreDetailModal, CentralUnmonitorModal, ConfirmModal, ConfirmModal_link, ConfirmModal_more, ConfirmModal_scan, ConfirmModal_unlink, EthBondingModal, FaceQuickChangeCam, FaceUpLoadModal, FsChooseModal, FsCreateModal, GetcardResultModal, InitrCreateModal, InitrDeleteModal, MessageModal, MessageModal_reboot, Modal, RaidCreateDSUUI, RaidCreateModal, RaidDeleteModal, RaidSetDiskRoleModal, RegisterAddModal, RegisterChangeDataModal, RegisterChangeHeadModal, RegisterChangeHeaderModal, RegisterChangePasswdModal, RegisterDetailModal, RegisterRechargeModal, RegisterRecordModal, ResDeleteModal, ServerUI, SyncDeleteModal, VolumeCreateModal, VolumeDeleteModal, VolumeMapModal, VolumeUnmapModal,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Modal = (function(_super) {
    __extends(Modal, _super);

    function Modal(prefix, src, attr) {
      this.prefix = prefix;
      this.src = src;
      this.attr = attr != null ? attr : {};
      this.hide = __bind(this.hide, this);
      this.rendered = __bind(this.rendered, this);
      this.attach = __bind(this.attach, this);
      $.extend(this.attr, {
        "class": "modal fade"
      });
      Modal.__super__.constructor.call(this, this.prefix, this.src, "body", false, this.attr);
    }

    Modal.prototype.attach = function() {
      $("body").modalmanager("loading");
      return Modal.__super__.attach.call(this);
    };

    Modal.prototype.rendered = function() {
      var $div;
      Modal.__super__.rendered.call(this);
      $div = $("#" + this.id);
      $div.on("hide", (function(_this) {
        return function(e) {
          if (e.currentTarget === e.target) {
            return setTimeout((function() {
              return _this.detach();
            }), 1000);
          }
        };
      })(this));
      $div.modal({
        backdrop: "static"
      });
      return $(".tooltips").tooltip();
    };

    Modal.prototype.hide = function() {
      return $("#" + this.id).modal("hide");
    };

    return Modal;

  })(AvalonTemplUI);

  ServerUI = (function(_super) {
    __extends(ServerUI, _super);

    function ServerUI(serverUI) {
      this.serverUI = serverUI != null ? serverUI : server_type;
      this.central = __bind(this.central, this);
      this.store = __bind(this.store, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      ServerUI.__super__.constructor.call(this, "confirm-", 'html/serverui.html', {
        style: "max-width:400px;left:60%;text-align:center"
      });
    }

    ServerUI.prototype.define_vm = function(vm) {
      vm.lang = lang.server;
      vm.central = this.central;
      return vm.store = this.store;
    };

    ServerUI.prototype.rendered = function() {
      ServerUI.__super__.rendered.call(this);
      return this.backstretch = $(".login").backstretch(["images/login-bg/4a.jpg"], {
        fade: 1000,
        duration: 5000
      }).data("backstretch");
    };

    ServerUI.prototype.store = function() {
      this.serverUI.type = 'store';
      window.adminview = new AdminView(this.serverUI);
      avalon.scan();
      return App.init();
    };

    ServerUI.prototype.central = function() {
      this.serverUI.type = 'central';
      this.serverUI.store = false;
      window.adminview = new CentralView(this.serverUI);
      avalon.scan();
      return App.init();
    };

    return ServerUI;

  })(Modal);

  MessageModal = (function(_super) {
    __extends(MessageModal, _super);

    function MessageModal(message, callback) {
      this.message = message;
      this.callback = callback != null ? callback : null;
      this.define_vm = __bind(this.define_vm, this);
      MessageModal.__super__.constructor.call(this, "message-", "html/message_modal.html");
    }

    MessageModal.prototype.define_vm = function(vm) {
      vm.message = this.message;
      vm.lang = lang.message_modal;
      return vm.callback = (function(_this) {
        return function() {
          return typeof _this.callback === "function" ? _this.callback() : void 0;
        };
      })(this);
    };

    return MessageModal;

  })(Modal);

  MessageModal_reboot = (function(_super) {
    __extends(MessageModal_reboot, _super);

    function MessageModal_reboot(message, bottom, dview, sd, settings) {
      this.message = message;
      this.bottom = bottom;
      this.dview = dview;
      this.sd = sd;
      this.settings = settings;
      this.reboot = __bind(this.reboot, this);
      this.define_vm = __bind(this.define_vm, this);
      MessageModal_reboot.__super__.constructor.call(this, "message-", "html/message_modal_reboot.html");
    }

    MessageModal_reboot.prototype.define_vm = function(vm) {
      vm.message = this.message;
      vm.lang = lang.message_modal;
      vm.recovered = this.bottom;
      return vm.reboot = this.reboot;
    };

    MessageModal_reboot.prototype.reboot = function() {
      var chain;
      chain = new Chain();
      chain.chain((function(_this) {
        return function() {
          return (new CommandRest(_this.dview.sd.host)).reboot();
        };
      })(this));
      this.hide();
      return show_chain_progress(chain, true).fail((function(_this) {
        return function() {
          _this.settings.removeLoginedMachine(_this.dview.host);
          _this.sd.close_socket();
          arr_remove(sds, _this.sd);
          return setTimeout(_this.dview.switch_to_login_page, 2000);
        };
      })(this));
    };

    return MessageModal_reboot;

  })(Modal);

  CentralSearchModal = (function(_super) {
    __extends(CentralSearchModal, _super);

    function CentralSearchModal(sd, page, machines, type) {
      this.sd = sd;
      this.page = page;
      this.machines = machines;
      this.type = type;
      this.subitems = __bind(this.subitems, this);
      this.show_tips = __bind(this.show_tips, this);
      this.tips = __bind(this.tips, this);
      this._eachMonitor = __bind(this._eachMonitor, this);
      this.monitoring = __bind(this.monitoring, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      console.log(this.page);
      CentralSearchModal.__super__.constructor.call(this, "central-search-modal-", "html/central_search_modal.html");
    }

    CentralSearchModal.prototype.define_vm = function(vm) {
      vm.machines = this.subitems();
      vm.lang = lang.central_search_modal;
      vm.all_checked = false;
      vm.submit = this.submit;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.machines;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralSearchModal.prototype.rendered = function() {
      CentralSearchModal.__super__.rendered.call(this);
      return $("form.machines").validate(valid_opt({
        rules: {
          'machine-checkbox': {
            required: true,
            minlength: 1
          }
        },
        messages: {
          'machine-checkbox': "请选择至少一个虚拟磁盘"
        }
      }));
    };

    CentralSearchModal.prototype.submit = function() {
      var i, selecteds, _i, _len, _ref;
      if ($("form.machines").validate().form()) {
        selecteds = [];
        _ref = this.vm.machines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            selecteds.push(i);
          }
        }
        return this.monitoring(selecteds);
      }
    };

    CentralSearchModal.prototype.monitoring = function(devices) {
      var chain, device, uuid, _i, _len;
      chain = new Chain;
      for (_i = 0, _len = devices.length; _i < _len; _i++) {
        device = devices[_i];
        uuid = device.uuid + device.ifaces[0].split('.').join('');
        chain.chain(this._eachMonitor(uuid, device.ifaces[0]));
      }
      chain.chain(this.sd.update('all'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function(data) {
          (new MessageModal(lang.central_search_modal.monitor_success)).attach();
          return _this.page.attach();
        };
      })(this)).fail((function(_this) {
        return function() {
          return (new MessageModal(lang.central_search_modal.monitor_error)).attach();
        };
      })(this));
    };

    CentralSearchModal.prototype._eachMonitor = function(uuid, ip, slotnr) {
      if (slotnr == null) {
        slotnr = 24;
      }
      return (function(_this) {
        return function() {
          return (new MachineRest(_this.sd.host)).monitor(uuid, ip, slotnr, _this.type);
        };
      })(this);
    };

    CentralSearchModal.prototype.tips = function(devices) {
      var datas, e, i, info, j, k, types, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      try {
        info = [];
        datas = {};
        for (_i = 0, _len = devices.length; _i < _len; _i++) {
          i = devices[_i];
          info.push(i.ifaces[0]);
          datas[i.ifaces[0]] = 0;
        }
        _ref = this.sd.stores.items.journals;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          j = _ref[_j];
          if (_ref1 = j.ip, __indexOf.call(info, _ref1) >= 0) {
            datas[j.ip] = datas[j.ip] + 1;
          }
        }
        _results = [];
        for (_k = 0, _len2 = info.length; _k < _len2; _k++) {
          k = info[_k];
          if (datas[k] > 0) {
            if (this.type === "storage") {
              types = "存储";
            } else {
              types = "服务器";
            }
            _results.push(this.show_tips(k, datas[k], types));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralSearchModal.prototype.show_tips = function(ip, num, type) {
      return $(function(){
            $.extend($.gritter.options, {
                class_name: 'gritter', 
                position: 'bottom-right', 
                fade_in_speed: 100, 
                fade_out_speed: 100, 
                time: 30000 
            });
            $.gritter.add({
                title: '<i class="icon-bell">告警信息</i>',
                text: '<a href="#" style="color:#ccc;font-size:14px;">' + type + ip + '有' + num + '条告警信息</a><br>点击可查看.'
            });
            return false;
        });
    };

    CentralSearchModal.prototype.subitems = function() {
      var items;
      items = subitems(this.machines, {
        uuid: "",
        ifaces: "",
        Slotnr: 24,
        checked: false
      });
      return items;
    };

    return CentralSearchModal;

  })(Modal);

  CentralRecordDeleteModal = (function(_super) {
    __extends(CentralRecordDeleteModal, _super);

    function CentralRecordDeleteModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralRecordDeleteModal.__super__.constructor.call(this, "central-delete-modal-", "html/central_delete_modal.html");
    }

    CentralRecordDeleteModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_delete_modal;
      vm.submit = this.submit;
      return vm.message = this.message;
    };

    CentralRecordDeleteModal.prototype.rendered = function() {
      return CentralRecordDeleteModal.__super__.rendered.call(this);
    };

    CentralRecordDeleteModal.prototype.submit = function() {
      var chain, i, _i, _len, _ref;
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).delete_record(i.uuid);
          };
        })(this));
        chain.chain(this.sd.update('clouds'));
        this.hide();
        show_chain_progress(chain).done((function(_this) {
          return function() {};
        })(this));
      }
      this.page.attach();
      return (new MessageModal(this.vm.lang.delete_success)).attach();
    };

    return CentralRecordDeleteModal;

  })(Modal);

  CentralEmailDeleteModal = (function(_super) {
    __extends(CentralEmailDeleteModal, _super);

    function CentralEmailDeleteModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralEmailDeleteModal.__super__.constructor.call(this, "central-delete-modal-", "html/central_delete_modal.html");
    }

    CentralEmailDeleteModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_delete_modal;
      vm.submit = this.submit;
      return vm.message = this.message;
    };

    CentralEmailDeleteModal.prototype.rendered = function() {
      return CentralEmailDeleteModal.__super__.rendered.call(this);
    };

    CentralEmailDeleteModal.prototype.submit = function() {
      var chain, i, _i, _len, _ref;
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).delete_email(i.address);
          };
        })(this));
        chain.chain(this.sd.update('all'));
        this.hide();
        show_chain_progress(chain).done((function(_this) {
          return function() {
            return _this.page.attach();
          };
        })(this));
      }
      return (new MessageModal(this.vm.lang.delete_success)).attach();
    };

    return CentralEmailDeleteModal;

  })(Modal);

  CentralServerCpuModal = (function(_super) {
    __extends(CentralServerCpuModal, _super);

    function CentralServerCpuModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServerCpuModal.__super__.constructor.call(this, "central-server-cpu-modal-", "html/central_server_cpu_modal.html");
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          if (_this.has_rendered) {
            return _this.vm.cpu = _this.subitems();
          }
        };
      })(this));
    }

    CentralServerCpuModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_server_cpu_modal;
      vm.submit = this.submit;
      vm.cpu = this.subitems();
      return vm.rendered = this.rendered;
    };

    CentralServerCpuModal.prototype.rendered = function() {
      var $scroller;
      CentralServerCpuModal.__super__.rendered.call(this);
      this.data_table = $("#cpu-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller = $("#journals-scroller");
      return $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
    };

    CentralServerCpuModal.prototype.subitems = function() {
      var error, i, items, latest, tmp, _i, _len, _ref;
      items = this.sd.stats.items;
      latest = items[items.length - 1];
      tmp = [];
      try {
        _ref = latest.master.process;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.protype !== 'total' && i.cpu !== 0) {
            tmp.push(i);
          }
        }
        return tmp;
      } catch (_error) {
        error = _error;
        return tmp;
      }
    };

    CentralServerCpuModal.prototype.submit = function() {
      return this.hide();
    };

    return CentralServerCpuModal;

  })(Modal);

  CentralServerCacheModal = (function(_super) {
    __extends(CentralServerCacheModal, _super);

    function CentralServerCacheModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServerCacheModal.__super__.constructor.call(this, "central-server-cache-modal-", "html/central_server_cache_modal.html");
    }

    CentralServerCacheModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_server_cache_modal;
      vm.submit = this.submit;
      vm.cache = this.subitems();
      return vm.rendered = this.rendered;
    };

    CentralServerCacheModal.prototype.rendered = function() {
      var $scroller;
      CentralServerCacheModal.__super__.rendered.call(this);
      this.data_table = $("#cache-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller = $("#journals-scroller");
      return $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
    };

    CentralServerCacheModal.prototype.subitems = function() {
      var error, i, items, latest, tmp, _i, _len, _ref;
      items = this.sd.stats.items;
      latest = items[items.length - 1];
      tmp = [];
      try {
        _ref = latest.master.process;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.protype !== 'total') {
            tmp.push(i);
          }
        }
        return tmp;
      } catch (_error) {
        error = _error;
        return tmp;
      }
    };

    CentralServerCacheModal.prototype.submit = function() {
      return this.hide();
    };

    return CentralServerCacheModal;

  })(Modal);

  CentralServerMemModal = (function(_super) {
    __extends(CentralServerMemModal, _super);

    function CentralServerMemModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServerMemModal.__super__.constructor.call(this, "central-server-mem-modal-", "html/central_server_mem_modal.html");
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          if (_this.has_rendered) {
            return _this.vm.mem = _this.subitems();
          }
        };
      })(this));
    }

    CentralServerMemModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_server_mem_modal;
      vm.submit = this.submit;
      vm.mem = this.subitems();
      return vm.rendered = this.rendered;
    };

    CentralServerMemModal.prototype.rendered = function() {
      var $scroller;
      CentralServerMemModal.__super__.rendered.call(this);
      this.data_table = $("#mem-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller = $("#journals-scroller");
      return $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
    };

    CentralServerMemModal.prototype.subitems = function() {
      var error, i, items, latest, tmp, _i, _len, _ref;
      items = this.sd.stats.items;
      latest = items[items.length - 1];
      tmp = [];
      try {
        _ref = latest.master.process;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.protype !== 'total' && i.mem !== 0) {
            tmp.push(i);
          }
        }
        return tmp;
      } catch (_error) {
        error = _error;
        return tmp;
      }
    };

    CentralServerMemModal.prototype.submit = function() {
      return this.hide();
    };

    return CentralServerMemModal;

  })(Modal);

  CentralStoreDetailModal = (function(_super) {
    __extends(CentralStoreDetailModal, _super);

    function CentralStoreDetailModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.subitems = __bind(this.subitems, this);
      this.subitems = __bind(this.subitems, this);
      this.subitems = __bind(this.subitems, this);
      this.subitems = __bind(this.subitems, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralStoreDetailModal.__super__.constructor.call(this, "central-store-detail-modal-", "html/central_store_detail_modal.html");
    }

    CentralStoreDetailModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_store_detail_modal;
      vm.submit = this.submit;
      vm.disks = this.subitems_disks();
      vm.raids = this.subitems_raids();
      vm.volumes = this.subitems_volumes();
      vm.filesystems = this.subitems_filesystems();
      vm.initiators = this.subitems_initiators();
      return vm.rendered = this.rendered;
    };

    CentralStoreDetailModal.prototype.rendered = function() {
      var $scroller;
      CentralStoreDetailModal.__super__.rendered.call(this);
      this.data_table = $("#volume-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller = $("#journals-scroller");
      return $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
    };

    CentralStoreDetailModal.prototype.subitems = function() {
      var i, temp, _i, _len, _ref;
      temp = [];
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        temp.push(i);
      }
      return temp;
    };

    CentralStoreDetailModal.prototype.subitems = function() {
      var i, temp, _i, _len, _ref;
      temp = [];
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        temp.push(i);
      }
      return temp;
    };

    CentralStoreDetailModal.prototype.subitems = function() {
      var i, temp, _i, _len, _ref;
      temp = [];
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        temp.push(i);
      }
      return temp;
    };

    CentralStoreDetailModal.prototype.subitems = function() {
      var i, temp, _i, _len, _ref;
      temp = [];
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        temp.push(i);
      }
      return temp;
    };

    CentralStoreDetailModal.prototype.subitems = function() {
      var i, temp, _i, _len, _ref;
      temp = [];
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        temp.push(i);
      }
      return temp;
    };

    CentralStoreDetailModal.prototype.subitems = function() {
      var i, temp, _i, _len, _ref;
      temp = [];
      _ref = this.message;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        temp.push(i);
      }
      return temp;
    };

    CentralStoreDetailModal.prototype.submit = function() {
      return this.hide();
    };

    return CentralStoreDetailModal;

  })(Modal);

  CentralPieModal = (function(_super) {
    __extends(CentralPieModal, _super);

    function CentralPieModal(sd, page, type, total, used) {
      this.sd = sd;
      this.page = page;
      this.type = type;
      this.total = total;
      this.used = used;
      this.submit = __bind(this.submit, this);
      this.plot_pie = __bind(this.plot_pie, this);
      this.get_cap = __bind(this.get_cap, this);
      this.get_used = __bind(this.get_used, this);
      this.refresh_pie = __bind(this.refresh_pie, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralPieModal.__super__.constructor.call(this, "central-pie-modal-", "html/central_pie_modal.html");
      this.refresh_pie();
    }

    CentralPieModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_pie_modal;
      vm.submit = this.submit;
      vm.rendered = this.rendered;
      return vm.type = this.type;
    };

    CentralPieModal.prototype.rendered = function() {
      CentralPieModal.__super__.rendered.call(this);
      return this.refresh_pie();
    };

    CentralPieModal.prototype.subitems = function() {};

    CentralPieModal.prototype.refresh_pie = function() {
      var datas_total, datas_used, error;
      try {
        if (this.type === '已用容量') {
          datas_used = this.get_used();
          return this.plot_pie(datas_used, this.type);
        } else {
          this.type = '总容量';
          datas_total = this.get_cap();
          return this.plot_pie(datas_total, this.type);
        }
      } catch (_error) {
        error = _error;
        return console.log(error);
      }
    };

    CentralPieModal.prototype.get_used = function() {
      var data_used, datas_used, i, j, machine_used, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
      data_used = {};
      datas_used = [];
      machine_used = [];
      _ref = this.sd.stores.items.Raid;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (_ref1 = i.MachineId, __indexOf.call(machine_used, _ref1) < 0) {
          machine_used.push(i.MachineId);
        }
      }
      _ref2 = this.sd.stores.items.Raid;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        i = _ref2[_j];
        data_used[i.MachineId] = 0;
      }
      _ref3 = this.sd.stores.items.Raid;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        i = _ref3[_k];
        data_used[i.MachineId] = data_used[i.MachineId] + i.Used;
      }
      for (_l = 0, _len3 = machine_used.length; _l < _len3; _l++) {
        i = machine_used[_l];
        datas_used.push({
          name: i,
          y: data_used[i] / this.used * 100
        });
      }
      for (_m = 0, _len4 = datas_used.length; _m < _len4; _m++) {
        i = datas_used[_m];
        _ref4 = this.sd.centers.items;
        for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
          j = _ref4[_n];
          if (i['name'] === j.Uuid) {
            i['name'] = j.Ip;
          }
        }
      }
      return datas_used;
    };

    CentralPieModal.prototype.get_cap = function() {
      var data_total, datas_total, i, j, machine_total, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
      data_total = {};
      datas_total = [];
      machine_total = [];
      _ref = this.sd.stores.items.Disk;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (_ref1 = i.MachineId, __indexOf.call(machine_total, _ref1) < 0) {
          machine_total.push(i.MachineId);
        }
      }
      _ref2 = this.sd.stores.items.Disk;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        i = _ref2[_j];
        data_total[i.MachineId] = 0;
      }
      _ref3 = this.sd.stores.items.Disk;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        i = _ref3[_k];
        data_total[i.MachineId] = data_total[i.MachineId] + i.CapSector / 2 / 1024 / 1024;
      }
      for (_l = 0, _len3 = machine_total.length; _l < _len3; _l++) {
        i = machine_total[_l];
        datas_total.push({
          name: i,
          y: data_total[i] / this.total * 100
        });
      }
      for (_m = 0, _len4 = datas_total.length; _m < _len4; _m++) {
        i = datas_total[_m];
        _ref4 = this.sd.centers.items;
        for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
          j = _ref4[_n];
          if (i['name'] === j.Uuid) {
            i['name'] = j.Ip;
          }
        }
      }
      return datas_total;
    };

    CentralPieModal.prototype.plot_pie = function(datas, type) {
      Highcharts.setOptions({
        lang: {
          contextButtonTitle: "图表导出菜单",
          decimalPoint: ".",
          downloadJPEG: "下载JPEG图片",
          downloadPDF: "下载PDF文件",
          downloadPNG: "下载PNG文件",
          downloadSVG: "下载SVG文件",
          printChart: "打印图表"
        }
      });
      return $('#pie_charts').highcharts({
        chart: {
          type: 'pie',
          options3d: {
            enabled: true,
            alpha: 45,
            beta: 0
          },
          marginBottom: 70
        },
        title: {
          text: type,
          align: 'center',
          verticalAlign: 'top',
          style: {
            fontWeight: 'bold'
          }
        },
        tooltip: {
          pointFormat: '<b>{point.percentage:.1f}%</b>',
          style: {
            color: '#fff',
            fontSize: '15px',
            opacity: 0.8
          },
          borderColor: '#000',
          backgroundColor: '#000',
          borderRadius: 0
        },
        credits: {
          enabled: false
        },
        exporting: {
          enabled: false
        },
        plotOptions: {
          pie: {
            states: {
              hover: {
                brightness: 0.08
              }
            },
            allowPointSelect: true,
            animation: false,
            cursor: 'pointer',
            depth: 35,
            slicedOffset: 15,
            showInLegend: true,
            dataLabels: {
              enabled: true,
              format: '{point.percentage:.1f} %',
              style: {
                fontSize: '14px'
              }
            },
            point: {
              events: {
                legendItemClick: function() {
                  return false;
                }
              }
            }
          }
        },
        legend: {
          backgroundColor: '#FFFFFF',
          layout: 'vertical',
          floating: true,
          align: 'center',
          verticalAlign: 'bottom',
          itemMarginBottom: 5,
          x: 0,
          y: 20,
          labelFormatter: function() {
            return this.name;
          }
        },
        series: [
          {
            type: 'pie',
            name: '',
            data: datas
          }
        ]
      });
    };

    CentralPieModal.prototype.submit = function() {
      return this.hide();
    };

    return CentralPieModal;

  })(Modal);

  ConfirmModal_unlink = (function(_super) {
    __extends(ConfirmModal_unlink, _super);

    function ConfirmModal_unlink(message, confirm, cancel, warn) {
      this.message = message;
      this.confirm = confirm;
      this.cancel = cancel;
      this.warn = warn;
      this.define_vm = __bind(this.define_vm, this);
      ConfirmModal_unlink.__super__.constructor.call(this, "confirm-", "html/confirm_Initr.html");
    }

    ConfirmModal_unlink.prototype.define_vm = function(vm) {
      vm.message = this.message;
      vm.lang = lang.confirm_modal;
      vm.warn = lang.initr_unlink_modal;
      vm.submit_confirm = (function(_this) {
        return function() {
          return typeof _this.confirm === "function" ? _this.confirm() : void 0;
        };
      })(this);
      return vm.cancel = (function(_this) {
        return function() {
          return typeof _this.cancel === "function" ? _this.cancel() : void 0;
        };
      })(this);
    };

    return ConfirmModal_unlink;

  })(Modal);

  ConfirmModal_link = (function(_super) {
    __extends(ConfirmModal_link, _super);

    function ConfirmModal_link(message, confirm, cancel, warn) {
      this.message = message;
      this.confirm = confirm;
      this.cancel = cancel;
      this.warn = warn;
      this.define_vm = __bind(this.define_vm, this);
      ConfirmModal_link.__super__.constructor.call(this, "confirm-", "html/confirm_Initr.html");
    }

    ConfirmModal_link.prototype.define_vm = function(vm) {
      vm.message = this.message;
      vm.lang = lang.confirm_modal;
      vm.warn = lang.initr_link_modal;
      vm.submit_confirm = (function(_this) {
        return function() {
          return typeof _this.confirm === "function" ? _this.confirm() : void 0;
        };
      })(this);
      return vm.cancel = (function(_this) {
        return function() {
          return typeof _this.cancel === "function" ? _this.cancel() : void 0;
        };
      })(this);
    };

    return ConfirmModal_link;

  })(Modal);

  ConfirmModal = (function(_super) {
    __extends(ConfirmModal, _super);

    function ConfirmModal(message, confirm, cancel) {
      this.message = message;
      this.confirm = confirm;
      this.cancel = cancel;
      this.define_vm = __bind(this.define_vm, this);
      ConfirmModal.__super__.constructor.call(this, "confirm-", "html/confirm_modal.html");
    }

    ConfirmModal.prototype.define_vm = function(vm) {
      vm.message = this.message;
      vm.lang = lang.confirm_modal;
      vm.submit_confirm = (function(_this) {
        return function() {
          return typeof _this.confirm === "function" ? _this.confirm() : void 0;
        };
      })(this);
      return vm.cancel = (function(_this) {
        return function() {
          return typeof _this.cancel === "function" ? _this.cancel() : void 0;
        };
      })(this);
    };

    return ConfirmModal;

  })(Modal);

  ConfirmModal_more = (function(_super) {
    __extends(ConfirmModal_more, _super);

    function ConfirmModal_more(title, message, sd, dview, settings) {
      this.title = title;
      this.message = message;
      this.sd = sd;
      this.dview = dview;
      this.settings = settings;
      this.recover = __bind(this.recover, this);
      this.sysinit = __bind(this.sysinit, this);
      this.keypress_passwd = __bind(this.keypress_passwd, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      ConfirmModal_more.__super__.constructor.call(this, "confirm-", "html/confirm_vaildate_modal.html");
      this.settings = new SettingsManager;
    }

    ConfirmModal_more.prototype.define_vm = function(vm) {
      vm.title = this.title;
      vm.message = this.message;
      vm.lang = lang.confirm_vaildate_modal;
      vm.confirm = true;
      vm.confirm_passwd = "";
      vm.submit = this.submit;
      vm.bottom = true;
      vm.sysinit = this.sysinit;
      vm.recover = this.recover;
      return vm.keypress_passwd = this.keypress_passwd;
    };

    ConfirmModal_more.prototype.rendered = function() {
      ConfirmModal_more.__super__.rendered.call(this);
      $.validator.addMethod("same", (function(_this) {
        return function(val, element) {
          if (_this.vm.confirm_passwd !== 'passwd') {
            return false;
          } else {
            return true;
          }
        };
      })(this), "密码输入错误");
      return $("form.passwd").validate(valid_opt({
        rules: {
          confirm_passwd: {
            required: true,
            maxlength: 32,
            same: true
          }
        },
        messages: {
          confirm_passwd: {
            required: "请输入正确的确认密码",
            maxlength: "密码长度不能超过32个字符"
          }
        }
      }));
    };

    ConfirmModal_more.prototype.submit = function() {
      if (this.title === this.vm.lang.btn_sysinit) {
        return this.sysinit();
      } else if (this.title === this.vm.lang.btn_recover) {
        return this.recover();
      }
    };

    ConfirmModal_more.prototype.keypress_passwd = function(e) {
      if (e.which === 13) {
        return this.submit();
      }
    };

    ConfirmModal_more.prototype.sysinit = function() {
      var chain;
      if ($("form.passwd").validate().form()) {
        chain = new Chain();
        chain.chain((function(_this) {
          return function() {
            return (new CommandRest(_this.dview.sd.host)).sysinit();
          };
        })(this));
        this.hide();
        return show_chain_progress(chain, true).fail((function(_this) {
          return function(data) {
            _this.settings.removeLoginedMachine(_this.dview.host);
            _this.sd.close_socket();
            arr_remove(sds, _this.sd);
            return setTimeout(_this.dview.switch_to_login_page, 2000);
          };
        })(this));
      }
    };

    ConfirmModal_more.prototype.recover = function() {
      var chain;
      if ($("form.passwd").validate().form()) {
        chain = new Chain();
        chain.chain((function(_this) {
          return function() {
            return (new CommandRest(_this.dview.sd.host)).recover();
          };
        })(this));
        this.hide();
        return show_chain_progress(chain, true).done((function(_this) {
          return function(data) {
            return (new MessageModal_reboot(lang.maintainpage.finish_recover, _this.vm.bottom, _this.dview, _this.sd, _this.settings)).attach();
          };
        })(this)).fail((function(_this) {
          return function(data) {
            console.log("error");
            return console.log(data);
          };
        })(this));
      }
    };

    return ConfirmModal_more;

  })(Modal);

  ConfirmModal_scan = (function(_super) {
    __extends(ConfirmModal_scan, _super);

    function ConfirmModal_scan(sd, page, title, message, fs) {
      this.sd = sd;
      this.page = page;
      this.title = title;
      this.message = message;
      this.fs = fs;
      this.reboot = __bind(this.reboot, this);
      this.define_vm = __bind(this.define_vm, this);
      ConfirmModal_scan.__super__.constructor.call(this, "confirm-", "html/confirm_reboot_modal.html");
    }

    ConfirmModal_scan.prototype.define_vm = function(vm) {
      vm.lang = lang.confirm_reboot_modal;
      vm.title = this.title;
      vm.message = this.message;
      vm.submit = this.reboot;
      return vm.res = this.fs;
    };

    ConfirmModal_scan.prototype.reboot = function() {
      var chain;
      chain = new Chain();
      chain.chain((function(_this) {
        return function() {
          return (new CommandRest(_this.sd.host)).reboot();
        };
      })(this));
      this.hide();
      return show_chain_progress(chain, true).fail((function(_this) {
        return function() {
          _this.sd.close_socket();
          return arr_remove(sds, _this.sd);
        };
      })(this));
    };

    return ConfirmModal_scan;

  })(Modal);

  ResDeleteModal = (function(_super) {
    __extends(ResDeleteModal, _super);

    function ResDeleteModal(prefix, page, res, lang) {
      this.page = page;
      this.res = res;
      this.lang = lang;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      ResDeleteModal.__super__.constructor.call(this, prefix, 'html/res_delete_modal.html');
    }

    ResDeleteModal.prototype.define_vm = function(vm) {
      vm.lang = this.lang;
      vm.res = this.res;
      return vm.submit = this.submit;
    };

    ResDeleteModal.prototype.rendered = function() {
      $(".chosen").chosen();
      return ResDeleteModal.__super__.rendered.call(this);
    };

    ResDeleteModal.prototype.submit = function() {
      var chain, opt;
      chain = this._submit((function() {
        var _i, _len, _ref, _results;
        _ref = $(".modal-body :selected");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opt = _ref[_i];
          _results.push($(opt).prop("value"));
        }
        return _results;
      })());
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    return ResDeleteModal;

  })(Modal);

  SyncDeleteModal = (function(_super) {
    __extends(SyncDeleteModal, _super);

    function SyncDeleteModal(sd, page, res) {
      this.sd = sd;
      this._submit = __bind(this._submit, this);
      SyncDeleteModal.__super__.constructor.call(this, "sync-delete-", page, res, lang.confirm_sync_modal);
    }

    SyncDeleteModal.prototype._submit = function(real_failed_volumes) {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain($.map(real_failed_volumes, (function(_this) {
        return function(v) {
          return function() {
            return (new SyncConfigRest(_this.sd.host)).sync_disable(v);
          };
        };
      })(this))).chain(this.sd.update("volumes"));
      return chain;
    };

    return SyncDeleteModal;

  })(ResDeleteModal);

  RaidDeleteModal = (function(_super) {
    __extends(RaidDeleteModal, _super);

    function RaidDeleteModal(sd, page, res) {
      this.sd = sd;
      this._submit = __bind(this._submit, this);
      RaidDeleteModal.__super__.constructor.call(this, "raid-delete-", page, res, lang.raid_delete_modal);
    }

    RaidDeleteModal.prototype._submit = function(deleted) {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain($.map(deleted, (function(_this) {
        return function(r) {
          return function() {
            return (new RaidRest(_this.sd.host))["delete"](r);
          };
        };
      })(this))).chain(this.sd.update("raids"));
      return chain;
    };

    return RaidDeleteModal;

  })(ResDeleteModal);

  RaidCreateDSUUI = (function(_super) {
    __extends(RaidCreateDSUUI, _super);

    function RaidCreateDSUUI(sd, parent_selector, enabled, on_quickmode) {
      var dsu, _i, _len, _ref;
      this.sd = sd;
      this.enabled = enabled != null ? enabled : ['data', 'spare'];
      this.on_quickmode = on_quickmode != null ? on_quickmode : false;
      this.rendered = __bind(this.rendered, this);
      this._gen_dsu_disks = __bind(this._gen_dsu_disks, this);
      this._update_disk_info = __bind(this._update_disk_info, this);
      this._update_disk_status = __bind(this._update_disk_status, this);
      this._belong_to_dsu = __bind(this._belong_to_dsu, this);
      this._gen_dsus = __bind(this._gen_dsus, this);
      this._tabid = __bind(this._tabid, this);
      this._get_opp_dsu = __bind(this._get_opp_dsu, this);
      this._find_dsu = __bind(this._find_dsu, this);
      this._find_disk = __bind(this._find_disk, this);
      this.check_disks = __bind(this.check_disks, this);
      this._collect_checked_disks = __bind(this._collect_checked_disks, this);
      this.get_disks = __bind(this.get_disks, this);
      this._uncheck_opp_dsu_disks = __bind(this._uncheck_opp_dsu_disks, this);
      this._count_dsu_checked_disks = __bind(this._count_dsu_checked_disks, this);
      this.getchunk = __bind(this.getchunk, this);
      this._calculatechunk = __bind(this._calculatechunk, this);
      this.watch_dsu_checked = __bind(this.watch_dsu_checked, this);
      this.disk_checkbox_click = __bind(this.disk_checkbox_click, this);
      this.active_tab = __bind(this.active_tab, this);
      this._translate = __bind(this._translate, this);
      this.disk_list = __bind(this.disk_list, this);
      this.dsu_checkbox_click = __bind(this.dsu_checkbox_click, this);
      this.define_vm = __bind(this.define_vm, this);
      RaidCreateDSUUI.__super__.constructor.call(this, "dsuui-", "html/raid_create_dsu_ui.html", parent_selector);
      _ref = this.vm.data_dsus;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dsu = _ref[_i];
        this.watch_dsu_checked(dsu);
      }
    }

    RaidCreateDSUUI.prototype.define_vm = function(vm) {
      vm.lang = lang.dsuui;
      vm.data_dsus = this._gen_dsus("data");
      vm.spare_dsus = this._gen_dsus("spare");
      vm.active_index = 0;
      vm.on_quickmode = this.on_quickmode;
      vm.disk_checkbox_click = this.disk_checkbox_click;
      vm.dsu_checkbox_click = this.dsu_checkbox_click;
      vm.data_enabled = __indexOf.call(this.enabled, 'data') >= 0;
      vm.spare_enabled = __indexOf.call(this.enabled, 'spare') >= 0;
      return vm.disk_list = this.disk_list;
    };

    RaidCreateDSUUI.prototype.dsu_checkbox_click = function(e) {
      return e.stopPropagation();
    };

    RaidCreateDSUUI.prototype.disk_list = function(disks) {
      if (disks.info === "none") {
        return "空盘";
      } else {
        return this._translate(disks.info);
      }
    };

    RaidCreateDSUUI.prototype._translate = function(obj) {
      var health, role, status;
      status = '';
      health = {
        'normal': '正常',
        'down': '下线',
        'failed': '损坏'
      };
      role = {
        'data': '数据盘',
        'spare': '热备盘',
        'unused': '未使用',
        'kicked': '损坏'
      };
      $.each(obj, function(key, val) {
        switch (key) {
          case 'cap_sector':
            return status += '容量: ' + fattr.cap(val) + '<br/>';
          case 'health':
            return status += '健康: ' + health[val] + '<br/>';
          case 'role':
            return status += '状态: ' + role[val] + '<br/>';
          case 'raid':
            if (val.length > 0) {
              return status += '阵列: ' + val + '<br/>';
            } else {
              return status += '阵列: 无';
            }
        }
      });
      return status;
    };

    RaidCreateDSUUI.prototype.active_tab = function(dsu_location) {
      var dsu, i, _i, _len, _ref, _results;
      _ref = this.vm.data_dsus;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        dsu = _ref[i];
        if (dsu.location === dsu_location) {
          _results.push(this.vm.active_index = i);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    RaidCreateDSUUI.prototype.disk_checkbox_click = function(e) {
      var dsu, dsus, dsutype, location, opp_dsu, opp_dsus, _ref;
      e.stopPropagation();
      location = $(e.target).data("location");
      if (location) {
        dsutype = $(e.target).data("dsutype");
        _ref = dsutype === "data" ? [this.vm.data_dsus, this.vm.spare_dsus] : [this.vm.spare_dsus, this.vm.data_dsus], dsus = _ref[0], opp_dsus = _ref[1];
        dsu = this._find_dsu(dsus, location);
        opp_dsu = this._find_dsu(opp_dsus, location);
        this._uncheck_opp_dsu_disks(dsu, opp_dsu);
        this._count_dsu_checked_disks(dsu);
        return this._count_dsu_checked_disks(opp_dsu);
      }

      /* if dsutype is "data"
           @_calculatechunk dsu
       else
           @_calculatechunk opp_dsu
       $("#dsuui").change()
       */
    };

    RaidCreateDSUUI.prototype.watch_dsu_checked = function(dsu) {
      return dsu.$watch('checked', (function(_this) {
        return function() {
          var col, disk, opp_dsu, _i, _j, _len, _len1, _ref;
          _ref = dsu.disks;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            col = _ref[_i];
            for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
              disk = col[_j];
              if (!disk.avail) {
                continue;
              }
              disk.checked = dsu.checked;
            }
          }
          opp_dsu = _this._get_opp_dsu(dsu);
          _this._uncheck_opp_dsu_disks(dsu, opp_dsu);
          _this._count_dsu_checked_disks(dsu);
          return _this._count_dsu_checked_disks(opp_dsu);
        };
      })(this));
    };

    RaidCreateDSUUI.prototype._calculatechunk = function(dsu) {
      var ck, nr;
      this._count_dsu_checked_disks(dsu);
      nr = dsu.count;
      if (nr <= 0) {
        return "64KB";
      } else if (nr === 1) {
        return "256KB";
      } else {
        ck = 512 / (nr - 1);
        if (ck > 16 && ck <= 32) {
          return "32KB";
        } else if (ck > 32 && ck <= 64) {
          return "64KB";
        } else if (ck > 64 && ck <= 128) {
          return "128KB";
        } else if (ck > 128) {
          return "256KB";
        }
      }
    };

    RaidCreateDSUUI.prototype.getchunk = function() {
      var chunk_value, dsu, _i, _len, _ref;
      chunk_value = [];
      _ref = this.vm.data_dsus;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dsu = _ref[_i];
        chunk_value.push(this._calculatechunk(dsu));
      }
      return chunk_value[0];
    };

    RaidCreateDSUUI.prototype._count_dsu_checked_disks = function(dsu) {
      var col, count, disk, _i, _j, _len, _len1, _ref;
      count = 0;
      _ref = dsu.disks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
          disk = col[_j];
          if (disk.checked) {
            count += 1;
          }
        }
      }
      return dsu.count = count;
    };

    RaidCreateDSUUI.prototype._uncheck_opp_dsu_disks = function(dsu, opp_dsu) {
      var col, disk, opp_disk, _i, _len, _ref, _results;
      _ref = dsu.disks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
            disk = col[_j];
            if (disk.checked) {
              opp_disk = this._find_disk([opp_dsu], disk.$model.location);
              _results1.push(opp_disk.checked = false);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    RaidCreateDSUUI.prototype.get_disks = function(type) {
      var dsus;
      if (type == null) {
        type = "data";
      }
      dsus = type === "data" ? this.vm.data_dsus : this.vm.spare_dsus;
      return this._collect_checked_disks(dsus);
    };

    RaidCreateDSUUI.prototype._collect_checked_disks = function(dsus) {
      var col, disk, disks, dsu, _i, _j, _k, _len, _len1, _len2, _ref;
      disks = [];
      for (_i = 0, _len = dsus.length; _i < _len; _i++) {
        dsu = dsus[_i];
        _ref = dsu.disks;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          col = _ref[_j];
          for (_k = 0, _len2 = col.length; _k < _len2; _k++) {
            disk = col[_k];
            if (disk.checked) {
              disks.push(disk.location);
            }
          }
        }
      }
      return disks;
    };

    RaidCreateDSUUI.prototype.check_disks = function(disks, type) {
      var checked, col, disk, dsu, dsus, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _results;
      if (type == null) {
        type = "data";
      }
      dsus = type === "data" ? this.vm.data_dsus : this.vm.spare_dsus;
      disks = $.isArray(disks) ? disks : [disks];
      for (_i = 0, _len = dsus.length; _i < _len; _i++) {
        dsu = dsus[_i];
        _ref = dsu.disks;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          col = _ref[_j];
          for (_k = 0, _len2 = col.length; _k < _len2; _k++) {
            disk = col[_k];
            for (_l = 0, _len3 = disks.length; _l < _len3; _l++) {
              checked = disks[_l];
              if (disk.location === checked.location) {
                disk.checked = true;
              }
            }
          }
        }
      }
      _results = [];
      for (_m = 0, _len4 = dsus.length; _m < _len4; _m++) {
        dsu = dsus[_m];
        _results.push(this._count_dsu_checked_disks(dsu));
      }
      return _results;
    };

    RaidCreateDSUUI.prototype._find_disk = function(dsus, location) {
      var col, disk, dsu, _i, _j, _k, _len, _len1, _len2, _ref;
      for (_i = 0, _len = dsus.length; _i < _len; _i++) {
        dsu = dsus[_i];
        _ref = dsu.disks;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          col = _ref[_j];
          for (_k = 0, _len2 = col.length; _k < _len2; _k++) {
            disk = col[_k];
            if (disk.$model.location === location) {
              return disk;
            }
          }
        }
      }
    };

    RaidCreateDSUUI.prototype._find_dsu = function(dsus, location) {
      var col, disk, dsu, _i, _j, _k, _len, _len1, _len2, _ref;
      for (_i = 0, _len = dsus.length; _i < _len; _i++) {
        dsu = dsus[_i];
        _ref = dsu.disks;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          col = _ref[_j];
          for (_k = 0, _len2 = col.length; _k < _len2; _k++) {
            disk = col[_k];
            if (disk.$model.location === location) {
              return dsu;
            }
          }
        }
      }
    };

    RaidCreateDSUUI.prototype._get_opp_dsu = function(dsu) {
      var opp_dsu, opp_dsus, _i, _len;
      opp_dsus = dsu.data ? this.vm.spare_dsus : this.vm.data_dsus;
      for (_i = 0, _len = opp_dsus.length; _i < _len; _i++) {
        opp_dsu = opp_dsus[_i];
        if (opp_dsu.location === dsu.location) {
          return opp_dsu;
        }
      }
    };

    RaidCreateDSUUI.prototype._tabid = function(tabid_prefix, dsu) {
      return "" + tabid_prefix + "_" + (dsu.location.replace('.', '_'));
    };

    RaidCreateDSUUI.prototype._gen_dsus = function(prefix) {
      var dsu;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.sd.dsus.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dsu = _ref[_i];
          _results.push({
            location: dsu.location,
            tabid: this._tabid(prefix, dsu),
            checked: false,
            disks: this._gen_dsu_disks(dsu),
            count: 0,
            data: prefix === 'data'
          });
        }
        return _results;
      }).call(this);
    };

    RaidCreateDSUUI.prototype._belong_to_dsu = function(disk, dsu) {
      return disk.location.indexOf(dsu.location) === 0;
    };

    RaidCreateDSUUI.prototype._update_disk_status = function(location, dsu) {
      var disk, _i, _len, _ref;
      _ref = this.sd.disks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        disk = _ref[_i];
        if (disk.location === location && this._belong_to_dsu(disk, dsu) && disk.raid === "" && disk.health !== "failed" && disk.role === "unused") {
          return true;
        }
      }
      return false;
    };

    RaidCreateDSUUI.prototype._update_disk_info = function(location, dsu) {
      var disk, info, _i, _len, _ref;
      info = [];
      _ref = this.sd.disks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        disk = _ref[_i];
        if (disk.location === location && this._belong_to_dsu(disk, dsu)) {
          info = {
            health: disk.health,
            cap_sector: disk.cap_sector,
            role: disk.role,
            raid: disk.raid
          };
          return info;
        }
      }
      return 'none';
    };

    RaidCreateDSUUI.prototype._gen_dsu_disks = function(dsu) {
      var cols, disks, i, j, location, o, _i, _j, _ref;
      disks = [];
      for (i = _i = 1; _i <= 4; i = ++_i) {
        cols = [];
        for (j = _j = 0, _ref = dsu.support_disk_nr / 4; 0 <= _ref ? _j < _ref : _j > _ref; j = 0 <= _ref ? ++_j : --_j) {
          location = "" + dsu.location + "." + (j * 4 + i);
          o = {
            location: location,
            avail: false,
            checked: false,
            offline: false,
            info: ""
          };
          o.avail = this._update_disk_status(location, dsu);
          o.info = this._update_disk_info(location, dsu);
          cols.push(o);
        }
        disks.push(cols);
      }
      return disks;
    };

    RaidCreateDSUUI.prototype.rendered = function() {
      return RaidCreateDSUUI.__super__.rendered.call(this);
    };

    return RaidCreateDSUUI;

  })(AvalonTemplUI);

  RaidSetDiskRoleModal = (function(_super) {
    __extends(RaidSetDiskRoleModal, _super);

    function RaidSetDiskRoleModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this._each_set_disk_role = __bind(this._each_set_disk_role, this);
      this.set_disk_role = __bind(this.set_disk_role, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RaidSetDiskRoleModal.__super__.constructor.call(this, "raid-set-disk-role-modal-", "html/raid_set_disk_role_modal.html", {
        style: "min-width:670px;"
      });
      this.raid = null;
    }

    RaidSetDiskRoleModal.prototype.define_vm = function(vm) {
      vm.lang = lang.raid_set_disk_role_modal;
      vm.raid_options = subitems(this.sd.raids.items, {
        name: ""
      });
      vm.role = "global_spare";
      vm.submit = this.submit;
      vm.select_visible = false;
      return vm.$watch("role", (function(_this) {
        return function() {
          return vm.select_visible = vm.role === "global_spare" ? false : true;
        };
      })(this));
    };

    RaidSetDiskRoleModal.prototype.rendered = function() {
      RaidSetDiskRoleModal.__super__.rendered.call(this);
      this.dsuui = new RaidCreateDSUUI(this.sd, "#dsuui", ['spare']);
      this.dsuui.attach();
      this.add_child(this.dsuui);
      $("input:radio").uniform();
      $("#raid-select").chosen();
      $.validator.addMethod("min-spare-disks", (function(_this) {
        return function(val, element) {
          var nr;
          nr = _this.dsuui.get_disks("spare").length;
          if (nr === 0) {
            return false;
          } else {
            return true;
          }
        };
      })(this));
      return $("form.raid").validate(valid_opt({
        rules: {
          "spare-disks-checkbox": {
            "min-spare-disks": true
          }
        },
        messages: {
          "spare-disks-checkbox": {
            "min-spare-disks": "至少需要1块热备盘"
          }
        }
      }));
    };

    RaidSetDiskRoleModal.prototype.submit = function() {
      var chosen, raid;
      raid = null;
      if (this.vm.select_visible) {
        chosen = $("#raid-select");
        raid = chosen.val();
      }
      return this.set_disk_role(this.dsuui.get_disks("spare"), this.vm.role, raid);
    };

    RaidSetDiskRoleModal.prototype.set_disk_role = function(disks, role, raid) {
      var chain, disk, _i, _len;
      chain = new Chain;
      for (_i = 0, _len = disks.length; _i < _len; _i++) {
        disk = disks[_i];
        chain.chain(this._each_set_disk_role(disk, role, raid));
      }
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    RaidSetDiskRoleModal.prototype._each_set_disk_role = function(disk, role, raid) {
      return (function(_this) {
        return function() {
          return (new DiskRest(_this.sd.host)).set_disk_role(disk, role, raid);
        };
      })(this);
    };

    return RaidSetDiskRoleModal;

  })(Modal);

  RaidCreateModal = (function(_super) {
    __extends(RaidCreateModal, _super);

    function RaidCreateModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.prefer_dsu_location = __bind(this.prefer_dsu_location, this);
      this.count_dsu_disks = __bind(this.count_dsu_disks, this);
      this.create = __bind(this.create, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RaidCreateModal.__super__.constructor.call(this, "raid-create-modal-", "html/raid_create_modal.html", {
        style: "min-width:670px;"
      });
    }

    RaidCreateModal.prototype.define_vm = function(vm) {
      vm.lang = lang.raid_create_modal;
      vm.name = "";
      vm.level = "5";
      vm.rebuild_priority = "low";
      vm.sync = false;
      return vm.submit = this.submit;
    };

    RaidCreateModal.prototype.rendered = function() {
      var Raids, cap_sector, count, disk, dsu, i, j, k, raid, raids, s, total, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      RaidCreateModal.__super__.rendered.call(this);
      this.dsuui = new RaidCreateDSUUI(this.sd, "#dsuui");
      this.dsuui.attach();
      this.add_child(this.dsuui);
      $("input:radio").uniform();
      $(".basic-toggle-button").toggleButtons();
      $("#sync").change((function(_this) {
        return function() {
          return _this.vm.sync = $("#sync").prop("checked");
        };
      })(this));
      dsu = this.prefer_dsu_location();
      _ref = (function() {
        var _i, _len, _ref, _results;
        _ref = this.sd.disks.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          disk = _ref[_i];
          if (disk.role === 'unused' && disk.location.indexOf(dsu) === 0) {
            _results.push(disk);
          }
        }
        return _results;
      }).call(this), raids = 1 <= _ref.length ? __slice.call(_ref, 0) : [];
      _ref1 = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = raids.length; _i < _len; _i++) {
          raid = raids[_i];
          _results.push(raid.cap_sector);
        }
        return _results;
      })(), cap_sector = 1 <= _ref1.length ? __slice.call(_ref1, 0) : [];
      total = [];
      cap_sector.sort();
      for (i = _i = 0, _ref2 = cap_sector.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        count = 0;
        for (j = _j = 0, _ref3 = cap_sector.length; 0 <= _ref3 ? _j < _ref3 : _j > _ref3; j = 0 <= _ref3 ? ++_j : --_j) {
          if (cap_sector[i] === cap_sector[j]) {
            count++;
          }
        }
        total.push([cap_sector[i], count]);
        i += count;
      }
      for (k = _k = 0, _ref4 = total.length; 0 <= _ref4 ? _k < _ref4 : _k > _ref4; k = 0 <= _ref4 ? ++_k : --_k) {
        if (total[k][1] >= 3) {
          _ref5 = (function() {
            var _l, _len, _results;
            _results = [];
            for (_l = 0, _len = raids.length; _l < _len; _l++) {
              disk = raids[_l];
              if (disk.cap_sector === total[k][0]) {
                _results.push(disk);
              }
            }
            return _results;
          })(), Raids = 1 <= _ref5.length ? __slice.call(_ref5, 0) : [];
          for (s = _l = 0; _l < 3; s = ++_l) {
            this.dsuui.check_disks(Raids[s]);
            this.dsuui.active_tab(dsu);
          }
          break;
        }
      }
      $.validator.addMethod("min-raid-disks", (function(_this) {
        return function(val, element) {
          var level, nr;
          level = parseInt(_this.vm.level);
          nr = _this.dsuui.get_disks().length;
          if (level === 5 && nr < 3) {
            return false;
          } else if (level === 0 && nr < 1) {
            return false;
          } else if (level === 1 && nr !== 2) {
            return false;
          } else if (level === 10 && nr % 2 !== 0 && nr > 0) {
            return false;
          } else {
            return true;
          }
        };
      })(this), (function(_this) {
        return function(params, element) {
          var level, nr;
          level = parseInt(_this.vm.level);
          nr = _this.dsuui.get_disks().length;
          if (level === 5 && nr < 3) {
            return "级别5阵列最少需要3块磁盘";
          } else if (level === 0 && nr < 1) {
            return "级别0阵列最少需要1块磁盘";
          } else if (level === 1 && nr !== 2) {
            return "级别1阵列仅支持2块磁盘";
          } else if (level === 10 && nr % 2 !== 0 && nr > 0) {
            return "级别10阵列数据盘必须是偶数个";
          }
        };
      })(this));
      $.validator.addMethod("spare-disks-support", (function(_this) {
        return function(val, element) {
          var level, nr;
          level = parseInt(_this.vm.level);
          nr = _this.dsuui.get_disks("spare").length;
          if (level === 0 && nr > 0) {
            return false;
          } else if (level === 10 && nr > 0) {
            return false;
          } else {
            return true;
          }
        };
      })(this), (function(_this) {
        return function(params, element) {
          var level, nr;
          level = parseInt(_this.vm.level);
          nr = _this.dsuui.get_disks("spare").length;
          if (level === 0 && nr > 0) {
            return '级别0阵列不支持热备盘';
          } else if (level === 10 && nr > 0) {
            return '级别10阵列不支持热备盘';
          }
        };
      })(this));
      $.validator.addMethod("min-cap-spare-disks", (function(_this) {
        return function(val, element) {
          var d, data_disks, level, loc, map, min_cap, spare_disks, _len, _len1, _m, _n, _ref6;
          level = parseInt(_this.vm.level);
          if (level !== 5) {
            return true;
          }
          map = {};
          _ref6 = _this.sd.disks.items;
          for (_m = 0, _len = _ref6.length; _m < _len; _m++) {
            disk = _ref6[_m];
            map[disk.location] = disk;
          }
          spare_disks = (function() {
            var _len1, _n, _ref7, _results;
            _ref7 = this.dsuui.get_disks("spare");
            _results = [];
            for (_n = 0, _len1 = _ref7.length; _n < _len1; _n++) {
              loc = _ref7[_n];
              _results.push(map[loc]);
            }
            return _results;
          }).call(_this);
          data_disks = (function() {
            var _len1, _n, _ref7, _results;
            _ref7 = this.dsuui.get_disks();
            _results = [];
            for (_n = 0, _len1 = _ref7.length; _n < _len1; _n++) {
              loc = _ref7[_n];
              _results.push(map[loc]);
            }
            return _results;
          }).call(_this);
          min_cap = Math.min.apply(null, (function() {
            var _len1, _n, _results;
            _results = [];
            for (_n = 0, _len1 = data_disks.length; _n < _len1; _n++) {
              d = data_disks[_n];
              _results.push(d.cap_sector);
            }
            return _results;
          })());
          for (_n = 0, _len1 = spare_disks.length; _n < _len1; _n++) {
            s = spare_disks[_n];
            if (s.cap_sector < min_cap) {
              return false;
            }
          }
          return true;
        };
      })(this), "热备盘容量太小");
      return $("form.raid").validate(valid_opt({
        rules: {
          name: {
            required: true,
            regex: "^[_a-zA-Z][-_a-zA-Z0-9]*$",
            duplicated: this.sd.raids.items,
            maxlength: 64
          },
          "raid-disks-checkbox": {
            "min-raid-disks": true,
            maxlength: 24
          },
          "spare-disks-checkbox": {
            "spare-disks-support": true,
            "min-cap-spare-disks": true
          }
        },
        messages: {
          name: {
            required: "请输入阵列名称",
            duplicated: "阵列名称已存在",
            maxlength: "阵列名称长度不能超过64个字母"
          },
          "raid-disks-checkbox": {
            maxlength: "阵列最多支持24个磁盘"
          }
        }
      }));
    };

    RaidCreateModal.prototype.submit = function() {
      if ($("form.raid").validate().form()) {
        return this.create(this.vm.name, this.vm.level, this.dsuui.getchunk(), this.dsuui.get_disks(), this.dsuui.get_disks("spare"), this.vm.rebuild_priority, this.vm.sync);
      }
    };

    RaidCreateModal.prototype.create = function(name, level, chunk, raid_disks, spare_disks, rebuild, sync) {
      var chain;
      this.page.frozen();
      raid_disks = raid_disks.join(",");
      spare_disks = spare_disks.join(",");
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new RaidRest(_this.sd.host)).create({
            name: name,
            level: level,
            chunk: chunk,
            raid_disks: raid_disks,
            spare_disks: spare_disks,
            rebuild_priority: rebuild,
            sync: sync,
            cache: ''
          });
        };
      })(this)).chain(this.sd.update("raids"));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    RaidCreateModal.prototype.count_dsu_disks = function(dsu) {
      var disk;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.sd.disks.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          disk = _ref[_i];
          if (disk.role === 'unused' && disk.location.indexOf(dsu.location) === 0) {
            _results.push(disk);
          }
        }
        return _results;
      }).call(this)).length;
    };

    RaidCreateModal.prototype.prefer_dsu_location = function() {
      var dsu, _i, _len, _ref;
      _ref = this.sd.dsus.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dsu = _ref[_i];
        if (this.count_dsu_disks(dsu) >= 3) {
          return dsu.location;
        }
      }
      if (this.sd.dsus.length) {
        return this.sd.dsus.items[0].location;
      } else {
        return '_';
      }
    };

    return RaidCreateModal;

  })(Modal);

  VolumeDeleteModal = (function(_super) {
    __extends(VolumeDeleteModal, _super);

    function VolumeDeleteModal(sd, page, res) {
      this.sd = sd;
      this._submit = __bind(this._submit, this);
      VolumeDeleteModal.__super__.constructor.call(this, "volume-delete-", page, res, lang.volume_delete_modal);
    }

    VolumeDeleteModal.prototype._submit = function(deleted) {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain($.map(deleted, (function(_this) {
        return function(v) {
          return function() {
            return (new VolumeRest(_this.sd.host))["delete"](v);
          };
        };
      })(this))).chain(this.sd.update('volumes'));
      return chain;
    };

    return VolumeDeleteModal;

  })(ResDeleteModal);

  VolumeCreateModal = (function(_super) {
    __extends(VolumeCreateModal, _super);

    function VolumeCreateModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.sync = __bind(this.sync, this);
      this.create = __bind(this.create, this);
      this.submit = __bind(this.submit, this);
      this.raid_options = __bind(this.raid_options, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      VolumeCreateModal.__super__.constructor.call(this, "volume-create-modal-", "html/volume_create_modal.html");
    }

    VolumeCreateModal.prototype.define_vm = function(vm) {
      this._settings = new (require("settings").Settings);
      vm.lang = lang.volume_create_modal;
      vm.volume_name = "";
      vm.raid_options = this.raid_options();
      vm.raid = $.extend({}, this.sd.raids.items[0]);
      vm.fattr_cap_usage = fattr.cap_usage;
      vm.cap = sector_to_gb(vm.raid.cap_sector - vm.raid.used_cap_sector);
      vm.unit = "GB";
      vm.automap = false;
      vm.initr_wwn = "";
      vm.submit = this.submit;
      vm.$watch("raid", (function(_this) {
        return function() {
          if (vm.unit === "MB") {
            return vm.cap = sector_to_mb(vm.raid.cap_sector - vm.raid.used_cap_sector);
          } else if (vm.unit === "GB") {
            return vm.cap = sector_to_gb(vm.raid.cap_sector - vm.raid.used_cap_sector);
          } else {
            return vm.cap = sector_to_tb(vm.raid.cap_sector - vm.raid.used_cap_sector);
          }
        };
      })(this));
      vm.$watch("unit", (function(_this) {
        return function() {
          if (vm.unit === "MB") {
            return vm.cap = sector_to_mb(vm.raid.cap_sector - vm.raid.used_cap_sector);
          } else if (vm.unit === "GB") {
            return vm.cap = sector_to_gb(vm.raid.cap_sector - vm.raid.used_cap_sector);
          } else {
            return vm.cap = sector_to_tb(vm.raid.cap_sector - vm.raid.used_cap_sector);
          }
        };
      })(this));
      return vm.$watch("volume_name", (function(_this) {
        return function() {
          return vm.initr_wwn = "" + prefix_wwn + ":" + vm.volume_name;
        };
      })(this));
    };

    VolumeCreateModal.prototype.rendered = function() {
      var chosen;
      VolumeCreateModal.__super__.rendered.call(this);
      $("input:radio").uniform();
      $(".basic-toggle-button").toggleButtons();
      $("#raid-select").chosen();
      $("#automap").change((function(_this) {
        return function() {
          return _this.vm.automap = $("#automap").prop("checked");
        };
      })(this));
      chosen = $("#raid-select");
      chosen.change((function(_this) {
        return function() {
          _this.vm.raid = $.extend({}, _this.sd.raids.get(chosen.val()));
          return $("form.volume").validate().element($("#cap"));
        };
      })(this));
      $.validator.addMethod("capacity", (function(_this) {
        return function(val, elem) {
          var alloc_cap, free_cap;
          free_cap = _this.vm.raid.cap_sector - _this.vm.raid.used_cap_sector;
          alloc_cap = cap_to_sector(_this.vm.cap, _this.vm.unit);
          if (alloc_cap < mb_to_sector(1024)) {
            return false;
          } else if (alloc_cap > free_cap) {
            return false;
          } else {
            return true;
          }
        };
      })(this), (function(_this) {
        return function(params, elem) {
          var alloc_cap, free_cap;
          free_cap = _this.vm.raid.cap_sector - _this.vm.raid.used_cap_sector;
          alloc_cap = cap_to_sector(_this.vm.cap, _this.vm.unit);
          if (alloc_cap < mb_to_sector(1024)) {
            return "虚拟磁盘最小容量必须大于等于1024MB";
          } else if (alloc_cap > free_cap) {
            return "分配容量大于阵列的剩余容量";
          }
        };
      })(this));
      return $("form.volume").validate(valid_opt({
        rules: {
          name: {
            required: true,
            regex: '^[_a-zA-Z][-_a-zA-Z0-9]*$',
            duplicated: this.sd.volumes.items,
            maxlength: 64
          },
          capacity: {
            required: true,
            regex: "^\\d+(\.\\d+)?$",
            capacity: true
          },
          wwn: {
            required: true,
            regex: '^(iqn.2013-01.net.zbx.initiator:)+[_a-zA-Z0-9]*$',
            maxlength: 96
          }
        },
        messages: {
          name: {
            required: "请输入虚拟磁盘名称",
            duplicated: "虚拟磁盘名称已存在",
            maxlength: "虚拟磁盘名称长度不能超过64个字母"
          },
          capacity: {
            required: "请输入虚拟磁盘容量"
          },
          wwn: {
            required: "请输入客户端名称",
            maxlength: "客户端名称长度不能超过96个字母"
          }
        }
      }));
    };

    VolumeCreateModal.prototype.raid_options = function() {
      var i, raids, raids_availble, _i, _len;
      raids_availble = [];
      raids = subitems(this.sd.raids.items, {
        id: "",
        name: "",
        health: "normal"
      });
      for (_i = 0, _len = raids.length; _i < _len; _i++) {
        i = raids[_i];
        if (i.health === "normal") {
          raids_availble.push(i);
        }
      }
      return raids_availble;
    };

    VolumeCreateModal.prototype.submit = function() {
      if ($("form.volume").validate().form()) {
        this.create(this.vm.volume_name, this.vm.raid.name, "" + this.vm.cap + this.vm.unit, this.vm.automap, this.vm.initr_wwn);
        if (this._settings.sync) {
          return this.sync(this.vm.volume_name);
        }
      }
    };

    VolumeCreateModal.prototype.create = function(name, raid, cap, automap, wwn) {
      var chain, n, portals, _i, _len, _ref;
      this.page.frozen();
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new VolumeRest(_this.sd.host)).create({
            name: name,
            raid: raid,
            capacity: cap
          });
        };
      })(this));
      if (automap) {
        if (!this.sd.initrs.get(wwn)) {
          _ref = this.sd.networks.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            n = _ref[_i];
            if (n.link && n.ipaddr !== "") {
              portals = n.iface;
              break;
            }
          }
          chain.chain((function(_this) {
            return function() {
              return (new InitiatorRest(_this.sd.host)).create({
                wwn: wwn,
                portals: portals
              });
            };
          })(this));
        }
        chain.chain((function(_this) {
          return function() {
            return (new InitiatorRest(_this.sd.host)).map(wwn, name);
          };
        })(this));
      }
      chain.chain(this.sd.update('volumes'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    VolumeCreateModal.prototype.sync = function(name) {
      var chain;
      this.page.frozen();
      chain = new Chain();
      chain.chain((function(_this) {
        return function() {
          return (new SyncConfigRest(_this.sd.host)).sync_enable(name);
        };
      })(this));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    return VolumeCreateModal;

  })(Modal);

  InitrDeleteModal = (function(_super) {
    __extends(InitrDeleteModal, _super);

    function InitrDeleteModal(sd, page, res) {
      this.sd = sd;
      this._submit = __bind(this._submit, this);
      InitrDeleteModal.__super__.constructor.call(this, "initr-delete-", page, res, lang.initr_delete_modal);
    }

    InitrDeleteModal.prototype._submit = function(deleted) {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain($.map(deleted, (function(_this) {
        return function(v) {
          return function() {
            return (new InitiatorRest(_this.sd.host))["delete"](v);
          };
        };
      })(this)));
      chain.chain(this.sd.update('initrs'));
      return chain;
    };

    return InitrDeleteModal;

  })(ResDeleteModal);

  InitrCreateModal = (function(_super) {
    __extends(InitrCreateModal, _super);

    function InitrCreateModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.create = __bind(this.create, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this._able_bonding = __bind(this._able_bonding, this);
      this.subitems = __bind(this.subitems, this);
      this.define_vm = __bind(this.define_vm, this);
      InitrCreateModal.__super__.constructor.call(this, "initr-create-modal-", "html/initr_create_modal.html");
      this.vm.show_iscsi = this._iscsi.iScSiAvalable() && !this._settings.fc ? true : false;
    }

    InitrCreateModal.prototype.define_vm = function(vm) {
      this._settings = new (require("settings").Settings);
      this._iscsi = new IScSiManager;
      vm.portals = this.subitems();
      vm.lang = lang.initr_create_modal;
      vm.initr_wwn = this._genwwn();
      vm.initr_wwpn = this._genwwpn();
      vm.show_iscsi = this.show_iscsi;
      vm.submit = this.submit;
      return $(this.sd.networks.items).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.portals = _this.subitems();
        };
      })(this));
    };

    InitrCreateModal.prototype.subitems = function() {
      var eth, items, removable, _i, _len;
      items = subitems(this.sd.networks.items, {
        id: "",
        ipaddr: "",
        iface: "",
        netmask: "",
        type: "",
        checked: false
      });
      removable = [];
      if (!this._able_bonding()) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          eth = items[_i];
          if (eth.type !== "bond-slave") {
            removable.push(eth);
          }
        }
        return removable;
      }
      return items;
    };

    InitrCreateModal.prototype._able_bonding = function() {
      var eth, _i, _len, _ref;
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eth = _ref[_i];
        if ((eth.type.indexOf("bond")) !== -1) {
          return false;
        }
      }
      return true;
    };

    InitrCreateModal.prototype._genwwn = function() {
      var s1, s2, s3, wwn_prefix;
      wwn_prefix = 'iqn.2013-01.net.zbx.initiator';
      s1 = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      s2 = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      s3 = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      return "" + wwn_prefix + ":" + s1 + s2 + s3;
    };

    InitrCreateModal.prototype._genwwpn = function() {
      var i, s, s1, _i;
      s = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(3);
      for (i = _i = 1; _i <= 7; i = ++_i) {
        s1 = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(3);
        s = "" + s + ":" + s1;
      }
      return s;
    };

    InitrCreateModal.prototype.rendered = function() {
      InitrCreateModal.__super__.rendered.call(this);
      return $("form.initr").validate(valid_opt({
        rules: {
          wwpn: {
            required: true,
            regex: '^([0-9a-z]{2}:){7}[0-9a-z]{2}$',
            duplicated: this.sd.initrs.items,
            maxlength: 96
          },
          wwn: {
            required: true,
            regex: '^(iqn.2013-01.net.zbx.initiator:)(.*)$',
            duplicated: this.sd.initrs.items,
            maxlength: 96
          },
          'eth-checkbox': {
            required: !this._settings.fc,
            minlength: 1
          }
        },
        messages: {
          wwpn: {
            required: "请输入客户端名称",
            duplicated: "客户端名称已存在",
            maxlength: "客户端名称长度不能超过96个字母"
          },
          wwn: {
            required: "请输入客户端名称",
            duplicated: "客户端名称已存在",
            maxlength: "客户端名称长度不能超过96个字母"
          },
          'eth-checkbox': "请选择至少一个网口"
        }
      }));
    };

    InitrCreateModal.prototype.submit = function() {
      var i, portals, _i, _len, _ref;
      if ($("form.initr").validate().form()) {
        portals = [];
        _ref = this.vm.portals;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            portals.push(i.$model.iface);
          }
        }
        if (this._settings.fc) {
          return this.create(this.vm.initr_wwpn, portals = "");
        } else {
          return this.create(this.vm.initr_wwn, portals.join(","));
        }
      }
    };

    InitrCreateModal.prototype.create = function(wwn, portals) {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new InitiatorRest(_this.sd.host)).create({
            wwn: wwn,
            portals: portals
          });
        };
      })(this));
      chain.chain(this.sd.update('initrs'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    return InitrCreateModal;

  })(Modal);

  VolumeMapModal = (function(_super) {
    __extends(VolumeMapModal, _super);

    function VolumeMapModal(sd, page, initr) {
      this.sd = sd;
      this.page = page;
      this.initr = initr;
      this._eachMap = __bind(this._eachMap, this);
      this.map = __bind(this.map, this);
      this.subitems = __bind(this.subitems, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      VolumeMapModal.__super__.constructor.call(this, "volume-map-modal-", "html/volume_map_modal.html");
    }

    VolumeMapModal.prototype.define_vm = function(vm) {
      vm.volumes = this.subitems();
      vm.lang = lang.volume_map_modal;
      vm.all_checked = false;
      vm.submit = this.submit;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.volumes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    VolumeMapModal.prototype.rendered = function() {
      VolumeMapModal.__super__.rendered.call(this);
      return $("form.map-volumes").validate(valid_opt({
        rules: {
          'volume-checkbox': {
            required: true,
            minlength: 1
          }
        },
        messages: {
          'volume-checkbox': "请选择至少一个虚拟磁盘"
        }
      }));
    };

    VolumeMapModal.prototype.submit = function() {
      var i, selecteds, _i, _len, _ref;
      if ($("form.map-volumes").validate().form()) {
        selecteds = [];
        _ref = this.vm.volumes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            selecteds.push(i.$model.name);
          }
        }
        return this.map(this.initr.wwn, selecteds);
      }
    };

    VolumeMapModal.prototype.subitems = function() {
      var i, items, volumes_available, _i, _len;
      volumes_available = [];
      items = subitems(this.sd.spare_volumes(), {
        id: "",
        name: "",
        health: "",
        cap_sector: "",
        checked: false
      });
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        if (i.health === "normal") {
          volumes_available.push(i);
        }
      }
      return volumes_available;
    };

    VolumeMapModal.prototype.map = function(wwn, volumes) {
      var chain, volume, _i, _len;
      this.page.frozen();
      chain = new Chain;
      for (_i = 0, _len = volumes.length; _i < _len; _i++) {
        volume = volumes[_i];
        chain.chain(this._eachMap(wwn, volume));
      }
      chain.chain(this.sd.update('initrs'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    VolumeMapModal.prototype._eachMap = function(wwn, volume) {
      return (function(_this) {
        return function() {
          return (new InitiatorRest(_this.sd.host)).map(wwn, volume);
        };
      })(this);
    };

    return VolumeMapModal;

  })(Modal);

  VolumeUnmapModal = (function(_super) {
    __extends(VolumeUnmapModal, _super);

    function VolumeUnmapModal(sd, page, initr) {
      this.sd = sd;
      this.page = page;
      this.initr = initr;
      this._eachunmap = __bind(this._eachunmap, this);
      this.unmap = __bind(this.unmap, this);
      this.subitems = __bind(this.subitems, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      VolumeUnmapModal.__super__.constructor.call(this, "volume-unmap-modal-", "html/volume_map_modal.html");
    }

    VolumeUnmapModal.prototype.define_vm = function(vm) {
      vm.volumes = this.subitems();
      vm.lang = lang.volume_unmap_modal;
      vm.all_checked = false;
      vm.submit = this.submit;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.volumes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    VolumeUnmapModal.prototype.rendered = function() {
      VolumeUnmapModal.__super__.rendered.call(this);
      return $("form.map-volumes").validate(valid_opt({
        rules: {
          'volume-checkbox': {
            required: true,
            minlength: 1
          }
        },
        messages: {
          'volume-checkbox': "请选择至少一个虚拟磁盘"
        }
      }));
    };

    VolumeUnmapModal.prototype.submit = function() {
      var i, selecteds, _i, _len, _ref;
      if ($("form.map-volumes").validate().form()) {
        selecteds = [];
        _ref = this.vm.volumes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            selecteds.push(i.$model.name);
          }
        }
        return this.unmap(this.initr.wwn, selecteds);
      }
    };

    VolumeUnmapModal.prototype.subitems = function() {
      var items;
      return items = subitems(this.sd.initr_volumes(this.initr), {
        id: "",
        name: "",
        health: "",
        cap_sector: "",
        checked: false
      });
    };

    VolumeUnmapModal.prototype.unmap = function(wwn, volumes) {
      var chain, volume, _i, _len;
      this.page.frozen();
      chain = new Chain;
      for (_i = 0, _len = volumes.length; _i < _len; _i++) {
        volume = volumes[_i];
        chain.chain(this._eachunmap(wwn, volume));
      }
      chain.chain(this.sd.update('initrs'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    VolumeUnmapModal.prototype._eachunmap = function(wwn, volume) {
      return (function(_this) {
        return function() {
          return (new InitiatorRest(_this.sd.host)).unmap(wwn, volume);
        };
      })(this);
    };

    return VolumeUnmapModal;

  })(Modal);

  EthBondingModal = (function(_super) {
    __extends(EthBondingModal, _super);

    function EthBondingModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      EthBondingModal.__super__.constructor.call(this, "Eth-bonding-modal-", "html/eth_bonding_modal.html");
    }

    EthBondingModal.prototype.define_vm = function(vm) {
      vm.lang = lang.eth_bonding_modal;
      vm.options = [
        {
          key: "负载均衡模式",
          value: "balance-rr"
        }, {
          key: "主备模式",
          value: "active-backup"
        }
      ];
      vm.submit = this.submit;
      vm.ip = "";
      return vm.netmask = "255.255.255.0";
    };

    EthBondingModal.prototype.rendered = function() {
      var Netmask;
      EthBondingModal.__super__.rendered.call(this);
      $("#eth-bonding").chosen();
      Netmask = require("netmask").Netmask;
      $.validator.addMethod("validIP", (function(_this) {
        return function(val, element) {
          var error, n, regex;
          regex = /^\d{1,3}(\.\d{1,3}){3}$/;
          if (!regex.test(val)) {
            return false;
          }
          try {
            n = new Netmask(_this.vm.ip, _this.vm.netmask);
            return true;
          } catch (_error) {
            error = _error;
            return false;
          }
        };
      })(this));
      return $("form.eth-bonding").validate(valid_opt({
        rules: {
          ip: {
            required: true,
            validIP: true
          },
          netmask: {
            required: true,
            validIP: true
          }
        },
        messages: {
          ip: {
            required: "请输入IP地址",
            validIP: "无效IP地址"
          },
          netmask: {
            required: "请输入子网掩码",
            validIP: "无效子网掩码"
          }
        }
      }));
    };

    EthBondingModal.prototype.submit = function() {
      var chain;
      if ($("form.eth-bonding").validate().form()) {
        this.page.frozen();
        this.page.dview.reconnect = true;
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            var rest, selected;
            selected = $("#eth-bonding").val();
            rest = new NetworkRest(_this.sd.host);
            return rest.create_eth_bonding(_this.vm.ip, _this.vm.netmask, selected);
          };
        })(this));
        this.hide();
        return show_chain_progress(chain, true).fail((function(_this) {
          return function() {
            var index;
            index = window.adminview.find_nav_index(_this.page.dview.menuid);
            if (index !== -1) {
              return window.adminview.remove_tab(index);
            }

            /*
            @page.settings.removeLoginedMachine @page.dview.host
            @sd.close_socket()
            arr_remove sds, @sd
            @page.attach()
            @page.dview.switch_to_login_page()
             */
          };
        })(this));
      }
    };

    return EthBondingModal;

  })(Modal);

  FsCreateModal = (function(_super) {
    __extends(FsCreateModal, _super);

    function FsCreateModal(sd, page, volname) {
      this.sd = sd;
      this.page = page;
      this.volname = volname;
      this.enable_fs = __bind(this.enable_fs, this);
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FsCreateModal.__super__.constructor.call(this, "fs-create-modal-", "html/fs_create_modal.html");
    }

    FsCreateModal.prototype.define_vm = function(vm) {
      vm.mount_dirs = this.subitems();
      vm.lang = lang.fs_create_modal;
      return vm.submit = this.submit;
    };

    FsCreateModal.prototype.rendered = function() {
      FsCreateModal.__super__.rendered.call(this);
      return $("form.fs").validate(valid_opt({
        rules: {
          'dir-checkbox': {
            required: true,
            maxlength: 1
          }
        },
        messages: {
          'dir-checkbox': "请选择一个目录作为挂载点"
        }
      }));
    };

    FsCreateModal.prototype.subitems = function() {
      var fs_o, i, items, name, o, used_names, _i, _j, _len, _ref;
      items = [];
      used_names = [];
      _ref = this.sd.filesystem.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fs_o = _ref[_i];
        used_names.push(fs_o.name);
      }
      for (i = _j = 1; _j <= 2; i = ++_j) {
        name = "myfs" + i;
        if (__indexOf.call(used_names, name) >= 0) {
          o = {
            path: "/share/vol" + i,
            used: true,
            checked: false,
            fsname: name
          };
        } else {
          o = {
            path: "/share/vol" + i,
            used: false,
            checked: false,
            fsname: name
          };
        }
        items.push(o);
      }
      return items;
    };

    FsCreateModal.prototype.submit = function() {
      var dir, dir_to_mount, _i, _len, _ref;
      if ($("form.fs").validate().form()) {
        dir_to_mount = "";
        _ref = this.vm.mount_dirs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dir = _ref[_i];
          if (dir.checked) {
            dir_to_mount = dir.fsname;
          }
        }
        return this.enable_fs(dir_to_mount);
      }
    };

    FsCreateModal.prototype.enable_fs = function(dir) {
      var chain;
      if (dir === '') {
        this.hide();
        return (new MessageModal(lang.volume_warning.over_max_fs)).attach();
      } else {
        this.page.frozen();
        chain = new Chain();
        chain.chain((function(_this) {
          return function() {
            return (new FileSystemRest(_this.sd.host)).create_cy(dir, _this.volname);
          };
        })(this)).chain(this.sd.update("filesystem"));
        this.hide();
        return show_chain_progress(chain).done((function(_this) {
          return function() {
            return _this.page.attach();
          };
        })(this));
      }
    };

    return FsCreateModal;

  })(Modal);

  FsChooseModal = (function(_super) {
    __extends(FsChooseModal, _super);

    function FsChooseModal(sd, page, fsname, volname) {
      this.sd = sd;
      this.page = page;
      this.fsname = fsname;
      this.volname = volname;
      this.enable_fs = __bind(this.enable_fs, this);
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FsChooseModal.__super__.constructor.call(this, "fs-choose-modal-", "html/fs_choose_modal.html");
    }

    FsChooseModal.prototype.define_vm = function(vm) {
      vm.filesystems = this.subitems();
      vm.lang = lang.fs_choose_modal;
      return vm.submit = this.submit;
    };

    FsChooseModal.prototype.rendered = function() {
      FsChooseModal.__super__.rendered.call(this);
      return $("form.filesystems").validate(valid_opt({
        rules: {
          'fs-checkbox': {
            required: true,
            maxlength: 1
          }
        },
        messages: {
          'fs-checkbox': "请选择一个文件系统类型"
        }
      }));
    };

    FsChooseModal.prototype.subitems = function() {
      var items, o;
      items = [];
      o = {
        used: true,
        checked: false,
        type: "monfs",
        fsname: "视频文件系统"
      };
      items.push(o);
      o = {
        used: true,
        checked: false,
        type: "xfs",
        fsname: "通用文件系统"
      };
      items.push(o);
      return items;
    };

    FsChooseModal.prototype.submit = function() {
      var filesystem, fs_type, _i, _len, _ref;
      if ($("form.filesystems").validate().form()) {
        fs_type = "";
        _ref = this.vm.filesystems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filesystem = _ref[_i];
          if (filesystem.checked) {
            fs_type = filesystem.type;
          }
        }
        return this.enable_fs(fs_type);
      }
    };

    FsChooseModal.prototype.enable_fs = function(fs_type) {
      var chain;
      this.page.frozen();
      chain = new Chain();
      chain.chain((function(_this) {
        return function() {
          return (new FileSystemRest(_this.sd.host)).create(_this.fsname, fs_type, _this.volname);
        };
      })(this)).chain(this.sd.update("filesystem"));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return _this.page.attach();
        };
      })(this));
    };

    return FsChooseModal;

  })(Modal);

  CentralCreateServerModal = (function(_super) {
    __extends(CentralCreateServerModal, _super);

    function CentralCreateServerModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this._check = __bind(this._check, this);
      this.close_alert = __bind(this.close_alert, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralCreateServerModal.__super__.constructor.call(this, "central-server-modal-", "html/central_create_server_modal.html");
    }

    CentralCreateServerModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_modal;
      vm.submit = this.submit;
      vm.ip = "";
      vm.size = "4U";
      vm.version = "ZS2000";
      vm.type = "服务器";
      return vm.close_alert = this.close_alert;
    };

    CentralCreateServerModal.prototype.rendered = function() {
      CentralCreateServerModal.__super__.rendered.call(this);
      $(".basic-toggle-button").toggleButtons();
      return $("form.server").validate(valid_opt({
        rules: {
          ip: {
            required: true
          }
        },
        messages: {
          ip: {
            required: "请输入ip地址"
          }
        }
      }));
    };

    CentralCreateServerModal.prototype.close_alert = function(e) {
      return $(".alert-error").hide();
    };

    CentralCreateServerModal.prototype._check = function() {
      var i, _i, _len, _ref;
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.devtype === "export") {
          if (this.vm.ip === i.ip) {
            $('.alert-error', $('.server')).show();
            return false;
          }
        }
      }
      return true;
    };

    CentralCreateServerModal.prototype.submit = function() {
      var machine_detail, query;
      if (this._check()) {
        if ($("form.server").validate().form()) {
          query = new MachineRest(this.sd.host);
          machine_detail = query.add(this.vm.ip, 'export');
          return machine_detail.done((function(_this) {
            return function(data) {
              var chain;
              if (data.status === 'success') {
                _this.page.frozen();
                chain = new Chain;
                chain.chain(function() {
                  return (new MachineRest(_this.sd.host)).add(_this.vm.ip, 'export');
                });
                chain.chain(_this.sd.update('all'));
                _this.hide();
                return show_chain_progress(chain).done(function() {
                  _this.page.attach();
                  return (new MessageModal(lang.central_modal.success)).attach();
                });
              } else {
                return (new MessageModal(lang.central_modal.error)).attach();
              }
            };
          })(this));
        }
      }
    };

    return CentralCreateServerModal;

  })(Modal);

  CentralCreateStoreModal = (function(_super) {
    __extends(CentralCreateStoreModal, _super);

    function CentralCreateStoreModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this._check = __bind(this._check, this);
      this.close_alert = __bind(this.close_alert, this);
      this.change_ip = __bind(this.change_ip, this);
      this.check_info = __bind(this.check_info, this);
      this.rendered = __bind(this.rendered, this);
      this.subitems = __bind(this.subitems, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralCreateStoreModal.__super__.constructor.call(this, "central-worker-modal-", "html/central_create_store_modal.html");
      this.store_ip = "";
    }

    CentralCreateStoreModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_modal;
      vm.submit = this.submit;
      vm.message = this.message;
      vm.number_ip = "";
      vm.start_ip = "192.168.2.";
      vm.check_info = this.check_info;
      vm.fattr_process = fattr.process;
      vm.fattr_process_step = fattr.process_step;
      vm.worker_ip = '';
      vm.ips = '';
      vm.option = "auto";
      vm.text_ip = "";
      return vm.close_alert = this.close_alert;
    };

    CentralCreateStoreModal.prototype.subitems = function() {
      var ips;
      ips = [
        {
          "ip": "",
          "session": false,
          "name": "mysql",
          "checked": false,
          "option": "no"
        }
      ];
      return ips;
    };

    CentralCreateStoreModal.prototype.rendered = function() {
      CentralCreateStoreModal.__super__.rendered.call(this);
      $("#myTab li:eq(0) a").tab("show");
      $("form.docker").validate(valid_opt({
        rules: {
          start_ip: {
            required: true
          },
          number_ip: {
            regex: '^[0-9]*$',
            required: true
          }
        },
        messages: {
          start_ip: {
            required: "请输入起始ip"
          },
          number_ip: {
            required: "请输入ip个数"
          }
        }
      }));
      return $("form.dockers").validate(valid_opt({
        rules: {
          text_ip: {
            required: true
          }
        },
        messages: {
          text_ip: {
            required: "请输入需要添加的ip"
          }
        }
      }));
    };

    CentralCreateStoreModal.prototype.check_info = function(i) {
      if (i === 0) {
        $("#myTab li:eq(0) a").tab("show");
      }
      if (i === 1) {
        if (this.vm.option === 'auto') {
          $("#myTab li:eq(1) a").tab("show");
        } else {
          $("#myTab li:eq(2) a").tab("show");
        }
      }
      if (i === 2) {
        $(".alert-error").hide();
        if (this.vm.option === 'auto') {
          $("#myTab li:eq(1) a").tab("show");
        } else {
          $("#myTab li:eq(2) a").tab("show");
        }
      }
      if (i === 3) {
        if (this.vm.option === 'auto') {
          if ($("form.docker").validate().form()) {
            $("#myTab li:eq(3) a").tab("show");
            return this.change_ip('auto');
          }
        } else {
          if ($("form.dockers").validate().form()) {
            $("#myTab li:eq(3) a").tab("show");
            return this.change_ip('manual');
          }
        }
      }
    };

    CentralCreateStoreModal.prototype.change_ip = function(type) {
      var a, i, ip, ips, new_ips, number_ip, o, p, start_ip, _i, _j, _len, _ref;
      ips = [];
      new_ips = [];
      if (type === 'auto') {
        a = this.vm.start_ip.split('.');
        number_ip = parseInt(this.vm.number_ip);
        start_ip = parseInt(a[3]);
        for (i = _i = start_ip, _ref = start_ip + number_ip; start_ip <= _ref ? _i < _ref : _i > _ref; i = start_ip <= _ref ? ++_i : --_i) {
          ip = '192.168.2.' + i;
          ips.push(ip);
        }
      } else {
        ips = this.vm.text_ip.split(',');
      }
      if (ips.length >= 4) {
        p = 0;
        for (_j = 0, _len = ips.length; _j < _len; _j++) {
          o = ips[_j];
          if (p < 2) {
            new_ips.push(o);
          } else if (p === 2) {
            new_ips.push("....");
          } else if (p === ips.length - 1) {
            new_ips.push(o);
          }
          p++;
        }
        new_ips = new_ips.join(",");
        this.vm.ips = new_ips;
      } else {
        this.vm.ips = ips;
      }
      return this.store_ip = ips;
    };

    CentralCreateStoreModal.prototype.close_alert = function(e) {
      return $(".alert-error").hide();
    };

    CentralCreateStoreModal.prototype._check = function() {
      var i, _i, _len, _ref, _ref1;
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.devtype === "storage") {
          if (_ref1 = i.ip, __indexOf.call(this.store_ip, _ref1) >= 0) {
            $('.alert-error', $('.dockers')).show();
            return false;
          }
        }
      }
      return true;
    };

    CentralCreateStoreModal.prototype.submit = function() {
      var chain, i, _i, _len, _ref;
      if (this._check()) {
        _ref = this.store_ip;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          this.page.frozen();
          chain = new Chain;
          chain.chain((function(_this) {
            return function() {
              return (new MachineRest(_this.sd.host)).add(i, 'storage');
            };
          })(this));
          chain.chain(this.sd.update('all'));
          this.hide();
          show_chain_progress(chain).done((function(_this) {
            return function() {};
          })(this));
        }
        this.page.attach();
        return (new MessageModal(lang.central_modal.success)).attach();
      }
    };

    return CentralCreateStoreModal;

  })(Modal);

  CentralCreateClientModal = (function(_super) {
    __extends(CentralCreateClientModal, _super);

    function CentralCreateClientModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this._check = __bind(this._check, this);
      this.close_alert = __bind(this.close_alert, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralCreateClientModal.__super__.constructor.call(this, "central-client-modal-", "html/central_create_client_modal.html");
    }

    CentralCreateClientModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_modal;
      vm.submit = this.submit;
      vm.ip = "";
      vm.size = "4U";
      vm.version = "ZS2000";
      vm.type = "客户端";
      return vm.close_alert = this.close_alert;
    };

    CentralCreateClientModal.prototype.rendered = function() {
      CentralCreateClientModal.__super__.rendered.call(this);
      $(".basic-toggle-button").toggleButtons();
      return $("form.client").validate(valid_opt({
        rules: {
          ip: {
            required: true
          }
        },
        messages: {
          ip: {
            required: "请输入ip地址"
          }
        }
      }));
    };

    CentralCreateClientModal.prototype.close_alert = function(e) {
      return $(".alert-error").hide();
    };

    CentralCreateClientModal.prototype._check = function() {
      var i, _i, _len, _ref;
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.devtype === "client") {
          if (this.vm.ip === i.ip) {
            $('.alert-error', $('.client')).show();
            return false;
          }
        }
      }
      return true;
    };

    CentralCreateClientModal.prototype.submit = function() {
      var machine_detail, query;
      if (this._check()) {
        if ($("form.client").validate().form()) {
          query = new MachineRest(this.sd.host);
          machine_detail = query.add(this.vm.ip, 'client');
          return machine_detail.done((function(_this) {
            return function(data) {
              var chain;
              if (data.status === 'success') {
                _this.page.frozen();
                chain = new Chain;
                chain.chain(function() {
                  return (new MachineRest(_this.sd.host)).add(_this.vm.ip, 'client');
                });
                chain.chain(_this.sd.update('all'));
                _this.hide();
                return show_chain_progress(chain).done(function() {
                  _this.page.attach();
                  return (new MessageModal(lang.central_modal.success)).attach();
                });
              } else {
                return (new MessageModal(lang.central_modal.error)).attach();
              }
            };
          })(this));
        }
      }
    };

    return CentralCreateClientModal;

  })(Modal);

  CentralExpandModal = (function(_super) {
    __extends(CentralExpandModal, _super);

    function CentralExpandModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.monitor = __bind(this.monitor, this);
      this.submit = __bind(this.submit, this);
      this._tips = __bind(this._tips, this);
      this.next = __bind(this.next, this);
      this.options = __bind(this.options, this);
      this.count_machines = __bind(this.count_machines, this);
      this.count_options = __bind(this.count_options, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralExpandModal.__super__.constructor.call(this, "central-worker-modal-", "html/central_expand_modal.html");
      this.tips = "";
      this.machine = "";
    }

    CentralExpandModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_modal;
      vm.submit = this.submit;
      vm.message = this.message;
      vm.options = this.options();
      vm.store = this.count_machines();
      vm.next = this.next;
      vm.fattr_process_step = fattr.process_step;
      vm.all_checked = false;
      vm.tips = this.tips;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.store;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralExpandModal.prototype.rendered = function() {
      CentralExpandModal.__super__.rendered.call(this);
      $("#myTab li:eq(0) a").tab("show");
      return $("#node").chosen();
    };

    CentralExpandModal.prototype.subitems = function() {
      var i, items, sub, _i, _len;
      sub = [];
      items = subitems(this.sd.clouds.items, {
        cid: "",
        devtype: "",
        expand: "",
        "export": "",
        ip: "",
        status: "",
        uuid: "",
        checked: false
      });
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        if (i.devtype === 'storage') {
          sub.push(i);
        }
      }
      return sub;
    };

    CentralExpandModal.prototype.count_options = function() {
      var i, sub, _i, _len, _ref;
      sub = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i["export"] === this.message) {
          sub.push(i);
        }
      }
      return sub;
    };

    CentralExpandModal.prototype.count_machines = function() {
      var i, sub, _i, _len, _ref;
      sub = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.status === false) {
          sub.push(i);
        }
      }
      return sub;

      /*
      sub = []
      items = subitems @sd.clouds.items,cid:"",devtype:"",expand:"",export:"",ip:"",status:"", uuid:"", checked:false
      ((sub.push i) for i in items when i.devtype is 'storage')
      sub
       */
    };

    CentralExpandModal.prototype.options = function() {
      var i, max, option, options, _i, _j, _len, _ref, _ref1, _ref2;
      option = [0];
      options = [];
      _ref = this.count_options();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (_ref1 = i.cid, __indexOf.call(option, _ref1) < 0) {
          option.push(i.cid);
        }
      }
      max = Math.max.apply(null, option);
      if (max === 0) {
        return [
          {
            key: 1,
            value: "1"
          }
        ];
      } else {
        for (i = _j = 1, _ref2 = max + 1; 1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 1 <= _ref2 ? ++_j : --_j) {
          options.push({
            key: i,
            value: i.toString()
          });
        }
        return options;
      }
    };

    CentralExpandModal.prototype.next = function(i) {
      if (i === 0) {
        $("#myTab li:eq(0) a").tab("show");
      }
      if (i === 1) {
        $("#myTab li:eq(1) a").tab("show");
      }
      if (i === 2) {
        if (this._tips()) {
          return $("#myTab li:eq(2) a").tab("show");
        } else {
          return (new MessageModal(lang.central_modal.choose)).attach();
        }
      }
    };

    CentralExpandModal.prototype._tips = function() {
      var i, machine, selected, _i, _len, _ref;
      selected = $("#node").val();
      machine = [];
      _ref = this.vm.store;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.checked) {
          machine.push(i.ip);
        }
      }
      this.machine = machine.join(",");
      if (this.machine) {
        this.vm.tips = "确认要将以下机器" + this.machine + "添加到节点" + selected + "吗?";
        return true;
      }
    };

    CentralExpandModal.prototype.submit = function() {
      var chain, i, machine, _i, _len, _ref;
      machine = [];
      _ref = this.vm.store;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.checked) {
          machine.push(i.ip);
        }
      }
      this.machine = machine.join(",");
      this.page.frozen();
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new MachineRest(_this.sd.host))["export"](_this.message, _this.machine);
        };
      })(this));
      chain.chain(this.sd.update('all'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          _this.page.attach();
          return (new MessageModal(lang.central_modal.expand_success)).attach();
        };
      })(this));
    };

    CentralExpandModal.prototype.monitor = function(machine) {
      var i, j, machine_detail, query, _i, _j, _len, _len1, _ref;
      for (_i = 0, _len = machine.length; _i < _len; _i++) {
        i = machine[_i];
        query = new MachineRest(this.sd.host);
        machine_detail = query.monitor("a", i, 24, "storage");
      }
      _ref = this.sd.centers.items;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        j = _ref[_j];
        if (j.Devtype === "export" && j.Ip === this.message) {
          return;
        }
      }
      return machine_detail = query.monitor("a", this.message, 24, "export");
    };

    return CentralExpandModal;

  })(Modal);

  CentralStartModal = (function(_super) {
    __extends(CentralStartModal, _super);

    function CentralStartModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.node = __bind(this.node, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralStartModal.__super__.constructor.call(this, "central-server-modal-", "html/central_start_modal.html");
    }

    CentralStartModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_modal;
      vm.submit = this.submit;
      vm.message = this.message;
      vm.fattr_server_health = fattr.server_health;
      vm.node = this.node();
      vm.all_checked = false;
      vm.start = this.start;
      vm.stop = this.stop;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.store;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralStartModal.prototype.rendered = function() {
      CentralStartModal.__super__.rendered.call(this);
      this.vm.node = this.node();
      this.data_table = $("#start-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    CentralStartModal.prototype.subitems = function() {
      var i, items, sub, _i, _len;
      sub = [];
      items = subitems(this.sd.clouds.items, {
        cid: "",
        devtype: "",
        expand: "",
        "export": "",
        ip: "",
        status: "",
        uuid: "",
        checked: false
      });
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        if (i.devtype === 'storage' && i["export"] === this.message) {
          sub.push(i);
        }
      }
      return sub;
    };

    CentralStartModal.prototype.node = function() {
      var i, j, max, option, options, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2;
      option = [0];
      options = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (_ref1 = i.cid, __indexOf.call(option, _ref1) < 0) {
          option.push(i.cid);
        }
      }
      max = Math.max.apply(null, option);
      if (max === 0) {
        return options;
      } else {
        for (i = _j = 1; 1 <= max ? _j <= max : _j >= max; i = 1 <= max ? ++_j : --_j) {
          options.push({
            cid: i
          });
        }
        _ref2 = this.subitems();
        for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
          i = _ref2[_k];
          for (_l = 0, _len2 = options.length; _l < _len2; _l++) {
            j = options[_l];
            if (i.cid === j.cid) {
              j.status = i.status;
            }
          }
        }
        return options;
      }
    };

    CentralStartModal.prototype.start = function(cid) {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new MachineRest(_this.sd.host)).storage(_this.message, cid);
        };
      })(this));
      chain.chain(this.sd.update('all'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          _this.page.attach();
          return (new MessageModal(lang.central_modal.start_success)).attach();
        };
      })(this));
    };

    CentralStartModal.prototype.stop = function(cid) {
      var chain, i, ip, _i, _len, _ref;
      ip = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.cid === cid) {
          ip.push(i.ip);
        }
      }
      ip = ip.join(",");
      this.page.frozen();
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new MachineRest(_this.sd.host)).rozostop('storage', ip);
        };
      })(this));
      chain.chain(this.sd.update('all'));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          _this.page.attach();
          return (new MessageModal(lang.central_modal.stop_success)).attach();
        };
      })(this));
    };

    return CentralStartModal;

  })(Modal);

  CentralDownloadLogModal = (function(_super) {
    __extends(CentralDownloadLogModal, _super);

    function CentralDownloadLogModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralDownloadLogModal.__super__.constructor.call(this, "central-server-modal-", "html/central_downloadlog_modal.html");
    }

    CentralDownloadLogModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_warning;
      vm.submit = this.submit;
      return vm.ip = "";
    };

    CentralDownloadLogModal.prototype.rendered = function() {
      return CentralDownloadLogModal.__super__.rendered.call(this);
    };

    CentralDownloadLogModal.prototype.submit = function() {
      var chain;
      this.page.frozen();
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new MachineRest(_this.sd.host)).download_log(_this.vm.ip);
        };
      })(this));
      chain.chain(this.sd.update('all'));
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          return console.log(123);
        };
      })(this));
    };

    return CentralDownloadLogModal;

  })(Modal);

  CentralManualModal = (function(_super) {
    __extends(CentralManualModal, _super);

    function CentralManualModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.show_tips = __bind(this.show_tips, this);
      this.tips = __bind(this.tips, this);
      this.submit = __bind(this.submit, this);
      this.count_machine = __bind(this.count_machine, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralManualModal.__super__.constructor.call(this, "central-server-modal-", "html/central_manual_modal.html");
    }

    CentralManualModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_manual;
      vm.submit = this.submit;
      vm.ip = "";
      return vm.options = [
        {
          key: "存储",
          value: "storage"
        }, {
          key: "元数据",
          value: "export"
        }
      ];
    };

    CentralManualModal.prototype.rendered = function() {
      CentralManualModal.__super__.rendered.call(this);
      return $("#manual").chosen();
    };

    CentralManualModal.prototype.count_machine = function(selected) {
      var i, _i, _j, _len, _len1, _ref, _ref1;
      if (selected === "export") {
        _ref = this.sd.centers.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.Devtype === "export") {
            (new MessageModal(this.vm.lang.add_server_error)).attach();
            return false;
          }
        }
      } else {
        _ref1 = this.sd.centers.items;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          i = _ref1[_j];
          if (i.Devtype === "storage" && i.Ip === this.vm.ip) {
            (new MessageModal(this.vm.lang.add_store_error)).attach();
            return false;
          }
        }
      }
      return true;
    };

    CentralManualModal.prototype.submit = function() {
      var chain, selected;
      if ($("form.manual").validate().form()) {
        selected = $("#manual").val();
        if (this.count_machine(selected)) {
          this.page.frozen();
          chain = new Chain;
          chain.chain((function(_this) {
            return function() {
              return (new MachineRest(_this.sd.host)).monitor("a", _this.vm.ip, 24, selected);
            };
          })(this));
          chain.chain(this.sd.update('all'));
          this.hide();
          return show_chain_progress(chain).done((function(_this) {
            return function(data) {
              (new MessageModal(lang.central_search_modal.monitor_success)).attach();
              return _this.page.attach();
            };
          })(this)).fail((function(_this) {
            return function() {
              return (new MessageModal(lang.central_search_modal.monitor_error)).attach();
            };
          })(this));
        }
      }
    };

    CentralManualModal.prototype.tips = function(ip) {
      var datas, e, j, types, _i, _len, _ref;
      try {
        datas = {};
        datas[ip] = 0;
        _ref = this.sd.stores.items.journals;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          j = _ref[_i];
          if (j.ip === ip) {
            datas[ip] = datas[ip] + 1;
          }
        }
        if (datas[ip] > 0) {
          if (this.type === "storage") {
            types = "存储";
          } else {
            types = "元数据";
          }
          return this.show_tips(ip, datas[ip], types);
        }
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralManualModal.prototype.show_tips = function(ip, num, type) {
      return $(function(){
            $.extend($.gritter.options, {
                class_name: 'gritter', 
                position: 'bottom-right', 
                fade_in_speed: 100, 
                fade_out_speed: 100, 
                time: 30000 
            });
            $.gritter.add({
                title: '<i class="icon-bell">告警信息</i>',
                text: '<a href="#" style="color:#ccc;font-size:14px;">' + type + ip + '有' + num + '条告警信息</a><br>点击可查看.'
            });
            return false;
        });
    };

    return CentralManualModal;

  })(Modal);

  CentralAddEmailModal = (function(_super) {
    __extends(CentralAddEmailModal, _super);

    function CentralAddEmailModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralAddEmailModal.__super__.constructor.call(this, "central-add-email-modal-", "html/central_add_email_modal.html");
    }

    CentralAddEmailModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_email;
      vm.submit = this.submit;
      vm.email = "";
      vm.level = "";
      return vm.ttl = "";
    };

    CentralAddEmailModal.prototype.rendered = function() {
      return CentralAddEmailModal.__super__.rendered.call(this);
    };

    CentralAddEmailModal.prototype.submit = function() {
      var chain;
      if ($("form.manual").validate().form()) {
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).change_email(_this.vm.email, _this.vm.level, _this.vm.ttl);
          };
        })(this));
        chain.chain(this.sd.update('all'));
        this.hide();
        return show_chain_progress(chain).done((function(_this) {
          return function(data) {
            _this.page.attach();
            return (new MessageModal(lang.central_email.success_add)).attach();
          };
        })(this));
      }
    };

    return CentralAddEmailModal;

  })(Modal);

  CentralChangeValueModal = (function(_super) {
    __extends(CentralChangeValueModal, _super);

    function CentralChangeValueModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralChangeValueModal.__super__.constructor.call(this, "central-change-value-modal-", "html/central_change_value_modal.html");
    }

    CentralChangeValueModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_value;
      vm.submit = this.submit;
      vm.normal = "";
      vm.bad = "";
      return vm.message = this.message;
    };

    CentralChangeValueModal.prototype.rendered = function() {
      return CentralChangeValueModal.__super__.rendered.call(this);
    };

    CentralChangeValueModal.prototype.submit = function() {
      var chain;
      if ($("form.manual").validate().form()) {
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).change_value(_this.message, _this.vm.normal, _this.vm.bad);
          };
        })(this));
        chain.chain(this.sd.update('all'));
        this.hide();
        return show_chain_progress(chain).done((function(_this) {
          return function(data) {
            _this.page.attach();
            return (new MessageModal(lang.central_value.success)).attach();
          };
        })(this));
      }
    };

    return CentralChangeValueModal;

  })(Modal);

  CentralHandleLogModal = (function(_super) {
    __extends(CentralHandleLogModal, _super);

    function CentralHandleLogModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralHandleLogModal.__super__.constructor.call(this, "central-handle-log-modal-", "html/central_handle_log_modal.html");
    }

    CentralHandleLogModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_handle_log;
      vm.submit = this.submit;
      vm.normal = "";
      vm.bad = "";
      vm.message = this.message;
      vm.journal_unhandled = this.subitems();
      vm.fattr_journal_status = fattr.journal_status;
      vm.all_checked = false;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.journal_unhandled;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralHandleLogModal.prototype.rendered = function() {
      var $scroller;
      CentralHandleLogModal.__super__.rendered.call(this);
      this.vm.journal_unhandled = this.subitems();
      this.data_table = $("#log-table").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller = $("#journals-scroller");
      return $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
    };

    CentralHandleLogModal.prototype.subitems = function() {
      var arrays, error, i, _i, _len, _ref;
      try {
        arrays = [];
        _ref = this.sd.journals.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          i.created = i.created.replace("-", "/").replace("-", "/").replace("T", "-").replace("+08:00", "");
          if (!i.status) {
            i.chinese_status = "未处理";
            i.checked = false;
            arrays.push(i);
          }
        }
        return arrays.reverse();
      } catch (_error) {
        error = _error;
        return [];
      }
    };

    CentralHandleLogModal.prototype.submit = function() {
      var chain, i, selected, _i, _len;
      selected = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.journal_unhandled;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            _results.push($.extend({}, i.$model));
          }
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = selected.length; _i < _len; _i++) {
        i = selected[_i];
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).handle_log(i.uid);
          };
        })(this));
        chain.chain(this.sd.update('all'));
        show_chain_progress(chain).done((function(_this) {
          return function() {};
        })(this));
      }
      this.hide();
      this.page.attach();
      return (new MessageModal(lang.central_handle_log.success)).attach();
    };

    return CentralHandleLogModal;

  })(Modal);

  CentralUnmonitorModal = (function(_super) {
    __extends(CentralUnmonitorModal, _super);

    function CentralUnmonitorModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralUnmonitorModal.__super__.constructor.call(this, "central-unmonitor-modal-", "html/central_unmonitor_modal.html");
    }

    CentralUnmonitorModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_unmonitor;
      vm.submit = this.submit;
      vm.device = this.subitems();
      vm.fattr_monitor_status = fattr.monitor_status;
      vm.all_checked = false;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.device;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralUnmonitorModal.prototype.rendered = function() {
      CentralUnmonitorModal.__super__.rendered.call(this);
      this.data_table = $("#unmonitor-table").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    CentralUnmonitorModal.prototype.subitems = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: "",
          Status: "",
          checked: false
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "storage") {
            i.Chinese_devtype = "存储";
          } else {
            i.Chinese_devtype = "服务器";
          }
          tmp.push(i);
        }
        return tmp;
      }
    };

    CentralUnmonitorModal.prototype.submit = function() {
      var chain, disk, i, rest, selected, _i, _len;
      selected = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.device;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            _results.push($.extend({}, i.$model));
          }
        }
        return _results;
      }).call(this);
      chain = new Chain;
      rest = new MachineRest(this.sd.host);
      i = 0;
      for (_i = 0, _len = selected.length; _i < _len; _i++) {
        disk = selected[_i];
        chain.chain(function() {
          return (rest.unmonitor(selected[i].Uuid)).done(function() {
            return i += 1;
          });
        });
      }
      chain.chain(this.sd.update("all"));
      this.hide();
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          _this.page.attach();
          return (new MessageModal(lang.central_unmonitor.success)).attach();
        };
      })(this));
    };

    return CentralUnmonitorModal;

  })(Modal);

  CentralChangeEmailModal = (function(_super) {
    __extends(CentralChangeEmailModal, _super);

    function CentralChangeEmailModal(sd, page, _address, _level, _ttl) {
      this.sd = sd;
      this.page = page;
      this._address = _address;
      this._level = _level;
      this._ttl = _ttl;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralChangeEmailModal.__super__.constructor.call(this, "central-change-email-modal-", "html/central_change_email_modal.html");
    }

    CentralChangeEmailModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_email;
      vm.submit = this.submit;
      vm.address = this._address;
      vm.level = this._level;
      return vm.ttl = this._ttl;
    };

    CentralChangeEmailModal.prototype.rendered = function() {
      return CentralChangeEmailModal.__super__.rendered.call(this);
    };

    CentralChangeEmailModal.prototype.submit = function() {
      var chain;
      if ($("form.manual").validate().form()) {
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).change_email(_this._address, _this.vm.level, _this.vm.ttl);
          };
        })(this));
        chain.chain(this.sd.update('all'));
        this.hide();
        return show_chain_progress(chain).done((function(_this) {
          return function(data) {
            _this.page.attach();
            return (new MessageModal(lang.central_value.success_change)).attach();
          };
        })(this));
      }
    };

    return CentralChangeEmailModal;

  })(Modal);

  GetcardResultModal = (function(_super) {
    __extends(GetcardResultModal, _super);

    function GetcardResultModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      GetcardResultModal.__super__.constructor.call(this, "getcard-result-modal-", "html/getcard_result_modal.html");
    }

    GetcardResultModal.prototype.define_vm = function(vm) {
      vm.lang = lang.central_email;
      vm.submit = this.submit;
      return vm.message = this.message;
    };

    GetcardResultModal.prototype.rendered = function() {
      return GetcardResultModal.__super__.rendered.call(this);
    };

    GetcardResultModal.prototype.submit = function() {
      return this.hide();
    };

    return GetcardResultModal;

  })(Modal);

  RegisterChangeDataModal = (function(_super) {
    __extends(RegisterChangeDataModal, _super);

    function RegisterChangeDataModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.locations = __bind(this.locations, this);
      this.init = __bind(this.init, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterChangeDataModal.__super__.constructor.call(this, "register-change-data-modal-", "html/register_change_data_modal.html");
      $(this.sd.register).on("updated", (function(_this) {
        return function(e, source) {
          return _this.init();
        };
      })(this));
    }

    RegisterChangeDataModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register;
      vm.submit = this.submit;
      vm.id = "";
      vm.email = "";
      vm.hotelname = "";
      vm.location = "";
      vm.realname = "";
      vm.tel = "";
      vm.user = "";
      vm.sex = "";
      vm.options_sex = [
        {
          key: "请选择",
          value: "请选择"
        }, {
          key: "男",
          value: "男"
        }, {
          key: "女",
          value: "女"
        }
      ];
      return vm.option = "";
    };

    RegisterChangeDataModal.prototype.rendered = function() {
      RegisterChangeDataModal.__super__.rendered.call(this);
      this.init();
      return $("form.userdata").validate(valid_opt({
        rules: {
          tel: {
            regex: '^[0-9]*$'
          }
        },
        messages: {
          ip: {
            regex: "无效IP地址"
          }
        }
      }));
    };

    RegisterChangeDataModal.prototype.init = function() {
      this.vm.email = this.sd.register.items["email"];
      this.vm.hotelname = this.sd.register.items["hotelname"];
      this.vm.location = this.sd.register.items["location"];
      this.vm.realname = this.sd.register.items["realname"];
      this.vm.tel = this.sd.register.items["tel"];
      this.vm.id = this.sd.register.items["account"];
      this.vm.user = this.sd.register.items["user"];

      /*if @sd.register.items["sex"] is ""
          oLanguage = "请选择"
      else
          oLanguage = @sd.register.items["sex"]
       */
      if (this.sd.register.items["sex"] === "") {
        return this.vm.option = "";
      } else {
        return this.vm.option = this.sd.register.items["sex"];
      }
    };

    RegisterChangeDataModal.prototype.locations = function() {
      return new PCAS('location_p', 'location_c', 'location_a', '广东省', '', '');
    };

    RegisterChangeDataModal.prototype.submit = function() {
      var chain;
      if ($("form.userdata").validate().form()) {
        this.page.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).change_data(_this.vm.user, _this.vm.email, _this.vm.hotelname, _this.vm.location, _this.vm.realname, _this.vm.tel, _this.vm.id, _this.vm.option);
          };
        })(this));
        chain.chain(this.sd.update('all'));
        this.hide();
        return show_chain_progress(chain).done((function(_this) {
          return function(data) {
            _this.page.attach();
            return (new MessageModal(lang.register.success_change)).attach();
          };
        })(this));
      }
    };

    return RegisterChangeDataModal;

  })(Modal);

  RegisterChangePasswdModal = (function(_super) {
    __extends(RegisterChangePasswdModal, _super);

    function RegisterChangePasswdModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.close_alert = __bind(this.close_alert, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterChangePasswdModal.__super__.constructor.call(this, "register-change-data-modal-", "html/register_change_passwd_modal.html");
    }

    RegisterChangePasswdModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register;
      vm.submit = this.submit;
      vm.old_passwd = "";
      vm.new_passwd = "";
      vm.confirm_passwd = "";
      vm.account = "";
      return vm.close_alert = this.close_alert;
    };

    RegisterChangePasswdModal.prototype.rendered = function() {
      RegisterChangePasswdModal.__super__.rendered.call(this);
      $.validator.addMethod("same", (function(_this) {
        return function(val, element) {
          if (_this.vm.new_passwd !== _this.vm.confirm_passwd) {
            return false;
          } else {
            return true;
          }
        };
      })(this), "两次输入的新密码不一致");
      $('.hastip').poshytip({
        className: 'tip-twitter',
        showTimeout: 0,
        allowTipHover: false,
        fade: false,
        slide: false,
        followCursor: true
      });
      $("form.passwd").validate(valid_opt({
        rules: {
          old_passwd: {
            required: true,
            maxlength: 32
          },
          new_passwd: {
            required: true,
            maxlength: 32
          },
          confirm_passwd: {
            required: true,
            maxlength: 32,
            same: true
          }
        },
        messages: {
          old_passwd: {
            required: "请输入您的旧密码",
            maxlength: "密码长度不能超过32个字符"
          },
          new_passwd: {
            required: "请输入您的新密码",
            maxlength: "密码长度不能超过32个字符"
          },
          confirm_passwd: {
            required: "请再次输入您的新密码",
            maxlength: "密码长度不能超过32个字符"
          }
        }
      }));
      return this.vm.account = this.sd.register.items['account'];
    };

    RegisterChangePasswdModal.prototype.submit = function() {
      var action;
      if ($("form.passwd").validate().form()) {
        this.page.frozen();
        action = new SessionRest(this.sd.host).change_pass(this.vm.account, this.vm.old_passwd, this.vm.new_passwd);
        return action.done((function(_this) {
          return function(data) {
            if (data.status === "failed") {
              return $('.alert-error', $('.passwd')).show();
            } else {
              _this.hide();
              return (new MessageModal(lang.register.success_change)).attach();
            }
          };
        })(this));
      }
    };

    RegisterChangePasswdModal.prototype.close_alert = function(e) {
      return $(".alert-error").hide();
    };

    return RegisterChangePasswdModal;

  })(Modal);

  FaceUpLoadModal = (function(_super) {
    __extends(FaceUpLoadModal, _super);

    function FaceUpLoadModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FaceUpLoadModal.__super__.constructor.call(this, "register-change-data-modal-", "html/face_upload_modal.html");
    }

    FaceUpLoadModal.prototype.define_vm = function(vm) {
      vm.lang = lang.fileupload;
      return vm.submit = this.submit;
    };

    FaceUpLoadModal.prototype.rendered = function() {
      FaceUpLoadModal.__super__.rendered.call(this);
      $("#fileupload").fileupload({
        url: "http://" + this.sd.host + "/api/upgrade"
      }).bind("fileuploaddone", function(e, data) {
        return (new MessageModal(lang.fileupload.message_upgrade_success)).attach();
      });
      return $("input[name=files]").click(function() {
        return $("tbody.files").html("");
      });
    };

    FaceUpLoadModal.prototype.submit = function() {
      return this.hide();
    };

    return FaceUpLoadModal;

  })(Modal);

  RegisterChangeHeadModal = (function(_super) {
    __extends(RegisterChangeHeadModal, _super);

    function RegisterChangeHeadModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.init = __bind(this.init, this);
      this.refresh_header = __bind(this.refresh_header, this);
      this._upload = __bind(this._upload, this);
      this.on_load = __bind(this.on_load, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterChangeHeadModal.__super__.constructor.call(this, "register-change-data-modal-", "html/register_change_head_modal.html");
    }

    RegisterChangeHeadModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register_change_head;
      vm.submit = this.submit;
      vm.show_old_head = true;
      return vm.show_div = false;
    };

    RegisterChangeHeadModal.prototype.rendered = function() {
      RegisterChangeHeadModal.__super__.rendered.call(this);
      this.init(this, this.page);
      this.vm.show_old_head = true;
      return this.vm.show_div = false;
    };

    RegisterChangeHeadModal.prototype.on_load = function(page) {
      return $(document).ready(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            var header = document.getElementById("headerss");
            var cxt= header.getContext("2d");
            var id = page.sd.register.items["account"];
            xhr.open('get','http://192.168.2.84:4567/api/downloadAvatar/' + id,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    var img = new Image();
                    img.src=xhr.responseText;
                    img.onload = function(){
                        var w = Math.min(400, img.width);
                        var h = img.height * (w / img.width);
                        header.width = w;
                        header.height = h;
                        cxt.drawImage(img,0,0);
                    }
                    console.log(xhr.responseText);  
                }  
            }
        });
    };

    RegisterChangeHeadModal.prototype._upload = function(base64, filename, page, thispage) {
      return $(function() {
            try{
                function sumitImageFile(base64Codes){
                    var form=document.forms[0];
                    var formData = new FormData(form);  
                    formData.append("imageName",convertBase64UrlToBlob(base64Codes),filename);  
                    $.ajax({
                        url : "http://" + page.sd.host + "/api/upgrade",
                        type : "POST",
                        data : formData,
                        dataType:"text",
                        processData : false,        
                        contentType : false,  
                        success:function(data){
                            //window.location.href="${ctx}"+data;
                            //thispage.refresh_header();
                            random = Math.random();
                            new MessageModal(lang.fileupload.upload_success).attach();
                            return page.attach();
                        },
                        xhr:function(){            
                            var xhr = new XMLHttpRequest();
                            xhr.upload.addEventListener("progress", function(evt){
                                if (evt.lengthComputable) {
                                    var percentComplete = Math.round(evt.loaded * 100 / evt.total);  
                                    console.log("正在提交."+percentComplete.toString() + '%');        //在控制台打印上传进度
                                }
                            }, false);
                            return xhr;
                        }
                        
                    });
                }

                function convertBase64UrlToBlob(urlData){
                    var bytes=window.atob(urlData.split(',')[1]);       
                    var ab = new ArrayBuffer(bytes.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < bytes.length; i++) {
                        ia[i] = bytes.charCodeAt(i);
                    }
                    return new Blob( [ab] , {type : 'image/jpeg'});
                }
                sumitImageFile(base64);
            }catch(e){
                console.log(e);
            }
        });
    };

    RegisterChangeHeadModal.prototype.refresh_header = function() {
      var id, urls;
      id = this.sd.register.items["account"];
      urls = 'http://' + this.sd.host + '/downloadAvatar/' + id + '/head/' + id + '_head.jpg';
      $("#user_img_log").attr('src', urls + "?t=" + Math.random());
      return $("#headers").attr('src', urls + "?t=" + Math.random());
    };

    RegisterChangeHeadModal.prototype.init = function(page, mainpage) {
      return $(function () {
          'use strict'
          var result = $('#result')
          var result_150 = $('#result_150')
          var result_55 = $('#result_55')
          var exifNode = $('#exif')
          var thumbNode = $('#thumbnail')
          var actionsNode = $('#actions')
          var imgs = $('#img_preview')
          var currentFile
          var coordinates
          var upload_button = false;
          var jcrop_api,
            boundx,
            boundy,
            $preview = $('#preview-pane'),
            $pcnt = $('#preview-pane .preview-container'),
            $pimg = $('#preview-pane .preview-container img'),
            xsize = $pcnt.width(),
            ysize = $pcnt.height();
         
          function displayExifData (exif) {
            var thumbnail = exif.get('Thumbnail')
            var tags = exif.getAll()
            var table = exifNode.find('table').empty()
            var row = $('<tr></tr>')
            var cell = $('<td></td>')
            var prop
            if (thumbnail) {
              thumbNode.empty()
              loadImage(thumbnail, function (img) {
                thumbNode.append(img).show()
              }, {orientation: exif.get('Orientation')})
            }
            for (prop in tags) {
              if (tags.hasOwnProperty(prop)) {
                table.append(
                  row.clone()
                    .append(cell.clone().text(prop))
                    .append(cell.clone().text(tags[prop]))
                )
              }
            }
            exifNode.show()
          }

          function updateResults (img, data) {
            var content
            if (!(img.src || img instanceof HTMLCanvasElement)) {
              content = $('<span>Loading image file failed</span>')
            } else {
              page.vm.show_div = true;
              content = $('<a target="_blank">').append(img)
                .attr('download', currentFile.name)
                .attr('href', img.src || img.toDataURL())
            }
            result.children().replaceWith(content)
            if (img.getContext) {
              //actionsNode.show()
            }
            if (data && data.exif) {
              displayExifData(data.exif)
            }
            var imgNode = result.find('img, canvas');
            imgs.src = img.src;
            if (upload_button == false){
                /*
                imgNode.Jcrop({
                    bgOpacity: 0.5,
                    bgColor: '#e2e2e2',
                    addClass: 'jcrop-light',
                    setSelect: [
                      40,
                      40,
                      150,
                      150
                    ],
                    onChange: updatePreview,
                    onSelect: updatePreview,
                    aspectRatio: xsize / ysize
                },function(){
                  var bounds = this.getBounds();
                  boundx = bounds[0];
                  boundy = bounds[1];
                  jcrop_api = this;
                  $preview.appendTo(jcrop_api.ui.holder);
                });
                */
                imgNode.Jcrop({
                    bgOpacity: 0.5,
                    bgColor: '#e2e2e2',
                    addClass: 'jcrop-light',
                    setSelect: [
                      40,
                      40,
                      150,
                      150
                    ],
                    onSelect: function (coords) {
                      coordinates = coords
                    },
                    aspectRatio: 1,//正方形裁剪框
                    onRelease: function () {
                      coordinates = null
                    }
                })
            }
          }
          function updatePreview(c)
            {
              if (parseInt(c.w) > 0)
              {
                var rx = xsize / c.w;
                var ry = ysize / c.h;

                $pimg.css({
                  width: Math.round(rx * boundx) + 'px',
                  height: Math.round(ry * boundy) + 'px',
                  marginLeft: '-' + Math.round(rx * c.x) + 'px',
                  marginTop: '-' + Math.round(ry * c.y) + 'px'
                });
              }
            };
          function displayImage (file, options) {
            currentFile = file
            if (!loadImage(
                file,
                updateResults,
                options
              )) {
              result.children().replaceWith(
                $('<span>' +
                  'Your browser does not support the URL or FileReader API.' +
                  '</span>')
              )
            }
          }

          function dropChangeHandler (e) {
            e.preventDefault()
            e = e.originalEvent
            var target = e.dataTransfer || e.target
            var file = target && target.files && target.files[0]
            var options = {
              maxWidth: 400,
              maxHeight: 300,
              canvas: true,
              pixelRatio: window.devicePixelRatio,
              downsamplingRatio: 0.5,
              orientation: true
            }
            if (!file) {
              page.vm.show_old_head = true;
              return
            }
            exifNode.hide()
            thumbNode.hide()
            displayImage(file, options)
          }

          // Hide URL/FileReader API requirement message in capable browsers:
          if (window.createObjectURL || window.URL || window.webkitURL ||
            window.FileReader) {
            page.vm.show_div = false;
            /*
            var xhr;
            var imgNodes = result.find('img, canvas')[0];
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            var id = page.sd.register.items["account"];
            xhr.open('get','http://192.168.2.84:4567/api/downloadAvatar/' + id,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){
                if(xhr.readyState==4 || xhr.readyState==200){
                    //var header = document.getElementById("headerss");
                    var cxt= imgNodes.getContext("2d");
                    var img = new Image();
                    img.src=xhr.responseText;
                    img.onload = function(){
                        var w = Math.min(400, img.width);
                        var h = img.height * (w / img.width);
                        header.width = w;
                        header.height = h;
                        cxt.drawImage(img,0,0);
                    }
                    //result.append(img).show();
                    console.log(xhr.responseText);  
                }  
            }*/
            //result.children().hide()
          }

          $(document)
            .on('dragover', function (e) {
              e.preventDefault()
              e = e.originalEvent
              e.dataTransfer.dropEffect = 'copy'
            })
            .on('drop', dropChangeHandler)

          $('#file-input')
            .on('change', function (e) {   
                dropChangeHandler(e)
                page.vm.show_old_head = false
            })

          $('#edit')
            .on('click', function (event) {
              event.preventDefault()
              var imgNode = result.find('img, canvas')
              var img = imgNode[0]
              var pixelRatio = window.devicePixelRatio || 1
              imgNode.Jcrop({
                bgOpacity: 0.5,
                bgColor: '#e2e2e2',
                addClass: 'jcrop-light',
                setSelect: [
                  40,
                  40,
                  (img.width / pixelRatio) - 40,
                  (img.height / pixelRatio) - 40
                ],
                onSelect: function (coords) {
                  coordinates = coords
                },
                aspectRatio: 1,//正方形裁剪框
                onRelease: function () {
                  coordinates = null
                }
              }).parent().on('click', function (event) {
                event.preventDefault()
              })
            })

          $('#crop')
            .on('click', function (event) {
              event.preventDefault()
              upload_button = true;
              var img = result.find('img, canvas')[0]
              var pixelRatio = window.devicePixelRatio || 1
              if (img && coordinates) {
                updateResults(loadImage.scale(img, {
                  left: coordinates.x * pixelRatio,
                  top: coordinates.y * pixelRatio,
                  sourceWidth: coordinates.w * pixelRatio,
                  sourceHeight: coordinates.h * pixelRatio,
                  minWidth: result.width(),
                  maxWidth: result.width(),
                  pixelRatio: pixelRatio,
                  downsamplingRatio: 0.5
                }))
                coordinates = null
              }
            })

          $('#submit')
            .on('click', function (event) {
                var img = result.find('img, canvas')[0];
                var pixelRatio = window.devicePixelRatio || 1
                if ( coordinates ) {
                    updateResults(loadImage.scale(img, {
                        left: coordinates.x * pixelRatio,
                        top: coordinates.y * pixelRatio,
                        sourceWidth: coordinates.w * pixelRatio,
                        sourceHeight: coordinates.h * pixelRatio,
                        minWidth: result.width(),
                        maxWidth: result.width(),
                        pixelRatio: pixelRatio,
                        downsamplingRatio: 0.5
                    }))
                    var img2 = result.find('img, canvas')[0];
                    var urls = img2.toDataURL();
                    var filename = (page.sd.register.items["account"]).toString() + "_head.jpg";
                    page.hide();
                    page._upload(urls,filename,mainpage,page);
                }else{
                    $('.alert-error').show();
                }
            })
        });
    };

    RegisterChangeHeadModal.prototype.submit = function() {};

    return RegisterChangeHeadModal;

  })(Modal);

  RegisterChangeHeaderModal = (function(_super) {
    __extends(RegisterChangeHeaderModal, _super);

    function RegisterChangeHeaderModal(sd, page, message) {
      this.sd = sd;
      this.page = page;
      this.message = message;
      this.submit = __bind(this.submit, this);
      this.init = __bind(this.init, this);
      this._upload = __bind(this._upload, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterChangeHeaderModal.__super__.constructor.call(this, "register-change-data-modal-", "html/register_change_header_modal.html");
    }

    RegisterChangeHeaderModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register_change_head;
      vm.submit = this.submit;
      vm.loadImageFile = this.loadImageFile;
      vm.show_head = false;
      return vm.show_canvas = false;
    };

    RegisterChangeHeaderModal.prototype.rendered = function() {
      RegisterChangeHeaderModal.__super__.rendered.call(this);
      this.init(this, this.page);
      this.vm.show_head = false;
      return this.vm.show_canvas = false;
    };

    RegisterChangeHeaderModal.prototype._upload = function(base64, filename, page) {
      return $(function() {
            try{
                function sumitImageFile(base64Codes){
                    var form=document.forms[0];
                    var formData = new FormData(form);  
                    formData.append("imageName",convertBase64UrlToBlob(base64Codes),filename);  
                    $.ajax({
                        url : "http://" + page.sd.host + "/api/upgrade",
                        type : "POST",
                        data : formData,
                        dataType:"text",
                        processData : false,        
                        contentType : false,  
                        success:function(data){
                            //window.location.href="${ctx}"+data;
                            new MessageModal(lang.fileupload.upload_success).attach();
                            return page.attach();
                        },
                        xhr:function(){            
                            var xhr = new XMLHttpRequest();
                            xhr.upload.addEventListener("progress", function(evt){
                                if (evt.lengthComputable) {
                                    var percentComplete = Math.round(evt.loaded * 100 / evt.total);  
                                    console.log("正在提交."+percentComplete.toString() + '%');        //在控制台打印上传进度
                                }
                            }, false);
                            return xhr;
                        }
                        
                    });
                }

                function convertBase64UrlToBlob(urlData){
                    var bytes=window.atob(urlData.split(',')[1]);       
                    var ab = new ArrayBuffer(bytes.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < bytes.length; i++) {
                        ia[i] = bytes.charCodeAt(i);
                    }
                    return new Blob( [ab] , {type : 'image/jpeg'});
                }
                sumitImageFile(base64);
            }catch(e){
                console.log(e);
            }
        });
    };

    RegisterChangeHeaderModal.prototype.init = function(page, mainpage) {
      return $(function(){
            $("#file_upload").change(function () {
                var $file = $(this);
                var fileObj = $file[0];
                var windowURL = window.URL || window.webkitURL;
                var dataURL;
                var $img0 = $("#preview0");
                var $img1 = $("#preview1");
                var $img2 = $("#preview2");
                var $img3 = $("#preview3");
                var jcropApi;

                if (fileObj && fileObj.files && fileObj.files[0]) {

                    dataURL = windowURL.createObjectURL(fileObj.files[0]);
                    page.vm.show_head = true;
                    $img0.attr('src', dataURL);
                    $img1.attr('src', dataURL);
                    $img2.attr('src', dataURL);
                    $img3.attr('src', dataURL);

                    //真实尺寸
                    var img = new Image;    
                    img.onload = function(){ 
                        cutImage($(".jcrop_w>img"),img.width,img.height);

                        //默认图像位置
                        function cutImage(obj,ow,oh) {
                            var w = 394,
                                h = 340,
                                //iw = obj.width(),
                                //ih = obj.height();
                                iw = ow,
                                ih = oh;
                            console.log(iw);
                            console.log(ih);

                            if(iw > w || ih > h){
                                if(iw / ih > w / h){
                                    obj.css({
                                        width: w,
                                        height: w * ih / iw,
                                        top: (h - (w * ih / iw)) / 2,
                                        left: 0
                                    });
                                    init_jcrop("a",img.height,img.width);
                                }else{
                                    obj.css({
                                        height: h,
                                        width: h * iw / ih,
                                        top: 0,
                                        left: (w - (h * iw / ih)) / 2
                                    });
                                    init_jcrop("b",img.height,img.width);
                                }
                            }else{
                                obj.css({
                                    left: (w - iw) / 2,
                                    top: (h - ih ) / 2,
                                    height: ih,
                                    width: iw
                                });
                                init_jcrop("c",img.height,img.width);
                            }
                        }
                    };    
                    img.src = dataURL;
                } else {
                    dataURL = $file.val();
                    var imgObj = document.getElementById("preview1");
                    //imgObj.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)";
                    //imgObj.filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = dataURL;
                }

                function init_jcrop(mode,nature_h,nature_w){
                    var jcropApi;
                    if (mode == "c"){
                        var _Jw = (($("#target").width()/2) - nature_w/6 ),
                            _Jh = (($("#target").height()/2) - nature_h/6),
                            _Jw2 = _Jw + (nature_w/3),
                            _Jh2 = _Jh + (nature_h/3);
                    }else{
                        var _Jw = ($("#target").width() - 110) / 2 ,
                            _Jh = ($("#target").height() - 135) / 2 ,
                            _Jw2 = _Jw + 110,
                            _Jh2 = _Jh + 135;
                    }
    
                    $('#target').Jcrop({
                        setSelect: [_Jw, _Jh, _Jw2, _Jh2],
                        onChange: showPreview,
                        onSelect: showPreview,
                        bgFade: true,
                        addClass : 'jcrop-light',
                        bgColor: "rgb(241, 240, 240)",
                        allowSelect:false, //不允许选新框
                        //aspectRatio: 110/135,
                        aspectRatio: 1,//正方形裁剪框
                        bgOpacity: .5
                    }, function() {
                        jcropApi = this;
                        jcropApi.ui.selection.addClass('jcrop-selection');
                    });

                    $("#idLeft").click(function(e){
                        imgRotate(-90);
                        return false;
                    });
                    $("#idRight").click(function(e){
                        imgRotate(90);
                        return false;
                    });
                    $("#idBig").click(function(e){
                        imgToSize(20);
                        return false;
                    });
                    $("#idSmall").click(function(e){
                        imgToSize(-20);
                        return false;
                    });

                    //图片旋转
                    function imgRotate(deg){
                        var img1 = $(".jcrop_w>img"),
                            _data = parseInt($(".jc-demo-box").attr("data"));
                        console.log(_data);
                        if($.browser.version == 8.0 || $.browser.version == 7.0 || $.browser.version == 6.0 ){
                            var sin = Math.sin(Math.PI / 180 * (_data + deg)), cos = Math.cos(Math.PI / 180 * (_data + deg));
                            var _filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + cos + "," +  "M12=" + (-sin)
                                + ",M21=" + sin+ ",M22=" + cos + ",SizingMethod='auto expand')";
                            img1.css({
                                filter: _filter
                            });
                            $('.pre-1 img,.pre-2 img,.pre-3 img').css({
                                filter: _filter
                            });

                        }else{
                            var _deg = deg + _data;
                            var _val =  "rotate("+ _deg + "deg)";
                            img1.css({
                                "-webkit-transform": _val,
                                   "-moz-transform": _val,
                                    "-ms-transform": _val,
                                     "-o-transform": _val,
                                        "transform": _val
                            });
                            $('.pre-1 img,.pre-2 img,.pre-3 img').css({
                                "-webkit-transform": _val,
                                   "-moz-transform": _val,
                                    "-ms-transform": _val,
                                     "-o-transform": _val,
                                        "transform": _val
                            });
                        }

                        var     fiw = $('.jcrop_w>img').width(),
                                fih = $('.jcrop_w>img').height(),
                                ow = Math.floor((395 - fiw) / 2),
                                oh = Math.floor((340 - fih) / 2),
                                cx = $("#small").position().left,
                                cy = $("#small").position().top,
                                rx = 110 / $("#small").width(),
                                ry = 135 / $("#small").height(),
                                rx1 = 73 / $("#small").width(),
                                ry1 = 90 / $("#small").height(),
                                rx2 = 40 / $("#small").width(),
                                ry2 = 48 / $("#small").height();

                        if($.browser.version == 8.0 || $.browser.version == 7.0 || $.browser.version == 6.0){
                            pre_img2($('.pre-1 img'), rx, fih, ry, fiw, cx, cy, ow, oh);
                            pre_img2($('.pre-2 img'), rx1, fih, ry1, fiw, cx, cy, ow, oh);
                            pre_img2($('.pre-3 img'), rx2,  fih, ry2, fiw, cx, cy, ow, oh);
                        }else{
                            pre_img2($('.pre-1 img'), rx, fiw, ry, fih, cx, cy, ow, oh);
                            pre_img2($('.pre-2 img'), rx1, fiw, ry1, fih, cx, cy, ow, oh);
                            pre_img2($('.pre-3 img'), rx2, fiw, ry2, fih, cx, cy, ow, oh);
                        }

                        $(".jcrop_w img").css({
                            left: ow,
                            top: oh
                        });

                        if( deg > 0){
                            if(_data == 270){
                                _data = 0;
                            }else{
                                _data = _data + 90;
                            }
                        }else{
                            if(_data == 0){
                                _data = 270;
                            }else{
                                _data = _data - 90;
                            }
                        }
                        $("#d").val(_data);
                        $(".jc-demo-box").attr("data", _data);
                    }

                    //放大缩小图片
                    function imgToSize(size) {
                        var iw = $('.jcrop_w>img').width(),
                            ih = $('.jcrop_w>img').height(),
                            _data = $(".jc-demo-box").attr("data"),
                            _w = Math.round(iw + size),
                            _h = Math.round(((iw + size) * ih) / iw);

                        if(($.browser.version == 8.0 || $.browser.version == 7.0 || $.browser.version == 6.0) && (_data == 90 || _data == 270)){
                            $('.jcrop_w>img').width(_h).height(_w);
                        }else{
                            $('.jcrop_w>img').width(_w).height(_h);
                        }

                        var fiw = $('.jcrop_w>img').width(),
                            fih = $('.jcrop_w>img').height(),
                            ow = (395 - fiw) / 2,
                            oh = (340 - fih) / 2,
                            cx = $("#small").position().left,
                            cy = $("#small").position().top,
                            rx = 110 / $("#small").width(),
                            ry = 135 / $("#small").height(),
                            rx1 = 73 / $("#small").width(),
                            ry1 = 90 / $("#small").height(),
                            rx2 = 40 / $("#small").width(),
                            ry2 = 48 / $("#small").height();

                        if(($.browser.version == 8.0 || $.browser.version == 7.0 || $.browser.version == 6.0) && (_data == 90 || _data == 270)){
                            pre_img2($('.pre-1 img'), rx, fih, ry, fiw, cx, cy, ow, oh);
                            pre_img2($('.pre-2 img'), rx1, fih, ry1, fiw, cx, cy, ow, oh);
                            pre_img2($('.pre-3 img'), rx2, fih, ry2, fiw, cx, cy, ow, oh);
                        }else{
                            pre_img2($('.pre-1 img'), rx, fiw, ry, fih, cx, cy, ow, oh);
                            pre_img2($('.pre-2 img'), rx1, fiw, ry1, fih, cx, cy, ow, oh);
                            pre_img2($('.pre-3 img'), rx2,  fiw, ry2, fih, cx, cy, ow, oh);
                        }
                        $(".jcrop_w img").css({
                            left: ow,
                            top: oh
                        });

                    };
                    function pre_img2(obj, rx, iw, ry, ih, cx, cy, ow, oh){
                        obj.css({
                            width: Math.round(rx * iw) + 'px',
                            height: Math.round(ry * ih) + 'px'
                        });
                        if( cy >= oh && cx >= ow){
                            obj.css({
                                marginLeft: '-' + Math.round(rx * (cx - ow)) + 'px',
                                marginTop: '-' + Math.round(ry * (cy - oh)) + 'px'
                            });
                        }else if( cy <= oh && cx >= ow){
                            obj.css({
                                marginLeft: "-" + Math.round(rx * (cx - ow)) + 'px',
                                marginTop: Math.round(ry * (oh - cy)) + 'px'
                            });
                        }else if( cy >= oh && cx <= ow){
                            obj.css({
                                marginLeft: Math.round(rx * (ow - cx)) + 'px',
                                marginTop: '-' + Math.round(ry * (cy - oh)) + 'px'
                            });
                        }else if( cy <= oh && cx <= ow){
                            obj.css({
                                marginLeft: Math.round(rx * (ow - cx)) + 'px',
                                marginTop: Math.round(ry * (oh - cy)) + 'px'
                            });
                        }
                    };

                    function showPreview(c){
                        global_api = c;
                        var iw = $('.jcrop_w>img').width(),
                            ih = $('.jcrop_w>img').height(),
                            ow = (394 - iw) / 2,
                            oh = (340 - ih) / 2,
                            rx = 135 / c.w,
                            ry = 135 / c.h,
                            rx1 = 90 / c.w,
                            ry1 = 90 / c.h,
                            rx2 = 48 / c.w,
                            ry2 = 48 / c.h,
                            _data = $(".jc-demo-box").attr("data");

                        if(($.browser.version == 8.0 || $.browser.version == 7.0 || $.browser.version == 6.0) && (_data == 90 || _data == 270)){
                            pre_img2($('.pre-1 img'), rx, ih, ry, iw, c.x, c.y, ow, oh);
                            pre_img2($('.pre-2 img'), rx1, ih, ry1, iw, c.x, c.y, ow, oh);
                            pre_img2($('.pre-3 img'), rx2, ih, ry2, iw, c.x, c.y, ow, oh);
                        }else{
                            pre_img2($('.pre-1 img'), rx, iw, ry, ih, c.x, c.y, ow, oh);
                            pre_img2($('.pre-2 img'), rx1, iw, ry1, ih, c.x, c.y, ow, oh);
                            pre_img2($('.pre-3 img'), rx2, iw, ry2, ih, c.x, c.y, ow, oh);
                        }
                        $('#x').val(c.x);
                        $('#y').val(c.y);
                        $('#w').val(c.w);
                        $('#h').val(c.h);

                        var img=document.getElementById("preview1");  
                        var ctx=document.getElementById("head_canvas").getContext("2d");  
                        var bod_w = nature_w/iw; //缩放比例
                        var bod_h = nature_h/ih; //缩放比例 
                        if (mode == "b"){
                            ctx.drawImage(img,(c.x-($("#target").width()-iw)/2)*bod_w,c.y*bod_h, c.w*bod_w, c.h*bod_h,0,0,140,140);
                        }else if (mode == "a"){
                            ctx.drawImage(img,c.x*bod_w,(c.y-($("#target").height()-ih)/2)*bod_h, c.w*bod_w, c.h*bod_h,0,0,140,140);
                        }else{
                            ctx.drawImage(img,c.x-($("#target").width()-iw)/2,c.y-($("#target").height()-ih)/2, c.w, c.h,0,0,140,140);
                        }
                        if (c.x-($("#target").width()-iw)/2 <= 0){
                            jcropApi.setOptions({
                                allowMove: false
                            })
                        }else{
                            jcropApi.setOptions({
                                allowMove: true
                            })
                        }
                    }
                } 
            });

            $('#submit').on('click', function (event) {
                var _base64 = document.getElementById("head_canvas").toDataURL();
                console.log(_base64);
                var filename = (page.sd.register.items["account"]).toString() + "_head.jpg";
                page.hide();
                page._upload(_base64,filename,mainpage);
            })
        });
    };

    RegisterChangeHeaderModal.prototype.submit = function() {};

    return RegisterChangeHeaderModal;

  })(Modal);

  RegisterRechargeModal = (function(_super) {
    __extends(RegisterRechargeModal, _super);

    function RegisterRechargeModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.initpage = __bind(this.initpage, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterRechargeModal.__super__.constructor.call(this, "register-recharge-modal-", "html/register_recharge_modal.html");
    }

    RegisterRechargeModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register_recharge;
      vm.submit = this.submit;
      vm.option = "wechat";
      vm.compare_result = "";
      return vm.pay_result = "";
    };

    RegisterRechargeModal.prototype.rendered = function() {
      RegisterRechargeModal.__super__.rendered.call(this);
      this.vm.pay_result = "";
      return this.initpage(this);
    };

    RegisterRechargeModal.prototype.submit = function() {
      return this.hide();
    };

    RegisterRechargeModal.prototype.initpage = function(page) {
      return $(function() {
            $('#form_wizard_1').bootstrapWizard({
                'nextSelector': '.button-next',
                'previousSelector': '.button-previous',
                onTabClick: function (tab, navigation, index) {
                    //alert('on tab click disabled');
                    return false;
                },
                onNext: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    
                    if (current == 2){
                        var codes = document.getElementById("code");
                        if(page.vm.option == "wechat"){
                            codes.src = "images/wechat_code.png";
                            page.vm.pay_result = "打开微信,扫描以下二维码,向我支付";
                        }else if (page.vm.option == "alipay"){
                            codes.src = "images/alipay_code.png";
                            page.vm.pay_result = "打开支付宝,扫描以下二维码,向我支付";
                        }else{
                            return false;
                            codes.src = "images/credit_code.jpg";
                            page.vm.pay_result = "打开微信,扫描以下二维码,向我支付";
                        }
                    }else{
                        return false;
                        /*
                        if (page.vm.show_canvas == false){
                            $('.alert-error', $('#submit_form')).show();
                            return false;
                        }else{
                            page.compare();
                            $('.alert-error', $('#submit_form')).hide();
                        }
                        */
                    }
                    
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                    } else {
                        $('#form_wizard_1').find('.button-previous').show();
                    }
                    //console.log(page.vm.show_card_result);
                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                        //displayConfirm();
                    } else {
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }
                    //App.scrollTo($('.page-title'));
                },
                onPrevious: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('.alert-error', $('#submit_form')).hide();
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                        page.vm.next_action = "读卡"
                    } else {
                        page.vm.compare_result = "正在比对.....";
                        //$('#div_result').find("#show_result_pass").hide();
                        var pass = document.getElementById('show_result_pass');
                        var mirror = document.getElementById('mirror');
                        pass.src="";
                        mirror.src = "";
                        page.vm.show_canvas = false;
                        $('#form_wizard_1').find('.button-previous').show();
                    }

                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                    } else {
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }

                    //App.scrollTo($('.page-title'));
                },
                onTabShow: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    var $percent = (current / total) * 100;
                    $('#form_wizard_1').find('.bar').css({
                        width: $percent + '%'
                    });
                }
            });
            $('#form_wizard_1').find('.button-previous').hide();
            $('#form_wizard_1 .button-submit').click(function () {
                page.attach();
            }).hide();
        });
    };

    return RegisterRechargeModal;

  })(Modal);

  RegisterRecordModal = (function(_super) {
    __extends(RegisterRecordModal, _super);

    function RegisterRecordModal(sd, page, uid) {
      this.sd = sd;
      this.page = page;
      this.uid = uid;
      this.own = __bind(this.own, this);
      this.person = __bind(this.person, this);
      this.person_data = __bind(this.person_data, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterRecordModal.__super__.constructor.call(this, "register-recharge-modal-", "html/register_record_modal.html");
    }

    RegisterRecordModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register_record;
      vm.submit = this.submit;
      vm.option = "wechat";
      vm.compare_result = "";
      vm.pay_result = "";
      vm.personName = "";
      vm.sex = "";
      vm.birthday = "";
      vm.nation = "";
      vm.personId = "";
      vm.address = "";
      vm.startDate = "";
      vm.endDate = "";
      return vm.department = "";
    };

    RegisterRecordModal.prototype.rendered = function() {
      RegisterRecordModal.__super__.rendered.call(this);
      this.vm.pay_result = "";
      this.person(this, this.uid);
      this.own(this, this.uid);
      $("#myTab li:eq(0) a").tab("show");
      return this.person_data(this, this.uid);
    };

    RegisterRecordModal.prototype.submit = function() {
      return this.hide();
    };

    RegisterRecordModal.prototype.person_data = function(page, uid) {
      return $(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            xhr.open('get','http://' + page.sd.host + '/api/getCMsg/' + uid,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    if (xhr.responseText == "null"){
                        return (new MessageModal(lang.register_record.no_data)).attach();
                    }else{
                        var _data = JSON.parse(xhr.responseText);
                        page.vm.personName = _data.personName;
                        page.vm.sex = _data.sex;
                        page.vm.birthday = _data.birthday;
                        page.vm.nation = _data.nation;
                        page.vm.personId = _data.personId;
                        page.vm.address = _data.address;
                        page.vm.startDate = _data.startDate;
                        page.vm.endDate = _data.endDate;
                        page.vm.department = _data.department;
                    }
                }  
            }
        });
    };

    RegisterRecordModal.prototype.person = function(page, uid) {
      return $(document).ready(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            var header = document.getElementById("person");
            var cxt= header.getContext("2d");
            xhr.open('get','http://' + page.sd.host + '/api/getComparePic/' + uid + '/person' ,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    var img = new Image();
                    img.src=xhr.responseText;
                    img.onload = function(){
                        var w = Math.min(400, img.width);
                        var h = img.height * (w / img.width);
                        header.width = w;
                        header.height = h;
                        cxt.drawImage(img,0,0);
                    }
                    console.log(xhr.responseText);  
                }  
            }
        });
    };

    RegisterRecordModal.prototype.own = function(page, uid) {
      return $(document).ready(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            var header = document.getElementById("own");
            var cxt= header.getContext("2d");
            xhr.open('get','http://' + page.sd.host + '/api/getComparePic/' + uid + '/own' ,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    var img = new Image();
                    img.src=xhr.responseText;
                    img.onload = function(){
                        var w = Math.min(1000, img.width);
                        var h = img.height * (w / img.width);
                        header.width = w;
                        header.height = h;
                        cxt.drawImage(img,0,0);
                    }
                    //console.log(xhr.responseText);  
                }  
            }
        });
    };

    return RegisterRecordModal;

  })(Modal);

  RegisterDetailModal = (function(_super) {
    __extends(RegisterDetailModal, _super);

    function RegisterDetailModal(sd, page, uid) {
      this.sd = sd;
      this.page = page;
      this.uid = uid;
      this.on_load = __bind(this.on_load, this);
      this.person_data = __bind(this.person_data, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterDetailModal.__super__.constructor.call(this, "register-recharge-modal-", "html/register_detail_modal.html");
    }

    RegisterDetailModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register_record;
      vm.submit = this.submit;
      vm.account = "";
      vm.user = "";
      vm.realname = "";
      vm.created = "";
      vm.sex = "";
      vm.tel = "";
      vm.email = "";
      vm.userlevel = "";
      vm.average = "";
      vm.recharge = "";
      vm.remain = "";
      vm.total = "";
      vm.location = "";
      return vm.hotelname = "";
    };

    RegisterDetailModal.prototype.rendered = function() {
      RegisterDetailModal.__super__.rendered.call(this);
      $("#myTab li:eq(0) a").tab("show");
      this.on_load(this);
      return this.person_data(this, this.uid);
    };

    RegisterDetailModal.prototype.submit = function() {
      return this.hide();
    };

    RegisterDetailModal.prototype.person_data = function(page, uid) {
      return $(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            xhr.open('get','http://' + page.sd.host + '/api/getUMsg/' + uid,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    if (xhr.responseText == "null"){
                        return (new MessageModal(lang.register_record.no_data)).attach();
                    }else{
                        var _data = JSON.parse(xhr.responseText);
                        page.vm.account = _data.detail.account;
                        page.vm.user = _data.detail.user;
                        page.vm.realname = _data.detail.realname;
                        page.vm.created =_data.detail.created;
                        page.vm.sex = _data.detail.sex;
                        page.vm.tel = _data.detail.tel;
                        page.vm.email = _data.detail.email;
                        page.vm.userlevel =_data.detail.userlevel;
                        page.vm.average = _data.detail.average;
                        page.vm.recharge = _data.detail.recharge;
                        page.vm.remain = _data.detail.remain;
                        page.vm.total = _data.detail.total;
                        page.vm.location = _data.detail.location;
                        page.vm.hotelname = _data.detail.hotelname;

                        if (page.vm.hotelname == ""){
                            page.vm.hotelname = "未填写";
                        }
                        if (page.vm.location == ""){
                            page.vm.location = "未填写";
                        }
                        if (page.vm.realname == ""){
                            page.vm.realname = "未填写";
                        }
                        if (page.vm.tel == ""){
                            page.vm.tel = "未填写";
                        }
                        if (page.vm.sex == ""){
                            page.vm.sex = "未填写";
                        }
                        if (page.vm.user == ""){
                            page.vm.user = "未填写";
                        }
                    }
                }  
            }
        });
    };

    RegisterDetailModal.prototype.on_load = function(page) {
      return $(document).ready(function() {
            try{
                var xhr;  
                if (window.XMLHttpRequest){  
                    xhr=new XMLHttpRequest();  
                }else{  
                    xhr=new ActiveXObject("Microsoft.XMLHTTP");  
                }
                var header = document.getElementById("person");
                var cxt= header.getContext("2d");
                xhr.open('get','http://' + page.sd.host + '/api/downloadAvatar/' + page.uid ,true);
                xhr.send(null);
                xhr.onreadystatechange = function(){  
                    if(xhr.readyState==4 || xhr.readyState==200){
                        var img = new Image();
                        img.src=xhr.responseText;
                        img.onload = function(){
                            var w = Math.min(400, img.width);
                            var h = img.height * (w / img.width);
                            header.width = w;
                            header.height = h;
                            cxt.drawImage(img,0,0);
                        }  
                    }  
                }
            }catch(e){
                console.log('error');
            }
        });
    };

    return RegisterDetailModal;

  })(Modal);

  RegisterAddModal = (function(_super) {
    __extends(RegisterAddModal, _super);

    function RegisterAddModal(sd, page) {
      this.sd = sd;
      this.page = page;
      this.init = __bind(this.init, this);
      this.submit = __bind(this.submit, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterAddModal.__super__.constructor.call(this, "register-recharge-modal-", "html/register_add_modal.html");
    }

    RegisterAddModal.prototype.define_vm = function(vm) {
      vm.lang = lang.register_record;
      vm.submit = this.submit;
      vm.register_email = "";
      vm.register_name = "";
      vm.register_passwd = "";
      vm.register_confirm_passwd = "";
      vm.register_hotelname = "";
      vm.user_id = "";
      return vm.forget_email = "";
    };

    RegisterAddModal.prototype.rendered = function() {
      RegisterAddModal.__super__.rendered.call(this);
      new PCAS('location_p', 'location_c', 'location_a', '广东省', '', '');
      return this.init(this, this.page);
    };

    RegisterAddModal.prototype.submit = function() {
      var machine_detail, query, selected_a, selected_c, selected_p;
      if ($("form.register-form").validate().form()) {
        selected_p = $("#location_p").val();
        selected_c = $("#location_c").val();
        selected_a = $("#location_a").val();
        if (selected_a === "市辖区") {
          return (new MessageModal(this.vm.lang.location_a_error)).attach();
        } else {
          query = new SessionRest(this.sd.host);
          machine_detail = query.register(this.vm.register_name, this.vm.register_passwd, this.vm.register_email, selected_p + selected_c + selected_a + this.vm.register_hotelname);
          machine_detail.done((function(_this) {
            return function(data) {
              if (data.status === "success") {
                (new MessageModal(lang.centrallogin.register_success)).attach();
                _this.hide();
                return _this.page.attach();
              } else {
                return (new MessageModal(lang.centrallogin.email_error)).attach();
              }
            };
          })(this));
          return machine_detail.fail(function() {
            return (new MessageModal(page.lang.centrallogin.link_error)).attach();
          });
        }
      }
    };

    RegisterAddModal.prototype.init = function(page, mainpage) {
      return $(function() {
            $('.register-form').validate({
                errorElement: 'label', //default input error message container
                errorClass: 'help-inline', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",
                rules: {
                    username: {
                        required: true
                    },
                    password: {
                        required: true
                    },
                    rpassword: {
                        equalTo: "#register_password"
                    },
                    email: {
                        required: true,
                        email: true
                    },
                    tnc: {
                        required: true
                    },
                    location: {
                        required: true
                    }
                },

                messages: { // custom messages for radio buttons and checkboxes
                    tnc: {
                        required: "请勾选"
                    }
                },

                invalidHandler: function (event, validator) { //display error alert on form submit   

                },

                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.control-group').addClass('error'); // set error class to the control group
                },

                success: function (label) {
                    label.closest('.control-group').removeClass('error');
                    label.remove();
                },

                errorPlacement: function (error, element) {
                    if (element.attr("name") == "tnc") { // insert checkbox errors after the container                  
                        error.addClass('help-small no-left-padding').insertAfter($('#register_tnc_error'));
                    } else {
                        error.addClass('help-small no-left-padding').insertAfter(element.closest('.input-icon'));
                    }
                },

                submitHandler: function (form) {
                    var selected_p = $("#location_p").val();
                    var selected_c = $("#location_c").val();
                    var selected_a = $("#location_a").val();

                    if (selected_a == "市辖区"){
                        return (new MessageModal(page.vm.lang.location_a_error)).attach();
                    }else{
                        var machine_detail, query;
                        query = new SessionRest(page.sd.host);
                        machine_detail = query.register(page.vm.register_name,page.vm.register_passwd,page.vm.register_email,selected_p + selected_c + selected_a + page.vm.register_hotelname);
                        machine_detail.done(function(data) {
                          if (data.status === "success") {
                            return (new MessageModal(lang.centrallogin.register_success)).attach();
                          } else {
                            return (new MessageModal(lang.centrallogin.email_error)).attach();
                            }
                        });
                        page.hide();
                        mainpage.attach();
                        return machine_detail.fail(function() {
                          return (new MessageModal(page.lang.centrallogin.link_error)).attach();
                        });
                    }
                }
            });
        });
    };

    return RegisterAddModal;

  })(Modal);

  FaceQuickChangeCam = (function(_super) {
    __extends(FaceQuickChangeCam, _super);

    function FaceQuickChangeCam(sd, page, selected) {
      this.sd = sd;
      this.page = page;
      this.selected = selected;
      this.submit = __bind(this.submit, this);
      this.connect_cam = __bind(this.connect_cam, this);
      this.change_cam = __bind(this.change_cam, this);
      this.init = __bind(this.init, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FaceQuickChangeCam.__super__.constructor.call(this, "central-server-modal-", "html/face_change_cam_modal.html");
      this.mode = this.selected;
    }

    FaceQuickChangeCam.prototype.define_vm = function(vm) {
      this._cam = new CameraManager;
      vm.lang = lang.central_modal;
      vm.submit = this.submit;
      vm.username = "admin";
      vm.passwd = "12345";
      vm.ip = "192.168.2.124";
      vm.port = "554";
      vm.mode = this.mode;
      vm.options_cam = [
        {
          key: "usb摄像头",
          value: "usb"
        }, {
          key: "ip摄像头",
          value: "ip"
        }
      ];
      return vm.show_url = false;
    };

    FaceQuickChangeCam.prototype.rendered = function() {
      FaceQuickChangeCam.__super__.rendered.call(this);
      this.init();
      return $("#cam_option").change((function(_this) {
        return function() {
          var selected;
          selected = $("#cam_option").val();
          if (selected === "ip") {
            return _this.vm.show_url = true;
          } else {
            return _this.vm.show_url = false;
          }
        };
      })(this));

      /*$("form.create").validate(
          valid_opt(
              rules:
                  ip:
                      required: true
                      regex: /\d{1,3}(\.\d{1,3})$/
                      same:true
                  machinetype:
                      required: true
              messages:
                  ip:
                      required: "请输入ip地址"
                  machinetype:
                      required: "请选择类型"))
       */
    };

    FaceQuickChangeCam.prototype.init = function() {
      $("#cam_option option[value='" + this.selected + "']").attr("selected", "selected");
      $("#cam_option").chosen();
      if (this.selected === "ip") {
        return this.vm.show_url = true;
      }
    };

    FaceQuickChangeCam.prototype.change_cam = function() {
      var selected;
      selected = $("#cam_option").val();
      this.mode = selected;
      if (this.mode === "ip") {
        this.vm.show_ip_cam = true;
        return this.ip_camera(this);
      } else {
        return this.vm.show_ip_cam = false;
      }
    };

    FaceQuickChangeCam.prototype.connect_cam = function() {
      var url;
      url = 'rtsp://' + this.vm.username + ':' + this.vm.passwd + '@' + this.vm.ip + ':' + this.vm.port + '/vedio.mp4';
      console.log(url);
      return this._cam.connect_ipcam(url);
    };

    FaceQuickChangeCam.prototype.submit = function() {
      var selected;
      selected = $("#cam_option").val();
      this.page.frozen();
      this.page.change_cam(selected);
      return this.hide();
    };

    return FaceQuickChangeCam;

  })(Modal);

  this.FaceQuickChangeCam = FaceQuickChangeCam;

  this.RegisterAddModal = RegisterAddModal;

  this.RegisterDetailModal = RegisterDetailModal;

  this.RegisterChangePasswdModal = RegisterChangePasswdModal;

  this.RegisterRecordModal = RegisterRecordModal;

  this.RegisterRechargeModal = RegisterRechargeModal;

  this.GetcardResultModal = GetcardResultModal;

  this.RegisterChangeDataModal = RegisterChangeDataModal;

  this.RegisterChangeHeadModal = RegisterChangeHeadModal;

  this.RegisterChangeHeaderModal = RegisterChangeHeaderModal;

  this.FaceUpLoadModal = FaceUpLoadModal;

  this.CentralChangeEmailModal = CentralChangeEmailModal;

  this.CentralUnmonitorModal = CentralUnmonitorModal;

  this.CentralHandleLogModal = CentralHandleLogModal;

  this.CentralEmailDeleteModal = CentralEmailDeleteModal;

  this.CentralAddEmailModal = CentralAddEmailModal;

  this.CentralChangeValueModal = CentralChangeValueModal;

  this.CentralDownloadLogModal = CentralDownloadLogModal;

  this.CentralManualModal = CentralManualModal;

  this.CentralCreateServerModal = CentralCreateServerModal;

  this.CentralCreateStoreModal = CentralCreateStoreModal;

  this.CentralCreateClientModal = CentralCreateClientModal;

  this.CentralStartModal = CentralStartModal;

  this.CentralExpandModal = CentralExpandModal;

  this.CentralSearchModal = CentralSearchModal;

  this.CentralServerCpuModal = CentralServerCpuModal;

  this.CentralServerCacheModal = CentralServerCacheModal;

  this.CentralServerMemModal = CentralServerMemModal;

  this.CentralStoreDetailModal = CentralStoreDetailModal;

  this.CentralRecordDeleteModal = CentralRecordDeleteModal;

  this.CentralPieModal = CentralPieModal;

  this.ConfirmModal = ConfirmModal;

  this.ConfirmModal_more = ConfirmModal_more;

  this.ConfirmModal_link = ConfirmModal_link;

  this.ConfirmModal_unlink = ConfirmModal_unlink;

  this.ConfirmModal_scan = ConfirmModal_scan;

  this.EthBondingModal = EthBondingModal;

  this.InitrCreateModal = InitrCreateModal;

  this.InitrDeleteModal = InitrDeleteModal;

  this.MessageModal = MessageModal;

  this.MessageModal_reboot = MessageModal_reboot;

  this.Modal = Modal;

  this.RaidCreateDSUUI = RaidCreateDSUUI;

  this.RaidSetDiskRoleModal = RaidSetDiskRoleModal;

  this.RaidCreateModal = RaidCreateModal;

  this.RaidDeleteModal = RaidDeleteModal;

  this.ResDeleteModal = ResDeleteModal;

  this.ServerUI = ServerUI;

  this.SyncDeleteModal = SyncDeleteModal;

  this.VolumeCreateModal = VolumeCreateModal;

  this.VolumeDeleteModal = VolumeDeleteModal;

  this.VolumeMapModal = VolumeMapModal;

  this.VolumeUnmapModal = VolumeUnmapModal;

  this.FsCreateModal = FsCreateModal;

  this.FsChooseModal = FsChooseModal;

}).call(this);

(function() {
  var CentralClientlistPage, CentralLoginPage, CentralMonitorPage, CentralServerDetailPage, CentralServerViewPage, CentralServerlistPage, CentralServermonitorPage, CentralStoreDetailPage, CentralStoreViewPage, CentralStorelistPage, CentralStoremonitorPage, CentralWarningPage, CountPage, DetailTablePage, DiskPage, FacePage, FaceQuickPage, FaceQuickProPage, InitrPage, LoginPage, MaintainPage, ManagerPage, OverviewPage, Page, PreCountPage, QuickModePage, RaidPage, RegisterPage, SettingPage, VolumePage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Page = (function(_super) {
    __extends(Page, _super);

    function Page(prefix, src, attr) {
      if (attr == null) {
        attr = {};
      }
      Page.__super__.constructor.call(this, prefix, src, ".page-content", true, attr);
    }

    return Page;

  })(AvalonTemplUI);

  DetailTablePage = (function(_super) {
    __extends(DetailTablePage, _super);

    function DetailTablePage(prefix, src) {
      this.detail = __bind(this.detail, this);
      DetailTablePage.__super__.constructor.call(this, prefix, src);
    }

    DetailTablePage.prototype.detail = function(e) {
      var html, res, row, tr, vm, _ref;
      if (!this.has_rendered) {
        return;
      }
      tr = $(e.target).parents("tr")[0];
      res = e.target.$vmodel.$model.e;
      if (this.data_table.fnIsOpen(tr)) {
        return $("div", $(tr).next()[0]).slideUp((function(_this) {
          return function() {
            _this.data_table.fnClose(tr);
            res.detail_closed = true;
            if (typeof close_detial === "function") {
              close_detial(res);
            }
            return delete avalon.vmodels[res.id];
          };
        })(this));
      } else {
        try {
          res.detail_closed = false;
          console.log(res);
          _ref = this.detail_html(res), html = _ref[0], vm = _ref[1];
          row = this.data_table.fnOpen(tr, html, "details");
          avalon.scan(row, vm);
          return $("div", row).slideDown();
        } catch (_error) {
          e = _error;
          return console.log(e);
        }
      }
    };

    return DetailTablePage;

  })(Page);

  OverviewPage = (function(_super) {
    __extends(OverviewPage, _super);

    function OverviewPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.refresh_flow = __bind(this.refresh_flow, this);
      this.plot_flow = __bind(this.plot_flow, this);
      this.add_time_to_journal = __bind(this.add_time_to_journal, this);
      this.flow_type = __bind(this.flow_type, this);
      this.flow_data = __bind(this.flow_data, this);
      this.flow_data_opt = __bind(this.flow_data_opt, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      OverviewPage.__super__.constructor.call(this, "overviewpage-", "html/overviewpage.html");
      this.flow_max = 0;
      $(this.sd.disks).on("updated", (function(_this) {
        return function(e, source) {
          var disks, i, _i, _len, _ref;
          disks = [];
          _ref = source.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i.health === "normal") {
              disks.push(i);
            }
          }
          return _this.vm.disk_num = disks.length;
        };
      })(this));
      $(this.sd.raids).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.raid_num = source.items.length;
        };
      })(this));
      $(this.sd.volumes).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.volume_num = source.items.length;
        };
      })(this));
      $(this.sd.initrs).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.initr_num = source.items.length;
        };
      })(this));
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var latest;
          if (_this.has_rendered) {
            latest = source.items[source.items.length - 1];
            _this.vm.cpu_load = parseInt(latest.cpu);
            _this.vm.mem_load = parseInt(latest.mem);
            _this.vm.temp_load = parseInt(latest.temp);
            return _this.refresh_flow();
          }
        };
      })(this));
      $(this.sd.journals).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.journals = _this.add_time_to_journal(source.items.slice(0));
        };
      })(this));
    }

    OverviewPage.prototype.define_vm = function(vm) {
      vm.lang = lang.overviewpage;
      vm.disk_num = 0;
      vm.raid_num = 0;
      vm.volume_num = 0;
      vm.initr_num = 0;
      vm.cpu_load = 0;
      vm.mem_load = 0;
      vm.temp_load = 0;
      vm.journals = [];
      vm.flow_type = "fwrite_mb";
      vm.rendered = this.rendered;
      vm.switch_flow_type = (function(_this) {
        return function(e) {
          var v;
          v = $(e.target).data("flow-type");
          vm.flow_type = v;
          return _this.flow_max = 0;
        };
      })(this);
      vm.switch_to_page = this.switch_to_page;
      vm.$watch("cpu_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("mem_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#mem-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      return vm.$watch("temp_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#temp-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
    };

    OverviewPage.prototype.rendered = function() {
      var $scroller, max, opt, ticks, _base, _base1, _base2, _ref;
      OverviewPage.__super__.rendered.call(this);
      opt = {
        animate: 1000,
        size: 128,
        lineWidth: 10,
        lineCap: "butt",
        barColor: ""
      };
      opt.barColor = App.getLayoutColorCode("green");
      $("#cpu-load").easyPieChart(opt);
      if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
        _base.update(this.vm.cpu_load);
      }
      $("#mem-load").easyPieChart(opt);
      if (typeof (_base1 = $("#mem-load").data("easyPieChart")).update === "function") {
        _base1.update(this.vm.mem_load);
      }
      $("#temp-load").easyPieChart(opt);
      if (typeof (_base2 = $("#temp-load").data("easyPieChart")).update === "function") {
        _base2.update(this.vm.temp_load);
      }
      $scroller = $("#journals-scroller");
      $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: false
      });
      _ref = this.flow_data_opt(), max = _ref[0], ticks = _ref[1];
      return this.plot_flow(max, ticks);
    };

    OverviewPage.prototype.flow_data_opt = function() {
      var flow_peak, i, max, opts, peak, sample, ticks, type, _i, _len, _ref;
      type = this.flow_type();
      flow_peak = Math.max.apply(Math, (function() {
        var _i, _len, _ref, _results;
        _ref = this.sd.stats.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sample = _ref[_i];
          _results.push(sample[type]);
        }
        return _results;
      }).call(this));
      if (flow_peak < 10) {
        opts = (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; _i <= 4; i = ++_i) {
            _results.push({
              peak: 3 + 3 * i,
              max: 6 + 3 * i,
              ticks: [0, 2 + 1 * i, 4 + 2 * i, 6 + 3 * i]
            });
          }
          return _results;
        })();
      } else {
        opts = (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; _i <= 40; i = ++_i) {
            _results.push({
              peak: 30 + 30 * i,
              max: 60 + 30 * i,
              ticks: [0, 20 + 10 * i, 40 + 20 * i, 60 + 30 * i]
            });
          }
          return _results;
        })();
      }
      for (_i = 0, _len = opts.length; _i < _len; _i++) {
        _ref = opts[_i], peak = _ref.peak, max = _ref.max, ticks = _ref.ticks;
        if (flow_peak < peak) {
          break;
        }
      }
      return [max, ticks];
    };

    OverviewPage.prototype.flow_data = function() {
      var data, i, offset, sample, type, zero, _i, _results;
      type = this.flow_type();
      offset = 120 - this.sd.stats.items.length;
      data = (function() {
        var _i, _len, _ref, _results;
        _ref = this.sd.stats.items;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          sample = _ref[i];
          _results.push([i + offset, sample[type]]);
        }
        return _results;
      }).call(this);
      zero = (function() {
        _results = [];
        for (var _i = 0; 0 <= offset ? _i < offset : _i > offset; 0 <= offset ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(e) {
        return [e, 0];
      });
      return zero.concat(data);
    };

    OverviewPage.prototype.flow_type = function() {
      var feature, rw;
      feature = this.sd.systeminfo.data.feature;
      rw = this.vm.flow_type === "fwrite_mb" ? "write" : "read";
      if (__indexOf.call(feature, "monfs") >= 0) {
        return "f" + rw + "_mb";
      } else if (__indexOf.call(feature, "xfs") >= 0) {
        return "n" + rw + "_mb";
      } else {
        return "" + rw + "_mb";
      }
    };

    OverviewPage.prototype.add_time_to_journal = function(items) {
      var change_time, item, journals, localtime, _i, _len;
      journals = [];
      change_time = function funConvertUTCToNormalDateTime(utc)
            {
                var date = new Date(utc);
                var ndt;
                ndt = date.getFullYear()+"/"+(date.getMonth()+1)+"/"+date.getDate()+"-"+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
                return ndt;
            };
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        localtime = change_time(item.created_at * 1000);
        item.message = "[" + localtime + "]  " + item.message;
        journals.push(item);
      }
      return journals;
    };

    OverviewPage.prototype.combine_type = function() {
      var type;
      if (this.vm.flow_type[0] === "f") {
        type = this.vm.flow_type.slice(1);
      } else {
        type = "f" + this.vm.flow_type;
      }
      return type;
    };

    OverviewPage.prototype.plot_flow = function(max, ticks) {
      return this.$flow_stats = $.plot($("#flow_stats"), [this.flow_data()], {
        series: {
          shadowSize: 1
        },
        lines: {
          show: true,
          lineWidth: 0.2,
          fill: true,
          fillColor: {
            colors: [
              {
                opacity: 0.1
              }, {
                opacity: 1
              }
            ]
          }
        },
        yaxis: {
          min: 0,
          max: max,
          tickFormatter: function(v) {
            return "" + v + "MB";
          },
          ticks: ticks
        },
        xaxis: {
          show: false
        },
        colors: ["#6ef146"],
        grid: {
          tickColor: "#a8a3a3",
          borderWidth: 0
        }
      });
    };

    OverviewPage.prototype.refresh_flow = function() {
      var max, ticks, _ref;
      _ref = this.flow_data_opt(), max = _ref[0], ticks = _ref[1];
      if (max === this.flow_max) {
        this.$flow_stats.setData([this.flow_data()]);
        return this.$flow_stats.draw();
      } else {
        this.flow_max = max;
        return this.plot_flow(max, ticks);
      }
    };

    return OverviewPage;

  })(Page);

  DiskPage = (function(_super) {
    __extends(DiskPage, _super);

    function DiskPage(sd) {
      this.sd = sd;
      this._need_format_disks = __bind(this._need_format_disks, this);
      this.need_format = __bind(this.need_format, this);
      this.format_all = __bind(this.format_all, this);
      this.format_disk = __bind(this.format_disk, this);
      this._get_raid_color_map = __bind(this._get_raid_color_map, this);
      this._has_disk = __bind(this._has_disk, this);
      this._get_disk_info = __bind(this._get_disk_info, this);
      this._translate = __bind(this._translate, this);
      this.disk_list = __bind(this.disk_list, this);
      this.get_raids = __bind(this.get_raids, this);
      this.get_slots = __bind(this.get_slots, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      DiskPage.__super__.constructor.call(this, "diskpage-", "html/diskpage.html");
      $(this.sd.disks).on("updated", (function(_this) {
        return function(e, source) {
          _this.vm.disks = _this.subitems();
          _this.vm.need_format = _this.need_format();
          _this.vm.slots = _this.get_slots();
          return _this.vm.raids = _this.get_raids();
        };
      })(this));
      console.log("diskssssssssssss");
      console.log(this.vm.raids);
      console.log(this.vm.disks);
    }

    DiskPage.prototype.define_vm = function(vm) {
      vm.disks = this.subitems();
      vm.slots = this.get_slots();
      vm.raids = this.get_raids();
      vm.lang = lang.diskpage;
      vm.fattr_health = fattr.health;
      vm.fattr_role = fattr.role;
      vm.fattr_host = fattr.host;
      vm.fattr_cap = fattr.cap;
      vm.fattr_import = fattr._import;
      vm.fattr_disk_status = fattr.disk_status;
      vm.fattr_raid_status = fattr.raid_status;
      vm.format_disk = this.format_disk;
      vm.format_all = this.format_all;
      vm.need_format = this.need_format();
      return vm.disk_list = this.disk_list;
    };

    DiskPage.prototype.rendered = function() {
      DiskPage.__super__.rendered.call(this);
      $("[data-toggle='tooltip']").tooltip();
      $(function() {});
      return $("#myTab li:eq(0) a").tab("show");
    };

    DiskPage.prototype.subitems = function() {
      return subitems(this.sd.disks.items, {
        location: "",
        host: "",
        health: "",
        raid: "",
        role: "",
        cap_sector: ""
      });
    };

    DiskPage.prototype.get_slots = function() {
      var dsu, dsu_disk_num, i, o, raid_color_map, slotgroup, slotgroups, _i, _j, _len, _ref, _ref1;
      console.log(this.sd.dsus.items);
      console.log(this.sd.disks.items);
      console.log(this.subitems());
      slotgroups = [];
      slotgroup = [];
      dsu_disk_num = 0;
      raid_color_map = this._get_raid_color_map();
      _ref = this.sd.dsus.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dsu = _ref[_i];
        for (i = _j = 1, _ref1 = dsu.support_disk_nr; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          o = this._has_disk(i, dsu, dsu_disk_num);
          o.raidcolor = raid_color_map[o.raid];
          o.info = this._get_disk_info(i, dsu);
          slotgroup.push(o);
          if (i % 4 === 0) {
            slotgroups.push(slotgroup);
            slotgroup = [];
          }
        }
        dsu_disk_num = dsu_disk_num + dsu.support_disk_nr;
      }
      console.log(slotgroups);
      return slotgroups;
    };

    DiskPage.prototype.get_raids = function() {
      var key, o, raid_color_map, raids, value;
      raids = [];
      raid_color_map = this._get_raid_color_map();
      for (key in raid_color_map) {
        value = raid_color_map[key];
        o = {
          name: key,
          color: value
        };
        raids.push(o);
      }
      return raids;
    };

    DiskPage.prototype.disk_list = function(disks) {
      if (disks.info === "none") {
        return "空盘";
      } else {
        return this._translate(disks.info);
      }
    };

    DiskPage.prototype._translate = function(obj) {
      var health, role, status, type;
      status = '';
      health = {
        'normal': '正常',
        'down': '下线',
        'failed': '损坏'
      };
      role = {
        'data': '数据盘',
        'spare': '热备盘',
        'unused': '未使用',
        'kicked': '损坏',
        'global_spare': '全局热备盘',
        'data&spare': '数据热备盘'
      };
      type = {
        'enterprise': '企业盘',
        'monitor': '监控盘',
        'sas': 'SAS盘'
      };
      $.each(obj, function(key, val) {
        var mod, name;
        switch (key) {
          case 'cap_sector':
            return status += '容量: ' + fattr.cap(val) + '<br/>';
          case 'health':
            return status += '健康: ' + health[val] + '<br/>';
          case 'role':
            return status += '状态: ' + role[val] + '<br/>';
          case 'raid':
            if (val.length === 0) {
              val = '无';
            }
            return status += '阵列: ' + val + '<br/>';
          case 'vendor':
            return status += '品牌: ' + val + '<br/>';
          case 'sn':
            return status += '序列号: ' + val + '<br/>';
          case 'model':
            return status += '型号: ' + val + '<br/>';
          case 'type':
            name = '未知';
            mod = obj.model.match(/(\S*)-/)[1];
            $.each(disks_type, function(j, k) {
              if (__indexOf.call(k, mod) >= 0) {
                return name = type[j];
              }
            });
            return status += '类型: ' + name + '<br/>';
        }
      });
      return status;
    };

    DiskPage.prototype._get_disk_info = function(slotNo, dsu) {
      var disk, info, _i, _len, _ref;
      _ref = this.sd.disks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        disk = _ref[_i];
        if (disk.location === ("" + dsu.location + "." + slotNo)) {
          info = {
            health: disk.health,
            cap_sector: disk.cap_sector,
            role: disk.role,
            raid: disk.raid,
            vendor: disk.vendor,
            sn: disk.sn,
            model: disk.model,
            type: disk.type
          };
          return info;
        }
      }
      return 'none';
    };

    DiskPage.prototype._has_disk = function(slotNo, dsu, dsu_disk_num) {
      var disk, loc, o, rdname, rdrole, _i, _len, _ref;
      loc = "" + (dsu_disk_num + slotNo);
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        disk = _ref[_i];
        if (disk.location === ("" + dsu.location + "." + slotNo)) {
          rdname = disk.raid === "" ? "noraid" : disk.raid;
          rdrole = disk.health === "down" ? "down" : disk.role;
          o = {
            slot: loc,
            role: rdrole,
            raid: rdname,
            raidcolor: ""
          };
          return o;
        }
      }
      o = {
        slot: loc,
        role: "nodisk",
        raid: "noraid",
        raidcolor: ""
      };
      return o;
    };

    DiskPage.prototype._get_raid_color_map = function() {
      var disk, has_global_spare, i, map, raid, raids, rdname, _i, _j, _len, _len1, _ref;
      map = {};
      raids = [];
      i = 1;
      has_global_spare = false;
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        disk = _ref[_i];
        if (disk.role === "global_spare") {
          has_global_spare = true;
          continue;
        }
        rdname = disk.raid === "" ? "noraid" : disk.raid;
        if (__indexOf.call(raids, rdname) < 0) {
          raids.push(rdname);
        }
      }
      for (_j = 0, _len1 = raids.length; _j < _len1; _j++) {
        raid = raids[_j];
        map[raid] = "color" + i;
        i = i + 1;
      }
      map["noraid"] = "color0";
      if (has_global_spare === true) {
        map["global_spare"] = "color5";
      }
      return map;
    };

    DiskPage.prototype.format_disk = function(element) {
      if (element.host === "native") {
        return;
      }
      return (new ConfirmModal(lang.diskpage.format_warning(element.location), (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new DiskRest(_this.sd.host)).format(element.location);
          });
          chain.chain(_this.sd.update("disks"));
          return show_chain_progress(chain).done(function() {
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    DiskPage.prototype.format_all = function() {
      var disks;
      disks = this._need_format_disks();
      return (new ConfirmModal(lang.diskpage.format_all_warning, (function(_this) {
        return function() {
          var chain, disk, i, rest, _i, _len;
          _this.frozen();
          chain = new Chain;
          rest = new DiskRest(_this.sd.host);
          i = 0;
          for (_i = 0, _len = disks.length; _i < _len; _i++) {
            disk = disks[_i];
            chain.chain(function() {
              return (rest.format(disks[i].location)).done(function() {
                return i += 1;
              });
            });
          }
          chain.chain(_this.sd.update("disks"));
          return show_chain_progress(chain).done(function() {
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    DiskPage.prototype.need_format = function() {
      if ((this._need_format_disks()).length !== 0) {
        return true;
      } else {
        return false;
      }
    };

    DiskPage.prototype._need_format_disks = function() {
      var disk, disks, needs;
      disks = this.subitems();
      return needs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = disks.length; _i < _len; _i++) {
          disk = disks[_i];
          if (disk.host !== "native") {
            _results.push(disk);
          }
        }
        return _results;
      })();
    };

    return DiskPage;

  })(Page);

  RaidPage = (function(_super) {
    __extends(RaidPage, _super);

    function RaidPage(sd) {
      this.sd = sd;
      this.delete_raid = __bind(this.delete_raid, this);
      this.create_raid = __bind(this.create_raid, this);
      this.set_disk_role = __bind(this.set_disk_role, this);
      this.close_detial = __bind(this.close_detial, this);
      this.detail_html = __bind(this.detail_html, this);
      this.rendered = __bind(this.rendered, this);
      this.subitems = __bind(this.subitems, this);
      this.define_vm = __bind(this.define_vm, this);
      RaidPage.__super__.constructor.call(this, "raidpage-", "html/raidpage.html");
      table_update_listener(this.sd.raids, "#raid-table", (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.raids = _this.subitems();
          }
        };
      })(this));
      $(this.sd).on("raid", (function(_this) {
        return function(e, raid) {
          var count, delta, i, r, tid, _i, _j, _len, _len1, _ref, _ref1, _results;
          _ref = _this.sd.raids.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            if (r.id === raid.id) {
              r.health = raid.health;
              r.rqr_count = raid.rqr_count;
              r.rebuilding = raid.rebuilding;
              r.rebuild_progress = raid.rebuild_progress;
            }
          }
          _ref1 = _this.vm.raids;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            r = _ref1[_j];
            if (r.id === raid.id) {
              r.rqr_count = raid.rqr_count;
              if (r.rebuilding && raid.health === 'normal') {
                count = 5;
                delta = (1 - r.rebuild_progress) / count;
                i = 0;
                _results.push(tid = setInterval((function() {
                  if (i < 5) {
                    r.rebuild_progress += delta;
                    return i += 1;
                  } else {
                    clearInterval(tid);
                    r.health = raid.health;
                    r.rebuilding = raid.rebuilding;
                    return r.rebuild_progress = raid.rebuild_progress;
                  }
                }), 800));
              } else {
                r.health = raid.health;
                r.rebuilding = raid.rebuilding;
                _results.push(r.rebuild_progress = raid.rebuild_progress);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
    }

    RaidPage.prototype.define_vm = function(vm) {
      vm.raids = this.subitems();
      vm.lang = lang.raidpage;
      vm.fattr_health = fattr.health;
      vm.fattr_rebuilding = fattr.rebuilding;
      vm.fattr_cap_usage = fattr.cap_usage_raid;
      vm.all_checked = false;
      vm.detail = this.detail;
      vm.create_raid = this.create_raid;
      vm.delete_raid = this.delete_raid;
      vm.set_disk_role = this.set_disk_role;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.raids;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    RaidPage.prototype.subitems = function() {
      return subitems(this.sd.raids.items, {
        id: "",
        name: "",
        level: "",
        chunk_kb: "",
        health: "",
        rqr_count: "",
        rebuilding: "",
        rebuild_progress: 0,
        cap_sector: "",
        used_cap_sector: "",
        detail_closed: true,
        checked: false
      });
    };

    RaidPage.prototype.rendered = function() {
      if (!this.has_frozen) {
        this.vm.raids = this.subitems();
      }
      RaidPage.__super__.rendered.call(this);
      return this.data_table = $("#raid-table").dataTable({
        sDom: 't',
        oLanguage: {
          sEmptyTable: "没有数据"
        }
      });
    };

    RaidPage.prototype.detail_html = function(raid) {
      var html, o, vm;
      html = avalon_templ(raid.id, "html/raid_detail_row.html");
      o = this.sd.raids.get(raid.id);
      vm = avalon.define(raid.id, (function(_this) {
        return function(vm) {
          vm.disks = subitems(_this.sd.raid_disks(o), {
            location: "",
            health: "",
            role: ""
          });
          vm.lang = lang.raidpage.detail_row;
          vm.fattr_health = fattr.health;
          return vm.fattr_role = fattr.role;
        };
      })(this));
      $(this.sd.disks).on("updated." + raid.id, (function(_this) {
        return function(e, source) {
          return vm.disks = subitems(_this.sd.raid_disks(o), {
            location: "",
            health: "",
            role: ""
          });
        };
      })(this));
      return [html, vm];
    };

    RaidPage.prototype.close_detial = function(raid) {
      return $(this.sd.disks).off("." + raid.id);
    };

    RaidPage.prototype.set_disk_role = function() {
      if (this.sd.raids.items.length > 0) {
        return (new RaidSetDiskRoleModal(this.sd, this)).attach();
      } else {
        return (new MessageModal(lang.raid_warning.no_raid)).attach();
      }
    };

    RaidPage.prototype.create_raid = function() {
      return (new RaidCreateModal(this.sd, this)).attach();
    };

    RaidPage.prototype.delete_raid = function() {
      var deleted, r;
      deleted = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.raids;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.checked) {
            _results.push($.extend({}, r.$model));
          }
        }
        return _results;
      }).call(this);
      if (deleted.length !== 0) {
        return (new RaidDeleteModal(this.sd, this, deleted)).attach();
      } else {
        return (new MessageModal(lang.raid_warning.no_deleted_raid)).attach();
      }
    };

    return RaidPage;

  })(DetailTablePage);

  VolumePage = (function(_super) {
    __extends(VolumePage, _super);

    function VolumePage(sd) {
      var failed_volumes;
      this.sd = sd;
      this.server_stop = __bind(this.server_stop, this);
      this.server_start = __bind(this.server_start, this);
      this.pre_create = __bind(this.pre_create, this);
      this.disable_sync = __bind(this.disable_sync, this);
      this.enable_sync = __bind(this.enable_sync, this);
      this.sync_switch = __bind(this.sync_switch, this);
      this.disable_fs = __bind(this.disable_fs, this);
      this.enable_fs = __bind(this.enable_fs, this);
      this._apply_fs_name = __bind(this._apply_fs_name, this);
      this.delete_volume = __bind(this.delete_volume, this);
      this.create_volume = __bind(this.create_volume, this);
      this.close_detial = __bind(this.close_detial, this);
      this.detail_html = __bind(this.detail_html, this);
      this.rendered = __bind(this.rendered, this);
      this.subitems = __bind(this.subitems, this);
      this.define_vm = __bind(this.define_vm, this);
      VolumePage.__super__.constructor.call(this, "volumepage-", "html/volumepage.html");
      table_update_listener(this.sd.volumes, '#volume-table', (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.volumes = _this.subitems();
          }
        };
      })(this));
      table_update_listener(this.sd.filesystem, '#volume-table', (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.volumes = _this.subitems();
          }
        };
      })(this));
      $(this.sd.systeminfo).on("updated", (function(_this) {
        return function(e, source) {
          var feature;
          feature = _this.sd.systeminfo.data.feature;
          _this.vm.show_fs = __indexOf.call(feature, "monfs") >= 0 || __indexOf.call(feature, "xfs") >= 0 ? true : false;
          _this.fs_type = __indexOf.call(feature, "monfs") >= 0 ? "monfs" : __indexOf.call(feature, "xfs") >= 0 ? "xfs" : void 0;
          _this.vm.show_cap = __indexOf.call(feature, "xfs") >= 0 ? true : false;
          _this.vm.show_cap_new = __indexOf.call(feature, "monfs") >= 0 || __indexOf.call(feature, "ipsan") >= 0 ? true : false;
          return _this.vm.show_precreate = __indexOf.call(feature, "monfs") >= 0 || __indexOf.call(feature, "xfs") >= 0 && _this._settings.znv ? true : false;
        };
      })(this));
      this.show_chosendir = this._settings.chosendir;
      failed_volumes = [];
      this.lock = false;
      $(this.sd).on("volume", (function(_this) {
        return function(e, volume) {
          var i, r, real_failed_volumes, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          _this.lock = volume.syncing;
          if (_this._settings.sync) {
            if (volume.event === "volume.created") {
              _this.lock = true;
            } else if (volume.event === "volume.sync_done") {
              _this.lock = false;
            }
          }
          _ref = _this.sd.volumes.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            if (r.id === volume.id) {
              r.sync_progress = volume.sync_progress;
              r.sync = volume.syncing;
              r.event = volume.event;
            }
          }
          _ref1 = _this.vm.volumes;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            r = _ref1[_j];
            if (r.id === volume.id) {
              r.sync_progress = volume.sync_progress;
              r.syncing = volume.syncing;
              r.event = volume.event;
              r.sync = volume.syncing;
            }
          }
          real_failed_volumes = [];
          if (volume.event === "volume.failed") {
            volume = _this.sd.volumes.get(e.uuid);
            failed_volumes.push(r);
          }
          _ref2 = _this.sd.volumes.items;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            i = _ref2[_k];
            if (i.health === "failed") {
              real_failed_volumes.push(i);
            }
          }
          if (failed_volumes.length === real_failed_volumes.length && failed_volumes.length) {
            (new SyncDeleteModal(_this.sd, _this, real_failed_volumes)).attach();
            failed_volumes = [];
          }
        };
      })(this));
    }

    VolumePage.prototype.define_vm = function(vm) {
      this._settings = new (require("settings").Settings);
      vm.volumes = this.subitems();
      vm.lang = lang.volumepage;
      vm.fattr_health = fattr.health;
      vm.fattr_cap = fattr.cap;
      vm.fattr_precreating = fattr.precreating;
      vm.detail = this.detail;
      vm.all_checked = false;
      vm.create_volume = this.create_volume;
      vm.delete_volume = this.delete_volume;
      vm.enable_fs = this.enable_fs;
      vm.disable_fs = this.disable_fs;
      vm.fattr_synchronizing = fattr.synchronizing;
      vm.fattr_cap_usage_vol = fattr.cap_usage_vol;
      vm.show_sync = this._settings.sync;
      vm.enable_sync = this.enable_sync;
      vm.pause_synv = this.pause_sync;
      vm.disable_sync = this.disable_sync;
      vm.sync_switch = this.sync_switch;
      vm.show_fs = this.show_fs;
      vm.show_precreate = this.show_precreate;
      vm.pre_create = this.pre_create;
      vm.server_start = this.server_start;
      vm.server_stop = this.server_stop;
      vm.show_cap = this.show_cap;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.volumes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    VolumePage.prototype.subitems = function() {
      var items, v, _i, _len;
      items = subitems(this.sd.volumes.items, {
        id: "",
        name: "",
        health: "",
        cap_sector: "",
        used: "",
        detail_closed: true,
        checked: false,
        fs_action: "enable",
        syncing: '',
        sync_progress: 0,
        sync: '',
        precreating: "",
        precreate_progress: "",
        precreate_action: "unavail",
        event: ""
      });
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        v = items[_i];
        if (v.used) {
          v.fs_action = "disable";
          v.precreate_action = "precreating";
          if (v.precreating !== true && v.precreate_progress === 0) {
            v.precreate_action = "enable_precreate";
          }
        } else {
          v.fs_action = "enable";
          v.precreate_action = "unavail";
        }
      }
      return items;
    };

    VolumePage.prototype.rendered = function() {
      VolumePage.__super__.rendered.call(this);
      if (!this.has_frozen) {
        this.vm.volumes = this.subitems();
      }
      this.data_table = $("#volume-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    VolumePage.prototype.detail_html = function(volume) {
      var html, o, vm;
      html = avalon_templ(volume.id, "html/volume_detail_row.html");
      o = this.sd.volumes.get(volume.id);
      vm = avalon.define(volume.id, (function(_this) {
        return function(vm) {
          vm.initrs = subitems(_this.sd.volume_initrs(o), {
            active_session: "",
            wwn: ""
          });
          vm.lang = lang.volumepage.detail_row;
          return vm.fattr_active_session = fattr.active_session;
        };
      })(this));
      $(this.sd.initrs).on("updated." + volume.id, (function(_this) {
        return function(e, source) {
          return vm.initrs = subitems(_this.sd.volume_initrs(o), {
            active_session: "",
            wwn: ""
          });
        };
      })(this));
      return [html, vm];
    };

    VolumePage.prototype.close_detial = function(volume) {
      return $(this.sd.initrs).off("." + volume.id);
    };

    VolumePage.prototype.create_volume = function() {
      var i, raids_available, volume_syncing, _i, _j, _len, _len1, _ref, _ref1;
      if (this.lock) {
        volume_syncing = [];
        _ref = this.subitems();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.syncing === true) {
            volume_syncing.push(i.name);
          }
        }
        (new MessageModal(lang.volumepage.th_syncing_warning(volume_syncing))).attach();
        return;
      }
      raids_available = [];
      _ref1 = this.sd.raids.items;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        if (i.health === "normal") {
          raids_available.push(i);
        }
      }
      if (raids_available.length > 0) {
        return (new VolumeCreateModal(this.sd, this)).attach();
      } else {
        return (new MessageModal(lang.volume_warning.no_raid)).attach();
      }
    };

    VolumePage.prototype.delete_volume = function() {

      /*
      deleted = ($.extend({},v.$model) for v in @vm.volumes when v.checked)
      lvs_with_fs = []
      for fs_o in @sd.filesystem.data
          lvs_with_fs.push fs_o.volume
      
      for v in deleted
          if v.used
              if v.name in lvs_with_fs
                  (new MessageModal(lang.volume_warning.fs_on_volume(v.name))).attach()
              else if @sd.volume_initrs(v).length isnt 0
                  (new MessageModal(lang.volume_warning.volume_mapped_to_initrs(v.name))).attach()
              return
          else if @lock
              volume_syncing = []
              for i in @subitems()
                  if i.syncing == true
                      volume_syncing.push i.name             
              (new MessageModal lang.volumepage.th_syncing_warning(volume_syncing)).attach()
              return
      if deleted.length isnt 0
          (new VolumeDeleteModal(@sd, this, deleted)).attach()
      else
          (new MessageModal(lang.volume_warning.no_deleted_volume)).attach()
       */
    };

    VolumePage.prototype._apply_fs_name = function() {
      var availiable_names, fs_o, i, max, used_names, _i, _j, _len, _ref, _ref1;
      max = this._settings.fs_max;
      used_names = [];
      availiable_names = [];
      _ref = this.sd.filesystem.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fs_o = _ref[_i];
        used_names.push(fs_o.name);
      }
      for (i = _j = 1; 1 <= max ? _j <= max : _j >= max; i = 1 <= max ? ++_j : --_j) {
        if (_ref1 = "myfs" + i, __indexOf.call(used_names, _ref1) >= 0) {
          continue;
        } else {
          availiable_names.push("myfs" + i);
        }
      }
      if (availiable_names.length === 0) {
        return "";
      } else {
        return availiable_names[0];
      }
    };

    VolumePage.prototype.enable_fs = function(v) {
      var feature, fs_name;
      if (this.sync) {
        (new MessageModal(lang.volumepage.th_syncing_warning)).attach();
        return;
      }
      fs_name = this._apply_fs_name();
      feature = this.sd.systeminfo.data.feature[0];
      if (v.used) {
        return (new MessageModal(lang.volume_warning.volume_mapped_to_fs(v.name))).attach();
      } else if (fs_name === "") {
        if ('monfs' === feature) {
          return (new MessageModal(lang.volume_warning.only_support_one_fs)).attach();
        } else if ('xfs' === feature) {
          return (new MessageModal(lang.volume_warning.over_max_fs)).attach();
        }
      } else if (this.show_chosendir) {
        return (new FsCreateModal(this.sd, this, v.name)).attach();
      } else if (this._settings.znv) {
        return (new FsChooseModal(this.sd, this, fs_name, v.name)).attach();
      } else {
        return (new ConfirmModal(lang.volume_warning.enable_fs, (function(_this) {
          return function() {
            var chain;
            _this.frozen();
            chain = new Chain();
            chain.chain(function() {
              return (new FileSystemRest(_this.sd.host)).create(fs_name, _this.fs_type, v.name);
            }).chain(_this.sd.update("filesystem"));
            return show_chain_progress(chain).done(function() {
              return _this.attach();
            }).fail(function(data) {
              (new MessageModal(lang.volume_warning.over_max_fs)).attach();
              return _this.attach();
            });
          };
        })(this))).attach();
      }
    };

    VolumePage.prototype.disable_fs = function(v) {
      var fs_name, fs_o, _i, _len, _ref;
      if (this.sync) {
        (new MessageModal(lang.volumepage.th_syncing_warning)).attach();
        return;
      }
      fs_name = "";
      _ref = this.sd.filesystem.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fs_o = _ref[_i];
        if (fs_o.volume === v.name) {
          fs_name = fs_o.name;
          break;
        }
      }
      return (new ConfirmModal(lang.volume_warning.disable_fs, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain();
          chain.chain(function() {
            return (new FileSystemRest(_this.sd.host))["delete"](fs_name);
          }).chain(_this.sd.update("filesystem"));
          return show_chain_progress(chain).done(function() {
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    VolumePage.prototype.sync_switch = function(v) {
      console.log(v);
      if (v.syncing) {
        return this.disable_sync(v);
      } else {
        return this.enable_sync(v);
      }
    };

    VolumePage.prototype.enable_sync = function(v) {
      if (v.health !== 'normal') {
        (new MessageModal(lang.volume_warning.disable_sync)).attach();
        return;
      }
      return (new ConfirmModal(lang.volume_warning.enable_sync(v.name), (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain();
          chain.chain(function() {
            return (new SyncConfigRest(_this.sd.host)).sync_enable(v.name);
          });
          return show_chain_progress(chain, true).done(function() {
            return _this.attach();
          }).fail(function(data) {
            return (new MessageModal(lang.volume_warning.syncing_error)).attach();
          });
        };
      })(this))).attach();
    };

    VolumePage.prototype.disable_sync = function(v) {
      var chain;
      chain = new Chain();
      chain.chain((function(_this) {
        return function() {
          return (new SyncConfigRest(_this.sd.host)).sync_disable(v.name);
        };
      })(this));
      return (show_chain_progress(chain)).done((function(_this) {
        return function() {
          return _this.attach();
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return (new MessageModal(lang.volume_warning.syncing_error)).attach();
        };
      })(this));
    };

    VolumePage.prototype.pre_create = function(v) {
      var chain;
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new ZnvConfigRest(_this.sd.host)).precreate(v.name);
        };
      })(this));
      return (show_chain_progress(chain)).done;
    };

    VolumePage.prototype.server_start = function(bool) {
      var chain;
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new ZnvConfigRest(_this.sd.host)).start_service(bool);
        };
      })(this));
      return (show_chain_progress(chain)).done((function(_this) {
        return function() {
          return (new MessageModal(lang.volumepage.btn_enable_server)).attach();
        };
      })(this));
    };

    VolumePage.prototype.server_stop = function(bool) {
      var chain;
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new ZnvConfigRest(_this.sd.host)).stop_service(bool);
        };
      })(this));
      return (show_chain_progress(chain)).done((function(_this) {
        return function(data) {
          return (new MessageModal(lang.volumepage.btn_disable_server)).attach();
        };
      })(this));
    };

    return VolumePage;

  })(DetailTablePage);

  InitrPage = (function(_super) {
    __extends(InitrPage, _super);

    function InitrPage(sd) {
      this.sd = sd;
      this._iscsi_unlink = __bind(this._iscsi_unlink, this);
      this._iscsi_link = __bind(this._iscsi_link, this);
      this.unlink_initr = __bind(this.unlink_initr, this);
      this.link_initr = __bind(this.link_initr, this);
      this.unmap_volumes = __bind(this.unmap_volumes, this);
      this.map_volumes = __bind(this.map_volumes, this);
      this.delete_initr = __bind(this.delete_initr, this);
      this.create_initr = __bind(this.create_initr, this);
      this.detail_html = __bind(this.detail_html, this);
      this.rendered = __bind(this.rendered, this);
      this.subitems = __bind(this.subitems, this);
      this.define_vm = __bind(this.define_vm, this);
      InitrPage.__super__.constructor.call(this, "initrpage-", "html/initrpage.html");
      table_update_listener(this.sd.initrs, "#initr-table", (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.initrs = _this.subitems();
          }
        };
      })(this));
      $(this.sd).on("initr", (function(_this) {
        return function(e, initr) {
          var i, _i, _len, _ref, _results;
          _ref = _this.vm.initrs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i.id === initr.id) {
              _results.push(i.active_session = initr.active_session);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      this.vm.show_iscsi = this._iscsi.iScSiAvalable() && !this._settings.fc ? true : false;
    }

    InitrPage.prototype.define_vm = function(vm) {
      this._settings = new (require("settings").Settings);
      this._iscsi = new IScSiManager;
      vm.initrs = this.subitems();
      vm.lang = lang.initrpage;
      vm.fattr_active_session = fattr.active_session;
      vm.fattr_show_link = fattr.show_link;
      vm.detail = this.detail;
      vm.all_checked = false;
      vm.create_initr = this.create_initr;
      vm.delete_initr = this.delete_initr;
      vm.map_volumes = this.map_volumes;
      vm.unmap_volumes = this.unmap_volumes;
      vm.show_iscsi = this.show_iscsi;
      vm.link_initr = this.link_initr;
      vm.unlink_initr = this.unlink_initr;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var v, _i, _len, _ref, _results;
          _ref = vm.initrs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(v.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    InitrPage.prototype.subitems = function() {
      var arrays, item, portal, _i, _len;
      arrays = subitems(this.sd.initrs.items, {
        id: "",
        wwn: "",
        active_session: "",
        portals: "",
        detail_closed: true,
        checked: false
      });
      for (_i = 0, _len = arrays.length; _i < _len; _i++) {
        item = arrays[_i];
        item.name = item.wwn;
        item.iface = ((function() {
          var _j, _len1, _ref, _results;
          _ref = item.portals;
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            portal = _ref[_j];
            _results.push(portal);
          }
          return _results;
        })()).join(", ");
      }
      return arrays;
    };

    InitrPage.prototype.rendered = function() {
      this.vm.initrs = this.subitems();
      this.data_table = $("#initr-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      return InitrPage.__super__.rendered.call(this);
    };

    InitrPage.prototype.detail_html = function(initr) {
      var html, o, vm;
      html = avalon_templ(initr.id, "html/initr_detail_row.html");
      o = this.sd.initrs.get(initr.id);
      vm = avalon.define(initr.id, (function(_this) {
        return function(vm) {
          vm.volumes = subitems(_this.sd.initr_volumes(o), {
            name: ""
          });
          return vm.lang = lang.initrpage.detail_row;
        };
      })(this));
      return [html, vm];
    };

    InitrPage.prototype.create_initr = function() {
      return (new InitrCreateModal(this.sd, this)).attach();
    };

    InitrPage.prototype.delete_initr = function() {
      var i, initr, initrs, selected, volumes, _i, _len;
      selected = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.initrs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.checked) {
            _results.push($.extend({}, i.$model));
          }
        }
        return _results;
      }).call(this);
      initrs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selected.length; _i < _len; _i++) {
          initr = selected[_i];
          _results.push(this.sd.initrs.get(initr.id));
        }
        return _results;
      }).call(this);
      if (initrs.length === 0) {
        return (new MessageModal(lang.initr_warning.no_deleted_intir)).attach();
      } else {
        for (_i = 0, _len = initrs.length; _i < _len; _i++) {
          initr = initrs[_i];
          volumes = this.sd.initr_volumes(initr);
          if (volumes.length !== 0) {
            (new MessageModal(lang.initr_warning.intitr_has_map(initr.wwn))).attach();
            return;
          }
        }
        return (new InitrDeleteModal(this.sd, this, selected)).attach();
      }
    };

    InitrPage.prototype.map_volumes = function(index) {
      var i, selected, volumes, _i, _len, _ref;
      selected = this.sd.initrs.get(this.vm.initrs[index].id);
      volumes = [];
      _ref = this.sd.volumes.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.health === "normal") {
          volumes.push(i);
        }
      }
      if (volumes.length === 0) {
        return (new MessageModal(lang.initr_warning.no_spared_volume)).attach();
      } else if (selected.active_session) {
        return (new MessageModal(lang.initr_warning.detect_iscsi(selected.wwn))).attach();
      } else {
        return (new VolumeMapModal(this.sd, this, selected)).attach();
      }
    };

    InitrPage.prototype.unmap_volumes = function(index) {
      var selected, volumes;
      selected = this.sd.initrs.get(this.vm.initrs[index].id);
      volumes = this.sd.initr_volumes(selected);
      if (volumes.length === 0) {
        return (new MessageModal(lang.initr_warning.no_attached_volume)).attach();
      } else if (selected.active_session) {
        return (new MessageModal(lang.initr_warning.unmap_iscsi(selected.wwn))).attach();
      } else {
        return (new VolumeUnmapModal(this.sd, this, selected)).attach();
      }
    };

    InitrPage.prototype.link_initr = function(index) {
      var indexs, portal, portals, selected, _i, _j, _len, _ref, _ref1, _ref2;
      for (indexs = _i = 0, _ref = this.vm.initrs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; indexs = 0 <= _ref ? ++_i : --_i) {
        if (!(this.sd.initrs.items[indexs].active_session === true)) {
          continue;
        }
        (new MessageModal(lang.initr_warning.intitr_has_link)).attach();
        return;
      }
      selected = this.sd.initrs.get(this.vm.initrs[index].id);
      portals = [];
      _ref1 = this.sd.networks.items;
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        portal = _ref1[_j];
        if (!(_ref2 = portal.id, __indexOf.call(selected.portals, _ref2) >= 0)) {
          continue;
        }
        portals.push(portal.ipaddr);
        this._iscsi.linkinit(selected.wwn, portal.ipaddr);
      }
      return (new ConfirmModal_link(lang.initr_link_warning.confirm_link(selected.wwn), (function(_this) {
        return function() {
          var chain;
          chain = new Chain();
          return _this._iscsi_link(index);
        };
      })(this))).attach();
    };

    InitrPage.prototype.unlink_initr = function(index) {
      var portal, portals, selected, _i, _len, _ref, _ref1;
      selected = this.sd.initrs.get(this.vm.initrs[index].id);
      portals = [];
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        portal = _ref[_i];
        if (!(_ref1 = portal.id, __indexOf.call(selected.portals, _ref1) >= 0)) {
          continue;
        }
        portals.push(portal.ipaddr);
        this._iscsi.linkinit(selected.wwn, portal.ipaddr);
      }
      return (new ConfirmModal_unlink(lang.initr_link_warning.undo_link(selected.wwn), (function(_this) {
        return function() {
          var chain;
          chain = new Chain();
          return _this._iscsi_unlink(index);
        };
      })(this))).attach();
    };

    InitrPage.prototype._iscsi_link = function(index) {
      var chain, chains, portal, portals, selected, _i, _len, _ref, _ref1;
      selected = this.sd.initrs.get(this.vm.initrs[index].id);
      portals = [];
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        portal = _ref[_i];
        if (_ref1 = portal.id, __indexOf.call(selected.portals, _ref1) >= 0) {
          portals.push(portal.ipaddr);
        }
      }
      this.frozen();
      chain = new Chain();
      chain.chain(this.sd.update('initrs'));
      show_chain_progress(chain).done((function(_this) {
        return function() {
          if (_this._iscsi.connect(selected.wwn, portals)) {
            return _this.attach();
          } else {
            (new MessageModal(lang.initr_link_warning.link_err)).attach();
            return _this.attach();
          }
        };
      })(this)).fail((function(_this) {
        return function() {
          return _this.attach();
        };
      })(this));
      chains = new Chain();
      return chains.chain(this.sd.update('initrs'));
    };

    InitrPage.prototype._iscsi_unlink = function(index) {
      var chain, chains, portal, portals, selected, _i, _len, _ref, _ref1;
      selected = this.sd.initrs.get(this.vm.initrs[index].id);
      portals = [];
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        portal = _ref[_i];
        if (_ref1 = portal.id, __indexOf.call(selected.portals, _ref1) >= 0) {
          portals.push(portal.ipaddr);
        }
      }
      this.frozen();
      chain = new Chain();
      chain.chain(this.sd.update('initrs'));
      show_chain_progress(chain).done((function(_this) {
        return function() {
          if (_this._iscsi.disconnect(selected.wwn, portals)) {
            return _this.attach();
          } else {
            (new MessageModal(lang.initr_link_warning.link_err)).attach();
            return _this.attach();
          }
        };
      })(this)).fail((function(_this) {
        return function() {
          return _this.attach();
        };
      })(this));
      chains = new Chain();
      return chains.chain(this.sd.update('initrs'));
    };

    return InitrPage;

  })(DetailTablePage);

  SettingPage = (function(_super) {
    __extends(SettingPage, _super);

    function SettingPage(dview, sd) {
      this.dview = dview;
      this.sd = sd;
      this._has_initr = __bind(this._has_initr, this);
      this.eth_bonding_cancel = __bind(this.eth_bonding_cancel, this);
      this.eth_bonding = __bind(this.eth_bonding, this);
      this._able_bonding = __bind(this._able_bonding, this);
      this.znv_server = __bind(this.znv_server, this);
      this.submit_gateway = __bind(this.submit_gateway, this);
      this.submit_iface = __bind(this.submit_iface, this);
      this.keypress_passwd = __bind(this.keypress_passwd, this);
      this.submit_passwd = __bind(this.submit_passwd, this);
      this.rendered = __bind(this.rendered, this);
      this.subitems = __bind(this.subitems, this);
      this.define_vm = __bind(this.define_vm, this);
      SettingPage.__super__.constructor.call(this, "settingpage-", "html/settingpage.html");
      this.edited = null;
      this.settings = new SettingsManager;
      $(this.sd.networks).on("updated", (function(_this) {
        return function(e, source) {
          _this.vm.ifaces = _this.subitems();
          _this.vm.able_bonding = _this._able_bonding();
          return _this.vm.local_serverip = _this.sd.networks.items[1].ipaddr;
        };
      })(this));
      $(this.sd.gateway).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.gateway = _this.sd.gateway.data.gateway;
        };
      })(this));
      this.vm.server_options = [
        {
          value: "store_server",
          msg: "存储服务器"
        }, {
          value: "forward_server",
          msg: "转发服务器"
        }
      ];
    }

    SettingPage.prototype.define_vm = function(vm) {
      this._settings = new (require("settings").Settings);
      vm.lang = lang.settingpage;
      vm.ifaces = this.subitems();
      vm.gateway = this.sd.gateway.data.gateway;
      vm.old_passwd = "";
      vm.new_passwd = "";
      vm.confirm_passwd = "";
      vm.submit_passwd = this.submit_passwd;
      vm.keypress_passwd = this.keypress_passwd;
      vm.edit_iface = (function(_this) {
        return function(e) {
          var i, _i, _len, _ref;
          _ref = _this.vm.ifaces;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            i.edit = false;
          }
          e.edit = true;
          return _this.edited = e;
        };
      })(this);
      vm.cancel_edit_iface = (function(_this) {
        return function(e) {
          var i;
          e.edit = false;
          _this.edited = null;
          i = _this.sd.networks.get(e.id);
          e.ipaddr = i.ipaddr;
          return e.netmask = i.netmask;
        };
      })(this);
      vm.submit_iface = this.submit_iface;
      vm.submit_gateway = this.submit_gateway;
      vm.able_bonding = true;
      vm.eth_bonding = this.eth_bonding;
      vm.eth_bonding_cancel = this.eth_bonding_cancel;
      vm.znv_server = this.znv_server;
      vm.server_options = "";
      vm.enable_server = true;
      vm.server_switch = this._settings.znv;
      vm.select_ct = true;
      vm.serverid = "";
      vm.local_serverip = "";
      vm.local_serverport = "8003";
      vm.cmssverip = "";
      vm.cmssverport = "8000";
      return vm.directory = "/nvr/d1;/nvr/d2";
    };

    SettingPage.prototype.subitems = function() {
      var eth, items, removable, _i, _len;
      items = subitems(this.sd.networks.items, {
        id: "",
        ipaddr: "",
        iface: "",
        netmask: "",
        type: "",
        edit: false
      });
      removable = [];
      if (!this._able_bonding()) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          eth = items[_i];
          if (eth.type !== "bond-slave") {
            removable.push(eth);
          }
        }
        return removable;
      }
      return items;
    };

    SettingPage.prototype.rendered = function() {
      var Netmask, chosen;
      SettingPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      $.validator.addMethod("same", (function(_this) {
        return function(val, element) {
          if (_this.vm.new_passwd !== _this.vm.confirm_passwd) {
            return false;
          } else {
            return true;
          }
        };
      })(this), "两次输入的新密码不一致");
      $("#server_select").chosen();
      chosen = $("#server_select");
      chosen.change((function(_this) {
        return function() {
          if (chosen.val() === "store_server") {
            _this.vm.local_serverport = 8003;
            return _this.vm.select_ct = true;
          } else {
            _this.vm.local_serverport = 8002;
            return _this.vm.select_ct = false;
          }
        };
      })(this));
      $("form.passwd").validate(valid_opt({
        rules: {
          old_passwd: {
            required: true,
            maxlength: 32
          },
          new_passwd: {
            required: true,
            maxlength: 32
          },
          confirm_passwd: {
            required: true,
            maxlength: 32,
            same: true
          }
        },
        messages: {
          old_passwd: {
            required: "请输入您的旧密码",
            maxlength: "密码长度不能超过32个字符"
          },
          new_passwd: {
            required: "请输入您的新密码",
            maxlength: "密码长度不能超过32个字符"
          },
          confirm_passwd: {
            required: "请再次输入您的新密码",
            maxlength: "密码长度不能超过32个字符"
          }
        }
      }));
      Netmask = require("netmask").Netmask;
      $.validator.addMethod("validIP", (function(_this) {
        return function(val, element) {
          var error, n, regex;
          regex = /^\d{1,3}(\.\d{1,3}){3}$/;
          if (!regex.test(val)) {
            return false;
          }
          try {
            n = new Netmask(val);
            return true;
          } catch (_error) {
            error = _error;
            return false;
          }
        };
      })(this));
      $.validator.addMethod("validport", (function(_this) {
        return function(val, element) {
          var error, n, regex;
          regex = /^[0-9]*$/;
          if (!regex.test(val)) {
            return false;
          }
          try {
            n = new Netmask(val);
            return true;
          } catch (_error) {
            error = _error;
            return true;
          }
        };
      })(this));
      $.validator.addMethod("samesubnet", (function(_this) {
        return function(val, element) {
          var error, n, subnet, _i, _len, _ref;
          try {
            subnet = new Netmask("" + _this.edited.ipaddr + "/" + _this.edited.netmask);
            _ref = _this.sd.networks.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              n = _ref[_i];
              if (n.iface === _this.edited.iface) {
                continue;
              }
              if (n.ipaddr !== "" && subnet.contains(n.ipaddr)) {
                return false;
              }
            }
            return true;
          } catch (_error) {
            error = _error;
            return false;
          }
        };
      })(this), (function(_this) {
        return function(params, element) {
          var error, n, subnet, _i, _len, _ref;
          try {
            subnet = new Netmask("" + _this.edited.ipaddr + "/" + _this.edited.netmask);
            _ref = _this.sd.networks.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              n = _ref[_i];
              if (n.iface === _this.edited.iface) {
                continue;
              }
              if (n.ipaddr !== "" && subnet.contains(n.ipaddr)) {
                return "和" + n.iface + "处在同一网段，请重新配置网卡";
              }
            }
          } catch (_error) {
            error = _error;
            return "网卡配置错误，请重新配置网卡";
          }
        };
      })(this));
      $.validator.addMethod("using", (function(_this) {
        return function(val, element) {
          var initr, _i, _len, _ref, _ref1;
          _ref = _this.sd.initrs.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            initr = _ref[_i];
            if (_ref1 = _this.edited.iface, __indexOf.call(initr.portals, _ref1) >= 0) {
              return false;
            }
          }
          return true;
        };
      })(this), (function(_this) {
        return function(val, element) {
          var initr, _i, _len, _ref, _ref1;
          _ref = _this.sd.initrs.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            initr = _ref[_i];
            if (_ref1 = _this.edited.iface, __indexOf.call(initr.portals, _ref1) >= 0) {
              return "客户端" + initr.wwn + "正在使用" + _this.edited.iface + "，请删除客户端，再配置网卡";
            }
          }
        };
      })(this));
      $("#network-table").validate(valid_opt({
        rules: {
          ipaddr: {
            required: true,
            validIP: true,
            samesubnet: true,
            using: true
          },
          netmask: {
            required: true,
            validIP: true
          }
        },
        messages: {
          ipaddr: {
            required: "请输入IP地址",
            validIP: "无效IP地址"
          },
          netmask: {
            required: "请输入子网掩码",
            validIP: "无效子网掩码"
          }
        }
      }));
      $.validator.addMethod("reachable", (function(_this) {
        return function(val, element) {
          var error, n, subnet, _i, _len, _ref;
          _ref = _this.sd.networks.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            n = _ref[_i];
            try {
              subnet = new Netmask("" + n.ipaddr + "/" + n.netmask);
            } catch (_error) {
              error = _error;
              continue;
            }
            if (subnet.contains(val)) {
              return true;
            }
          }
          return false;
        };
      })(this));
      $("form.gateway").validate(valid_opt({
        rules: {
          gateway: {
            required: true,
            validIP: true,
            reachable: true
          }
        },
        messages: {
          gateway: {
            required: "请输入网关地址",
            validIP: "无效网关地址",
            reachable: "路由不在网卡网段内"
          }
        }
      }));
      $("#server-table").validate(valid_opt({
        rules: {
          cmssverip: {
            required: true,
            validIP: true,
            reachable: true
          },
          cmssverport: {
            required: true,
            validport: true
          }
        },
        messages: {
          cmssverip: {
            required: "请输入中心IP",
            validIP: "无效IP地址",
            reachable: "路由不在网卡网段内"
          },
          cmssverport: {
            required: "请输入监听端口",
            validport: "无效端口"
          }
        }
      }));
      return $("form.server").validate(valid_opt({
        rules: {
          serverid: {
            required: true,
            validport: true
          },
          local_serverip: {
            required: true,
            validIP: true,
            reachable: true
          },
          local_serverport: {
            required: true,
            validport: true
          }
        },
        messages: {
          serverid: {
            required: "请输入服务器ID",
            validport: "无效服务器ID"
          },
          local_serverip: {
            required: "请输入本机IP",
            validIP: "无效IP地址",
            reachable: "路由不在网卡网段内"
          },
          local_serverport: {
            required: "请输入监听端口",
            validport: "无效端口"
          }
        }
      }));
    };

    SettingPage.prototype.submit_passwd = function() {
      var chain;
      if ($("form.passwd").validate().form()) {
        if (this.vm.old_passwd === this.vm.new_passwd) {
          return (new MessageModal(lang.settingpage.useradmin_error)).attach();
        } else {
          chain = new Chain;
          chain.chain((function(_this) {
            return function() {
              return (new UserRest(_this.sd.host)).change_password("admin", _this.vm.old_passwd, _this.vm.new_passwd);
            };
          })(this));
          return (show_chain_progress(chain)).done((function(_this) {
            return function() {
              _this.vm.old_passwd = "";
              _this.vm.new_passwd = "";
              _this.vm.confirm_passwd = "";
              return (new MessageModal(lang.settingpage.message_newpasswd_success)).attach();
            };
          })(this));
        }
      }
    };

    SettingPage.prototype.keypress_passwd = function(e) {
      if (e.which === 13) {
        return this.submit_passwd();
      }
    };

    SettingPage.prototype.submit_iface = function(e) {
      var portal, _i, _len, _ref;
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        portal = _ref[_i];
        if (!(portal.ipaddr === e.ipaddr)) {
          continue;
        }
        (new MessageModal(lang.settingpage.iface_error)).attach();
        return;
      }
      if ($("#network-table").validate().form()) {
        return (new ConfirmModal(lang.network_warning.config_iface, (function(_this) {
          return function() {
            var chain;
            e.edit = false;
            _this.dview.reconnect = true;
            chain = new Chain;
            chain.chain(function() {
              var rest;
              rest = new NetworkRest(_this.sd.host);
              if (e.type === "normal") {
                return rest.config(e.iface, e.ipaddr, e.netmask);
              } else if (e.type === "bond-master") {
                return rest.modify_eth_bonding(e.ipaddr, e.netmask);
              }
            });
            return show_chain_progress(chain, true).fail(function() {
              var index;
              index = window.adminview.find_nav_index(_this.dview.menuid);
              if (index !== -1) {
                return window.adminview.remove_tab(index);
              }
            });
          };
        })(this))).attach();
      }
    };

    SettingPage.prototype.submit_gateway = function(e) {
      if ($("form.gateway").validate().form()) {
        return (new ConfirmModal(lang.network_warning.config_gateway, (function(_this) {
          return function() {
            var chain;
            chain = new Chain();
            chain.chain(function() {
              return (new GatewayRest(_this.sd.host)).config(_this.vm.gateway);
            }).chain(_this.sd.update("networks"));
            return show_chain_progress(chain).fail(function() {
              return _this.vm.gateway = _this.sd.gateway.ipaddr;
            });
          };
        })(this))).attach();
      }
    };

    SettingPage.prototype.znv_server = function() {
      var chain;
      if ($("form.server").validate().form() && $("#server-table").validate().form()) {
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new ZnvConfigRest(_this.sd.host)).znvconfig(_this.vm.select_ct, _this.vm.serverid, _this.vm.local_serverip, _this.vm.local_serverport, _this.vm.cmssverip, _this.vm.cmssverport, _this.vm.directory);
          };
        })(this));
        return (show_chain_progress(chain)).done((function(_this) {
          return function() {
            return (new MessageModal(lang.settingpage.service_success)).attach();
          };
        })(this));
      }
    };

    SettingPage.prototype._able_bonding = function() {
      var eth, _i, _len, _ref;
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eth = _ref[_i];
        if ((eth.type.indexOf("bond")) !== -1) {
          return false;
        }
      }
      return true;
    };

    SettingPage.prototype.eth_bonding = function() {
      if (this._has_initr()) {
        (new MessageModal(lang.settingpage.btn_eth_bonding_warning)).attach();
      } else {
        return (new EthBondingModal(this.sd, this)).attach();
      }
    };

    SettingPage.prototype.eth_bonding_cancel = function() {
      if (this._has_initr()) {
        (new MessageModal(lang.settingpage.btn_eth_bonding_warning)).attach();
      } else {
        (new ConfirmModal(lang.eth_bonding_cancel_warning, (function(_this) {
          return function() {
            var chain;
            _this.frozen();
            _this.dview.reconnect = true;
            chain = new Chain;
            chain.chain(function() {
              return (new NetworkRest(_this.sd.host)).cancel_eth_bonding();
            });
            return show_chain_progress(chain, true).fail(function() {
              var index;
              index = window.adminview.find_nav_index(_this.dview.menuid);
              if (index !== -1) {
                return window.adminview.remove_tab(index);
              }
            });
          };
        })(this))).attach();
      }
    };

    SettingPage.prototype._has_initr = function() {
      return this.sd.initrs.items.length !== 0;
    };

    return SettingPage;

  })(Page);

  QuickModePage = (function(_super) {
    __extends(QuickModePage, _super);

    function QuickModePage(dview, sd) {
      this.dview = dview;
      this.sd = sd;
      this.create = __bind(this.create, this);
      this.submit = __bind(this.submit, this);
      this._able_bonding = __bind(this._able_bonding, this);
      this._get_ifaces = __bind(this._get_ifaces, this);
      this._get_unique_names = __bind(this._get_unique_names, this);
      this._all_unique_names = __bind(this._all_unique_names, this);
      this._has_name = __bind(this._has_name, this);
      this.rendered = __bind(this.rendered, this);
      this.prefer_dsu_location = __bind(this.prefer_dsu_location, this);
      this.count_dsu_disks = __bind(this.count_dsu_disks, this);
      this.define_vm = __bind(this.define_vm, this);
      QuickModePage.__super__.constructor.call(this, "quickmodepage-", "html/quickmodepage.html");
      this.create_files = true;
      $(this.sd.systeminfo).on("updated", (function(_this) {
        return function(e, source) {
          var feature;
          feature = _this.sd.systeminfo.data.feature;
          return _this.vm.show_fs = __indexOf.call(feature, "monfs") >= 0 || __indexOf.call(feature, "xfs") >= 0 ? true : false;
        };
      })(this));
    }

    QuickModePage.prototype.define_vm = function(vm) {
      vm.lang = lang.quickmodepage;
      vm.enable_fs = false;
      vm.raid_name = "";
      vm.volume_name = "";
      vm.initr_wwn = "";
      vm.submit = this.submit;
      this._iscsi = new IScSiManager;
      vm.show_iscsi = this._iscsi.iScSiAvalable();
      this.enable_iscsi = this._iscsi.iScSiAvalable();
      return vm.$watch("volume_name", (function(_this) {
        return function() {
          return vm.initr_wwn = "" + prefix_wwn + ":" + vm.volume_name;
        };
      })(this));
    };

    QuickModePage.prototype.count_dsu_disks = function(dsu) {
      var disk;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.sd.disks.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          disk = _ref[_i];
          if (disk.role === 'unused' && disk.location.indexOf(dsu.location) === 0) {
            _results.push(disk);
          }
        }
        return _results;
      }).call(this)).length;
    };

    QuickModePage.prototype.prefer_dsu_location = function() {
      var dsu, _i, _len, _ref;
      _ref = this.sd.dsus.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dsu = _ref[_i];
        if (this.count_dsu_disks(dsu) >= 3) {
          return dsu.location;
        }
      }
      if (this.sd.dsus.length) {
        return this.sd.dsus.items[0].location;
      } else {
        return '_';
      }
    };

    QuickModePage.prototype.rendered = function() {
      var disk, dsu, lv, raids, rd, spares, wwn, _i, _ref, _ref1;
      QuickModePage.__super__.rendered.call(this);
      $(".tooltips").tooltip();
      _ref = this._get_unique_names(), rd = _ref[0], lv = _ref[1], wwn = _ref[2];
      this.vm.raid_name = rd;
      this.vm.volume_name = lv;
      this.vm.initr_wwn = wwn;
      $("input:radio").uniform();
      $(".basic-toggle-button").toggleButtons();
      this.dsuui = new RaidCreateDSUUI(this.sd, "#dsuui");
      this.dsuui.attach();
      this.add_child(this.dsuui);
      $("#enable-fs").change((function(_this) {
        return function() {
          _this.vm.enable_fs = $("#enable-fs").prop("checked");
          if (_this.vm.enable_fs) {
            return _this.enable_iscsi = false;
          } else {
            return _this.enable_iscsi = $("#enable-iscsi").prop("checked");
          }
        };
      })(this));
      $("#create-files").change((function(_this) {
        return function() {
          return _this.create_files = $("#create-files").prop("checked");
        };
      })(this));
      $("#enable-iscsi").change((function(_this) {
        return function() {
          return _this.enable_iscsi = $("#enable-iscsi").prop("checked");
        };
      })(this));
      dsu = this.prefer_dsu_location();
      _ref1 = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.sd.disks.items;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          disk = _ref1[_i];
          if (disk.role === 'unused' && disk.location.indexOf(dsu) === 0) {
            _results.push(disk);
          }
        }
        return _results;
      }).call(this), raids = 2 <= _ref1.length ? __slice.call(_ref1, 0, _i = _ref1.length - 1) : (_i = 0, []), spares = _ref1[_i++];
      if (spares == null) {
        spares = [];
      }
      if (raids.length < 3 && spares) {
        raids = raids.concat(spares);
        spares = [];
      }
      this.dsuui.check_disks(raids);
      this.dsuui.check_disks(spares, "spare");
      this.dsuui.active_tab(dsu);
      console.log(this.dsuui.getchunk());
      $.validator.addMethod("min-raid-disks", (function(_this) {
        return function(val, element) {
          return _this.dsuui.get_disks().length >= 3;
        };
      })(this));
      return $("form", this.$dom).validate(valid_opt({
        rules: {
          "raid": {
            required: true,
            regex: "^[_a-zA-Z][-_a-zA-Z0-9]*$",
            duplicated: this.sd.raids.items,
            maxlength: 64
          },
          "volume": {
            required: true,
            regex: "^[_a-zA-Z][-_a-zA-Z0-9]*$",
            duplicated: this.sd.volumes.items,
            maxlength: 64
          },
          wwn: {
            required: true,
            regex: '^(iqn.2013-01.net.zbx.initiator:)(.*)$',
            duplicated: this.sd.initrs.items,
            maxlength: 96
          },
          "raid-disks-checkbox": {
            "min-raid-disks": true,
            maxlength: 24
          }
        },
        messages: {
          "raid": {
            required: "请输入阵列名称",
            duplicated: "阵列名称已存在",
            maxlength: "阵列名称长度不能超过64个字母"
          },
          "volume": {
            required: "请输入虚拟磁盘名称",
            duplicated: "虚拟磁盘名称已存在",
            maxlength: "虚拟磁盘名称长度不能超过64个字母"
          },
          wwn: {
            required: "请输入客户端名称",
            duplicated: "客户端名称已存在",
            maxlength: "客户端名称长度不能超过96个字母"
          },
          "raid-disks-checkbox": {
            "min-raid-disks": "级别5阵列最少需要3块磁盘",
            maxlength: "阵列最多支持24个磁盘"
          }
        }
      }));
    };

    QuickModePage.prototype._has_name = function(name, res, nattr) {
      var i, _i, _len, _ref;
      if (nattr == null) {
        nattr = "name";
      }
      _ref = res.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (name === i[nattr]) {
          return true;
        }
      }
      return false;
    };

    QuickModePage.prototype._all_unique_names = function(rd, lv, wwn) {
      return !(this._has_name(rd, this.sd.raids) || this._has_name(lv, this.sd.volumes) || this._has_name(wwn, this.sd.initrs, "wwn"));
    };

    QuickModePage.prototype._get_unique_names = function() {
      var i, lv, lv_name, rd, rd_name, wwn;
      rd_name = "rd";
      lv_name = "lv";
      wwn = "" + prefix_wwn + ":" + lv_name;
      if (this._all_unique_names(rd_name, lv_name, wwn)) {
        return [rd_name, lv_name, wwn];
      } else {
        i = 1;
        while (true) {
          rd = "" + rd_name + "-" + i;
          lv = "" + lv_name + "-" + i;
          wwn = "" + prefix_wwn + ":" + lv;
          if (this._all_unique_names(rd, lv, wwn)) {
            return [rd, lv, wwn];
          }
          i += 1;
        }
      }
    };

    QuickModePage.prototype._get_ifaces = function() {
      var eth, removable, _i, _len, _ref;
      removable = [];
      if (!this._able_bonding()) {
        _ref = this.sd.networks.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eth = _ref[_i];
          if (eth.type !== "bond-slave") {
            removable.push(eth);
          }
        }
        return removable;
      }
      return this.sd.networks.items;
    };

    QuickModePage.prototype._able_bonding = function() {
      var eth, _i, _len, _ref;
      _ref = this.sd.networks.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eth = _ref[_i];
        if ((eth.type.indexOf("bond")) !== -1) {
          return false;
        }
      }
      return true;
    };

    QuickModePage.prototype.submit = function() {
      if (this.dsuui.get_disks().length === 0) {
        return (new MessageModal(lang.quickmodepage.create_error)).attach();
      } else if (this.dsuui.get_disks().length < 3) {
        return (new MessageModal(lang.quickmodepage.create_error_least)).attach();
      } else {
        if ($("form").validate().form()) {
          return this.create(this.vm.raid_name, this.dsuui.getchunk(), this.dsuui.get_disks(), this.dsuui.get_disks("spare"), this.vm.volume_name, this.vm.initr_wwn, this.vm.enable_fs, this.enable_iscsi, this.create_files);
        }
      }
    };

    QuickModePage.prototype.create = function(raid, chunk, raid_disks, spare_disks, volume, initr, enable_fs, enable_iscsi, create_files) {
      var chain, n, portals, _i, _len, _ref;
      raid_disks = raid_disks.join(",");
      spare_disks = spare_disks.join(",");
      _ref = this._get_ifaces();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (n.link && n.ipaddr !== "") {
          portals = n.iface;
          break;
        }
      }
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          return (new RaidRest(_this.sd.host)).create({
            name: raid,
            level: 5,
            chunk: chunk,
            raid_disks: raid_disks,
            spare_disks: spare_disks,
            rebuild_priority: "",
            sync: "no",
            cache: ""
          });
        };
      })(this)).chain((function(_this) {
        return function() {
          return (new VolumeRest(_this.sd.host)).create({
            name: volume,
            raid: raid,
            capacity: "all"
          });
        };
      })(this));
      if (enable_fs) {
        chain.chain((function(_this) {
          return function() {
            return (new FileSystemRest(_this.sd.host)).create("myfs", volume);
          };
        })(this));

        /*
        if create_files
            chain.chain(=> (new CommandRest(@sd.host)).create_lw_files())
         */
      } else {
        if (!this.sd.initrs.get(initr)) {
          chain.chain((function(_this) {
            return function() {
              return (new InitiatorRest(_this.sd.host)).create({
                wwn: initr,
                portals: portals
              });
            };
          })(this));
        }
        chain.chain((function(_this) {
          return function() {
            return (new InitiatorRest(_this.sd.host)).map(initr, volume);
          };
        })(this));
      }
      chain.chain(this.sd.update("all"));
      return show_chain_progress(chain, false, false).done((function(_this) {
        return function() {
          var ipaddr;
          if (enable_iscsi) {
            ipaddr = (_this.sd.host.split(":"))[0];
            _this._iscsi_link(initr, [ipaddr]);
          }
          if (enable_fs && create_files) {
            setTimeout((new CommandRest(_this.sd.host)).create_lw_files, 1000);
          }
          _this.dview.switch_to_page("overview");
          return _this.vm.enable_fs = false;
        };
      })(this)).fail((function(_this) {
        return function() {
          return _this.vm.enable_fs = false;
        };
      })(this));
    };

    QuickModePage.prototype._iscsi_link = function(initr, portals) {
      var err;
      try {
        return this._iscsi.connect(initr, portals);
      } catch (_error) {
        err = _error;
        return console.log(err);
      }
    };

    return QuickModePage;

  })(Page);

  MaintainPage = (function(_super) {
    __extends(MaintainPage, _super);

    function MaintainPage(dview, sd) {
      this.dview = dview;
      this.sd = sd;
      this.scan_system = __bind(this.scan_system, this);
      this.apply_fs_name = __bind(this.apply_fs_name, this);
      this.recover = __bind(this.recover, this);
      this.sysinit = __bind(this.sysinit, this);
      this.reboot = __bind(this.reboot, this);
      this.poweroff = __bind(this.poweroff, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      MaintainPage.__super__.constructor.call(this, "maintainpage-", "html/maintainpage.html");
      this.settings = new SettingsManager;
      $(this.sd.systeminfo).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.server_version = "存储系统版本：" + _this.sd.systeminfo.data.version;
        };
      })(this));
    }

    MaintainPage.prototype.define_vm = function(vm) {
      var _settings;
      _settings = new (require("settings").Settings);
      vm.lang = lang.maintainpage;
      vm.diagnosis_url = "http://" + this.sd.host + "/api/diagnosis";
      vm.server_version = "存储系统版本：" + this.sd.systeminfo.data.version;
      vm.gui_version = "客户端版本：" + _settings.version;
      vm.product_model = "产品型号：CYBX-4U24-T-DC";
      vm.poweroff = this.poweroff;
      vm.reboot = this.reboot;
      vm.sysinit = this.sysinit;
      vm.recover = this.recover;
      vm.scan_system = this.scan_system;
      vm.fs_scan = !_settings.sync;
      return vm.show_productmodel = _settings.product_model;
    };

    MaintainPage.prototype.rendered = function() {
      MaintainPage.__super__.rendered.call(this);
      $("#fileupload").fileupload({
        url: "http://" + this.sd.host + "/api/upgrade"
      }).bind("fileuploaddone", function(e, data) {
        return (new MessageModal(lang.maintainpage.message_upgrade_success)).attach();
      });
      return $("input[name=files]").click(function() {
        return $("tbody.files").html("");
      });
    };

    MaintainPage.prototype.poweroff = function() {
      return (new ConfirmModal(lang.maintainpage.warning_poweroff, (function(_this) {
        return function() {
          var chain;
          chain = new Chain();
          chain.chain(function() {
            return (new CommandRest(_this.dview.sd.host)).poweroff();
          });
          return show_chain_progress(chain, true).fail(function() {
            _this.settings.removeLoginedMachine(_this.dview.host);
            _this.sd.close_socket();
            arr_remove(sds, _this.sd);
            return setTimeout(_this.dview.switch_to_login_page, 2000);
          });
        };
      })(this))).attach();
    };

    MaintainPage.prototype.reboot = function() {
      return (new ConfirmModal(lang.maintainpage.warning_reboot, (function(_this) {
        return function() {
          var chain;
          chain = new Chain();
          chain.chain(function() {
            return (new CommandRest(_this.dview.sd.host)).reboot();
          });
          return show_chain_progress(chain, true).fail(function() {
            _this.settings.removeLoginedMachine(_this.dview.host);
            _this.sd.close_socket();
            arr_remove(sds, _this.sd);
            return setTimeout(_this.dview.switch_to_login_page, 2000);
          });
        };
      })(this))).attach();
    };

    MaintainPage.prototype.sysinit = function() {
      return (new ConfirmModal_more(this.vm.lang.btn_sysinit, this.vm.lang.warning_sysinit, this.sd, this.dview, this.settings)).attach();
    };

    MaintainPage.prototype.recover = function() {
      var bool, i, _i, _len, _ref;
      bool = false;
      _ref = this.sd.raids.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.health === "failed") {
          bool = true;
        } else {
          continue;
        }
      }
      if (bool) {
        return (new ConfirmModal_more(this.vm.lang.btn_recover, this.vm.lang.warning_recover, this.sd, this.dview, this.settings, this)).attach();
      } else {
        return (new MessageModal(lang.maintainpage.warning_raids_safety)).attach();
      }
    };

    MaintainPage.prototype.apply_fs_name = function() {
      var fs_name, fs_o, _i, _len, _ref;
      fs_name = "";
      _ref = this.sd.filesystem.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fs_o = _ref[_i];
        fs_name = fs_o.name;
      }
      return fs_name;
    };

    MaintainPage.prototype.scan_system = function(v) {
      var chain, fs_name;
      fs_name = this.apply_fs_name(v);
      if (this.sd.filesystem.data.length === 0) {
        chain = new Chain();
        return (show_chain_progress(chain)).done((function(_this) {
          return function() {
            return (new MessageModal(lang.volume_warning.no_fs)).attach();
          };
        })(this));
      } else {
        return (new ConfirmModal(lang.volume_warning.scan_fs, (function(_this) {
          return function() {
            var fsrest;
            _this.frozen();
            fsrest = new FileSystemRest(_this.sd.host);
            return (fsrest.scan(fs_name)).done(function(data) {
              if (data.status === "success" && data.detail.length > 0) {
                (new ConfirmModal_scan(_this.sd, _this, lang.volumepage.th_scan, lang.volumepage.th_scan_warning, data.detail)).attach();
              } else {
                (new MessageModal(lang.volumepage.th_scan_safety)).attach();
              }
              return _this.attach();
            }).fail(function() {
              return (new MessageModal(lang.volume_warning.scan_fs_fail)).attach();
            });
          };
        })(this))).attach();
      }
    };

    return MaintainPage;

  })(Page);

  LoginPage = (function(_super) {
    __extends(LoginPage, _super);

    function LoginPage(dview) {
      this.dview = dview;
      this._init_device = __bind(this._init_device, this);
      this._login = __bind(this._login, this);
      this.submit = __bind(this.submit, this);
      this.keypress = __bind(this.keypress, this);
      this.close_alert = __bind(this.close_alert, this);
      this.change_device = __bind(this.change_device, this);
      this.detach = __bind(this.detach, this);
      this.attach = __bind(this.attach, this);
      this.video = __bind(this.video, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      LoginPage.__super__.constructor.call(this, "loginpage-", "html/loginpage.html", {
        "class": "login"
      });
      this.try_login = false;
      this._settings = new SettingsManager;
      this.settings = new (require("settings").Settings);
    }

    LoginPage.prototype.define_vm = function(vm) {
      vm.lang = lang.login;
      vm.device = "";
      vm.username = "admin";
      vm.passwd = "";
      vm.submit = this.submit;
      vm.keypress = this.keypress;
      return vm.close_alert = this.close_alert;
    };

    LoginPage.prototype.rendered = function() {
      LoginPage.__super__.rendered.call(this);
      $.validator.addMethod("isLogined", function(value, element) {
        return !(new SettingsManager).isLoginedMachine(value);
      });
      $(".login-form").validate(valid_opt({
        rules: {
          device: {
            required: true,
            isLogined: true
          },
          username: {
            required: true
          },
          passwd: {
            required: true
          }
        },
        messages: {
          device: {
            required: "请输入存储IP",
            isLogined: "您已经登录该设备"
          },
          username: {
            required: "请输入用户名"
          },
          passwd: {
            required: "请输入密码"
          }
        },
        errorPlacement: function(error, elem) {
          return error.addClass("help-small no-left-padding").insertAfter(elem.closest(".input-icon"));
        }
      }));
      $("#login-ip").typeahead({
        source: this._settings.getUsedMachines(),
        items: 6,
        updater: (function(_this) {
          return function(item) {
            return _this.vm.device = item;
          };
        })(this)
      });
      this.backstretch = $(".login").backstretch(["images/login-bg/1.jpg", "images/login-bg/2.jpg", "images/login-bg/3.jpg", "images/login-bg/4.jpg"], {
        fade: 1000,
        duration: 5000
      }).data("backstretch");
    };

    LoginPage.prototype.video = function() {
      return $(function() {
            var BV = new $.BigVideo();
            BV.init();
            BV.show('http://vjs.zencdn.net/v/oceans.mp4');
        });
    };

    LoginPage.prototype.attach = function() {
      LoginPage.__super__.attach.call(this);
    };

    LoginPage.prototype.detach = function() {
      var _ref;
      LoginPage.__super__.detach.call(this);
      return (_ref = this.backstretch) != null ? typeof _ref.pause === "function" ? _ref.pause() : void 0 : void 0;
    };

    LoginPage.prototype.change_device = function(device) {
      return this.vm.device = device;
    };

    LoginPage.prototype.close_alert = function(e) {
      return $(".alert-error").hide();
    };

    LoginPage.prototype.keypress = function(e) {
      if (e.which === 13) {
        return this.submit();
      }
    };

    LoginPage.prototype.submit = function() {
      var ifaces_request, port;
      port = this.settings.port;
      if (this.try_login) {
        return;
      }
      if ($(".login-form").validate().form()) {
        this.try_login = true;
        ifaces_request = new IfacesRest(("" + this.vm.device + ":") + port).query();
        ifaces_request.done((function(_this) {
          return function(data) {
            var iface, ifaces, isLogined, login_machine, settings, _i, _len;
            if (data.status === "success") {
              isLogined = false;
              login_machine = "";
              settings = new SettingsManager;
              ifaces = (function() {
                var _i, _len, _ref, _results;
                _ref = data.detail;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  iface = _ref[_i];
                  _results.push(iface.split("/", 1)[0]);
                }
                return _results;
              })();
              for (_i = 0, _len = ifaces.length; _i < _len; _i++) {
                iface = ifaces[_i];
                if (settings.isLoginedMachine(iface)) {
                  isLogined = true;
                  login_machine = iface;
                }
              }
              if (isLogined) {
                (new MessageModal(lang.login.has_logged_error(login_machine))).attach();
                return _this.try_login = false;
              } else {
                return _this._login();
              }
            } else {
              return _this._login();
            }
          };
        })(this));
        return ifaces_request.fail((function(_this) {
          return function() {
            return _this._login();
          };
        })(this));
      }
    };

    LoginPage.prototype._login = function() {
      var chain, port;
      port = this.settings.port;
      chain = new Chain;
      chain.chain((function(_this) {
        return function() {
          var query, rest;
          rest = new SessionRest(("" + _this.vm.device + ":") + port);
          query = rest.create(_this.vm.username, _this.vm.passwd);
          return query.done(function(data) {
            if (data.status === "success") {
              return _this.dview.token = data.detail.login_id;
            }
          });
        };
      })(this));
      chain.chain(this.dview.init(this.vm.device));
      return show_chain_progress(chain, true).done((function(_this) {
        return function() {
          var version_request;
          version_request = new SystemInfoRest(("" + _this.vm.device + ":") + port).query();
          version_request.done(function(data) {
            var _app_version, _server_version;
            if (data.status === "success") {
              _server_version = data.detail["gui version"].substring(0, 3);
              _app_version = _this.settings.version.substring(0, 3);
              _this._init_device();
              if (_server_version === _app_version) {
                return _this.dview.attach();
              } else {
                (new MessageModal(lang.login.version_invalid_error)).attach();
                return _this.dview.attach();
              }
            }
          });
          return version_request.fail(function() {
            _this._init_device();
            return _this.dview.attach();
          });
        };
      })(this)).fail((function(_this) {
        return function() {
          _this.try_login = false;
          return $('.alert-error', $('.login-form')).show();
        };
      })(this));
    };

    LoginPage.prototype._init_device = function() {
      this.try_login = false;
      this._settings.addUsedMachine(this.vm.device);
      this._settings.addLoginedMachine(this.vm.device);
      this._settings.addSearchedMachine(this.vm.device);
    };

    return LoginPage;

  })(Page);

  CentralLoginPage = (function(_super) {
    __extends(CentralLoginPage, _super);

    function CentralLoginPage(dview) {
      this.dview = dview;
      this._init_device = __bind(this._init_device, this);
      this.close_alert = __bind(this.close_alert, this);
      this.keypress = __bind(this.keypress, this);
      this.initpage = __bind(this.initpage, this);
      this.particles = __bind(this.particles, this);
      this.show_tips = __bind(this.show_tips, this);
      this.tips = __bind(this.tips, this);
      this.weibologin = __bind(this.weibologin, this);
      this.weixinlogin = __bind(this.weixinlogin, this);
      this.QQlogin = __bind(this.QQlogin, this);
      this._login = __bind(this._login, this);
      this.submit = __bind(this.submit, this);
      this.scroller = __bind(this.scroller, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralLoginPage.__super__.constructor.call(this, "centralloginpage-", "html/centralloginpage.html", {
        "class": "login"
      });
      this.try_login = false;
      this._settings = new SettingsManager;
      this.settings = new (require("settings").Settings);
      this.vm.show_ip = true;
    }

    CentralLoginPage.prototype.define_vm = function(vm) {
      vm.lang = lang.centrallogin;
      vm.key = "zexabox.com%sam&ace";
      vm.device = "192.168.2.82";
      vm.username = "827083";
      vm.passwd = "admin";
      vm.submit = this.submit;
      vm.keypress = this.keypress;
      vm.close_alert = this.close_alert;
      vm.checked = false;
      vm.show_ip = true;
      vm.register_email = "";
      vm.register_name = "";
      vm.register_passwd = "";
      vm.register_confirm_passwd = "";
      vm.register_hotelname = "";
      vm.user_id = "";
      vm.forget_email = "";
      vm.QQlogin = this.QQlogin;
      vm.weixinlogin = this.weixinlogin;
      return vm.weibologin = this.weibologin;
    };

    CentralLoginPage.prototype.rendered = function() {
      CentralLoginPage.__super__.rendered.call(this);
      $.validator.addMethod("isLogined", function(value, element) {
        return !(new SettingsManager).isLoginedMachine(value);
      });
      $(".login-form").validate(valid_opt({
        rules: {
          device: {
            required: true,
            isLogined: true
          },
          username: {
            required: true
          },
          passwd: {
            required: true
          }
        },
        messages: {
          device: {
            required: "请输入存储IP",
            isLogined: "您已经登录该设备"
          },
          username: {
            required: "请输入用户名"
          },
          passwd: {
            required: "请输入密码"
          }
        },
        errorPlacement: function(error, elem) {
          return error.addClass("help-small no-left-padding").insertAfter(elem.closest(".input-icon"));
        }
      }));
      $("#login-ip").typeahead({
        source: this._settings.getUsedMachines(),
        items: 6,
        updater: (function(_this) {
          return function(item) {
            return _this.vm.device = item;
          };
        })(this)
      });

      /*@backstretch = $(".login").backstretch([
          "images/login-bg/1.png",
          "images/login-bg/2.jpg",
          "images/login-bg/3.jpg",
          "images/login-bg/4.jpg",
          ], fade: 1000, duration: 5000).data "backstretch"
       */
      this.particles(this);
      this.initpage(this);
      new PCAS('location_p', 'location_c', 'location_a', '广东省', '', '');

      /*$('.hastip-login').poshytip(
          className: 'tip-twitter'
          showTimeout: 0
          alignTo: 'target'
          alignX: 'center'
          offsetY: 5
      )
       */

      /*
       *$("#location_p").chosen()
       *$("#location_c").chosen()
       *$("#location_a").chosen()
      
      $('#location_p_chzn a').attr('style', 'background-color: #DDE3EC;color: #8290A3;border: 1px solid #DDE3EC;height: 39px !important;width: 255px;');
      $('#location_c_chzn a').attr('style', 'background-color: #DDE3EC;color: #8290A3;border: 1px solid #DDE3EC;height: 39px !important;width: 255px;');
      $('#location_a_chzn a').attr('style', 'background-color: #DDE3EC;color: #8290A3;border: 1px solid #DDE3EC;height: 39px !important;width: 255px;');
      
      $('#location_p_chzn .chzn-search').attr('style', 'display:none');
      $('#location_c_chzn .chzn-search').attr('style', 'display:none');
      $('#location_a_chzn .chzn-search').attr('style', 'display:none');
      
      $('#location_p_chzn .chzn-drop').attr('style', 'width: 289px !important;');
      $('#location_c_chzn .chzn-drop').attr('style', 'width: 289px !important;');
      $('#location_a_chzn .chzn-drop').attr('style', 'width: 289px !important;');
      
      $('#location_p_chzn ul').attr('style', 'background-color: #DDE3EC;color: #8290A3;border: 1px solid #DDE3EC;width: 282px;');
      $('#location_c_chzn ul').attr('style', 'background-color: #DDE3EC;color: #8290A3;border: 1px solid #DDE3EC;width: 282px;');
      $('#location_a_chzn ul').attr('style', 'background-color: #DDE3EC;color: #8290A3;border: 1px solid #DDE3EC;width: 282px;');
       */
      new WOW().init();
    };

    CentralLoginPage.prototype.scroller = function() {
      return $(function() {
            (function($){
                $ (window).on("load",function(){
                    $("#page-scroller").mCustomScrollbar();
                });
            })(jQuery);
            
        });
    };

    CentralLoginPage.prototype.submit = function() {
      var code, e, log_request, port;
      port = this.settings.port;
      if ($(".login-form").validate().form()) {
        try {
          this.try_login = true;
          code = sha256_digest(this.vm.key + this.vm.passwd + "/login");
          log_request = new SessionRest(("" + this.vm.device + ":") + port).login(this.vm.username, code);
          log_request.done((function(_this) {
            return function(data) {
              var isLogined, login_machine, settings;
              if (data.status === "failed") {
                if (data.detail === "account online") {
                  return (new MessageModal(lang.login.online_error)).attach();
                } else {
                  return (new MessageModal(lang.login.passwd_error)).attach();
                }
              } else {
                _this.dview.token = data.detail;
                _this.dview.user_name = data.detail;
                isLogined = false;
                login_machine = "";
                settings = new SettingsManager;
                return _this._login();
              }
            };
          })(this));
          return log_request.fail((function(_this) {
            return function() {
              return (new MessageModal(lang.login.link_error)).attach();
            };
          })(this));
        } catch (_error) {
          e = _error;
        }
      }
    };

    CentralLoginPage.prototype._login = function() {
      var chain, port;
      port = this.settings.port;
      chain = new Chain;
      chain.chain(this.dview.init(this.vm.device, this.vm.username));
      return show_chain_progress(chain, true).done((function(_this) {
        return function() {
          _this.head = new HeaderUI(_this.sd, "store");
          _this.head.avatar(("" + _this.vm.device + ":") + port, _this.vm.username);
          return _this.dview.attach();
        };
      })(this)).fail((function(_this) {
        return function() {
          (new MessageModal("初始化失败")).attach();
          return _this.dview.attach();
        };
      })(this));
    };


    /*submit: () =>
        chain = new Chain
        chain.chain @dview.init @vm.device
        show_chain_progress(chain, true).done(=>
            @dview.attach()
            
        ).fail(=>
            @dview.attach())
     */

    CentralLoginPage.prototype.QQlogin = function() {
      return $(function(){
            QC.Login({
               btnId:"qqLoginBtn",    
               scope:"all",
               size: "A_XL"
            }, function(reqData, opts){
               //根据返回数据，更换按钮显示状态方法
               var dom = document.getElementById(opts['btnId']),
               _logoutTemplate=[
                    //头像
                    '<span><img src="{figureurl}" class="{size_key}"/></span>',
                    //昵称
                    '<span>{nickname}</span>',
                    //退出
                    '<span><a href="javascript:QC.Login.signOut();">退出</a></span>'    
               ].join("");
               dom && (dom.innerHTML = QC.String.format(_logoutTemplate, {
                   nickname : QC.String.escHTML(reqData.nickname), //做xss过滤
                   figureurl : reqData.figureurl
               }));
            }, function(opts){//注销成功
                 alert('QQ登录 注销成功');
            });
        });
    };

    CentralLoginPage.prototype.weixinlogin = function() {};

    CentralLoginPage.prototype.weibologin = function() {};

    CentralLoginPage.prototype.tips = function(sd) {
      var datas, e, i, info, j, k, type, types, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      try {
        info = [];
        datas = {};
        type = {};
        _ref = sd.centers.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          info.push(i.Ip);
          datas[i.Ip] = 0;
          type[i.Ip] = i.Devtype;
        }
        _ref1 = sd.stores.items.journals;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          j = _ref1[_j];
          if (_ref2 = j.ip, __indexOf.call(info, _ref2) >= 0) {
            datas[j.ip] = datas[j.ip] + 1;
          }
        }
        _results = [];
        for (_k = 0, _len2 = info.length; _k < _len2; _k++) {
          k = info[_k];
          if (datas[k] > 0) {
            if (type[k] === "storage") {
              types = "存储";
            } else {
              types = "服务器";
            }
            _results.push(this.show_tips(k, datas[k], types));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralLoginPage.prototype.show_tips = function(ip, num, type) {
      return $(function(){
            $.extend($.gritter.options, {
                class_name: 'gritter', 
                position: 'bottom-right', 
                fade_in_speed: 100, 
                fade_out_speed: 100, 
                time: 30000 
            });
            $.gritter.add({
                title: '<i class="icon-bell">告警信息</i>',
                text: '<a href="#" style="color:#ccc;font-size:14px;">' + type + ip + '有' + num + '条告警信息</a><br>点击可查看.'
            });
            return false;
        });
    };

    CentralLoginPage.prototype.particles = function(page) {
      return $(function() {
            particlesJS("particles-js", {
              "particles": {
                "number": {
                  "value": 70,
                  "density": {
                    "enable": true,
                    "value_area": 800
                  }
                },
                "color": {
                  "value": "#ffffff"
                },
                "shape": {
                  "type": "circle",
                  "stroke": {
                    "width": 0,
                    "color": "#000000"
                  },
                  "polygon": {
                    "nb_sides": 5
                  },
                  "image": {
                    "src": "img/github.svg",
                    "width": 100,
                    "height": 100
                  }
                },
                "opacity": {
                  "value": 0.5,
                  "random": false,
                  "anim": {
                    "enable": false,
                    "speed": 1,
                    "opacity_min": 0.1,
                    "sync": false
                  }
                },
                "size": {
                  "value": 3,
                  "random": true,
                  "anim": {
                    "enable": false,
                    "speed": 40,
                    "size_min": 0.1,
                    "sync": false
                  }
                },
                "line_linked": {
                  "enable": true,
                  "distance": 150,
                  "color": "#ffffff",
                  "opacity": 0.4,
                  "width": 1
                },
                "move": {
                  "enable": true,
                  "speed": 0.1,
                  "direction": "none",
                  "random": false,
                  "straight": false,
                  "out_mode": "out",
                  "bounce": false,
                  "attract": {
                    "enable": false,
                    "rotateX": 600,
                    "rotateY": 1200
                  }
                }
              },
              "interactivity": {
                "detect_on": "canvas",
                "events": {
                  "onhover": {
                    "enable": false,
                    "mode": "grab"
                  },
                  "onclick": {
                    "enable": false,
                    "mode": "push"
                  },
                  "resize": true
                },
                "modes": {
                  "grab": {
                    "distance": 140,
                    "line_linked": {
                      "opacity": 1
                    }
                  },
                  "bubble": {
                    "distance": 400,
                    "size": 30,
                    "duration": 2,
                    "opacity": 8,
                    "speed": 3
                  },
                  "repulse": {
                    "distance": 200,
                    "duration": 0.4
                  },
                  "push": {
                    "particles_nb": 4
                  },
                  "remove": {
                    "particles_nb": 2
                  }
                }
              },
              "retina_detect": true
            });
        });
    };

    CentralLoginPage.prototype.initpage = function(page) {
      return $(function() {
            $('.forget-form').validate({
                errorElement: 'label', //default input error message container
                errorClass: 'help-inline', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",
                rules: {
                    email: {
                        required: true,
                        email: true
                    }
                },

                messages: {
                    email: {
                        required: "邮箱不能为空"
                    }
                },

                invalidHandler: function (event, validator) { //display error alert on form submit   

                },

                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.control-group').addClass('error'); // set error class to the control group
                },

                success: function (label) {
                    label.closest('.control-group').removeClass('error');
                    label.remove();
                },

                errorPlacement: function (error, element) {
                    error.addClass('help-small no-left-padding').insertAfter(element.closest('.input-icon'));
                },

                submitHandler: function (form) {
                    var machine_detail, query;
                    var port = page.settings.port;
                    query = new SessionRest(page.vm.device + ":" + port);
                    machine_detail = query.forget(page.vm.forget_email);
                    machine_detail.done(function(data) {
                      if (data.status === "success") {
                            jQuery('.forget-form').hide();
                            return jQuery('.forget-success-form').show();
                      } else {
                        return (new MessageModal(page.vm.lang.forget_email_error)).attach();
                        }
                    });
                    return machine_detail.fail(function() {
                      return (new MessageModal(page.vm.lang.link_error)).attach();
                    });
                }
            });

            jQuery('#forget-back-btn').click(function () {
                window.location.href = "index.html";
            });

            $('.forget-form input').keypress(function (e) {
                if (e.which == 13) {
                    if ($('.forget-form').validate().form()) {
                        window.location.href = "index.html";
                    }
                    return false;
                }
            });

            jQuery('#forget-password').click(function () {
                jQuery('.login-form').hide();
                jQuery('.forget-form').show();
            });

            jQuery('#back-btn').click(function () {
                jQuery('.login-form').show();
                jQuery('.forget-form').hide();
            });

            $('.register-form').validate({
                errorElement: 'label', //default input error message container
                errorClass: 'help-inline', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",
                rules: {
                    username: {
                        required: true
                    },
                    password: {
                        required: true
                    },
                    rpassword: {
                        equalTo: "#register_password"
                    },
                    email: {
                        required: true,
                        email: true
                    },
                    tnc: {
                        required: true
                    },
                    location: {
                        required: true
                    }
                },

                messages: { // custom messages for radio buttons and checkboxes
                    tnc: {
                        required: "请勾选"
                    }
                },

                invalidHandler: function (event, validator) { //display error alert on form submit   

                },

                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.control-group').addClass('error'); // set error class to the control group
                },

                success: function (label) {
                    label.closest('.control-group').removeClass('error');
                    label.remove();
                },

                errorPlacement: function (error, element) {
                    if (element.attr("name") == "tnc") { // insert checkbox errors after the container                  
                        error.addClass('help-small no-left-padding').insertAfter($('#register_tnc_error'));
                    } else {
                        error.addClass('help-small no-left-padding').insertAfter(element.closest('.input-icon'));
                    }
                },

                submitHandler: function (form) {
                    var selected_p = $("#location_p").val();
                    var selected_c = $("#location_c").val();
                    var selected_a = $("#location_a").val();

                    if (selected_a == "市辖区"){
                        return (new MessageModal(page.vm.lang.location_a_error)).attach();
                    }else{
                        var machine_detail, query;
                        var port = page.settings.port;
                        query = new SessionRest(page.vm.device + ":" + port);
                        machine_detail = query.register(page.vm.register_name,page.vm.register_passwd,page.vm.register_email,selected_p + selected_c + selected_a + page.vm.register_hotelname);
                        machine_detail.done(function(data) {
                          if (data.status === "success") {
                                page.vm.user_id = data.detail;
                                jQuery('.register-form').hide();
                                page.vm.username = data.detail;
                                page.vm.passwd = page.vm.register_passwd;
                                return jQuery('.wellcome-form').show();
                          } else {
                            return (new MessageModal(page.vm.lang.email_error)).attach();
                            }
                        });
                        return machine_detail.fail(function() {
                          return (new MessageModal(page.vm.lang.link_error)).attach();
                        });
                    }
                }
            });

            $('.wellcome-form').validate({
                submitHandler: function (form) {
                    page.submit();
                }
            });

            jQuery('#wellcome-back-btn').click(function () {
                window.location.href = "index.html";
            });

            jQuery('#register-btn').click(function () {
                jQuery('.login-form').hide();
                jQuery('.register-form').show();
            });

            jQuery('#register-back-btn').click(function () {
                jQuery('.login-form').show();
                jQuery('.register-form').hide();
            });
        });
    };

    CentralLoginPage.prototype.keypress = function(e) {
      if (e.which === 13) {
        return this.submit();
      }
    };

    CentralLoginPage.prototype.close_alert = function(e) {
      return $(".alert-error").hide();
    };

    CentralLoginPage.prototype._init_device = function() {
      this.try_login = false;
      this._settings.addUsedMachine(this.vm.device);
      this._settings.addLoginedMachine(this.vm.device);
      this._settings.addSearchedMachine(this.vm.device);
    };

    return CentralLoginPage;

  })(Page);

  CentralServerViewPage = (function(_super) {
    __extends(CentralServerViewPage, _super);

    function CentralServerViewPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.plot_flow_out = __bind(this.plot_flow_out, this);
      this.plot_flow_in = __bind(this.plot_flow_in, this);
      this.flot_mem = __bind(this.flot_mem, this);
      this.flot_cache = __bind(this.flot_cache, this);
      this.flot_cpu = __bind(this.flot_cpu, this);
      this.process_stats = __bind(this.process_stats, this);
      this.refresh_pie = __bind(this.refresh_pie, this);
      this.sparkline_stats = __bind(this.sparkline_stats, this);
      this.calendar = __bind(this.calendar, this);
      this.add_time_to_journal = __bind(this.add_time_to_journal, this);
      this.detail_mem = __bind(this.detail_mem, this);
      this.detail_cache = __bind(this.detail_cache, this);
      this.detail_cpu = __bind(this.detail_cpu, this);
      this.clear_log = __bind(this.clear_log, this);
      this.change_status = __bind(this.change_status, this);
      this.update_circle = __bind(this.update_circle, this);
      this._process = __bind(this._process, this);
      this._warning = __bind(this._warning, this);
      this._machine = __bind(this._machine, this);
      this._colony = __bind(this._colony, this);
      this._ping = __bind(this._ping, this);
      this.spark = __bind(this.spark, this);
      this.bubble = __bind(this.bubble, this);
      this.handle_log = __bind(this.handle_log, this);
      this.refresh_num = __bind(this.refresh_num, this);
      this.subitems_critical = __bind(this.subitems_critical, this);
      this.subitems_warning = __bind(this.subitems_warning, this);
      this.subitems_info = __bind(this.subitems_info, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServerViewPage.__super__.constructor.call(this, "centralviewpage-", "html/centralserverviewpage.html");
      this.flow_max = 0;
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var latest;
          if (_this.has_rendered) {
            latest = source.items[source.items.length - 1];
            _this.vm.cpu_load = parseInt(latest.server_cpu);
            _this.vm.cache_load = parseInt(latest.server_system);
            _this.vm.mem_load = parseInt(latest.server_mem);
            return _this.refresh_num();
          }
        };
      })(this));
      $(this.sd.journals).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.journal = _this.subitems();
        };
      })(this));
      $(this.sd.centers).on("updated", (function(_this) {
        return function(e, source) {
          var i, num, _i, _len, _ref;
          num = [];
          _ref = source.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i.Devtype === "export" && i.Status) {
              num.push(i);
            }
          }
          return _this.vm.on_monitor = num.length;
        };
      })(this));
    }

    CentralServerViewPage.prototype.define_vm = function(vm) {
      vm.lang = lang.central_server_view;
      vm.cpu_load = 0;
      vm.cache_load = 0;
      vm.mem_load = 0;
      vm.colony_num = 0;
      vm.machine_num = 0;
      vm.warning_num = 0;
      vm.process_num = 0;
      vm.total_monitor = 0;
      vm.on_monitor = 0;
      vm.clear_log = this.clear_log;
      vm.status_server = "normal";
      vm.change_status = this.change_status;
      vm.journals = [];
      vm.flow_type = "fwrite_mb";
      vm.rendered = this.rendered;
      vm.fattr_journal_status = fattr.journal_status;
      vm.fattr_monitor_status = fattr.monitor_status;
      vm.fattr_view_status_fixed = fattr.view_status_fixed;
      vm.switch_to_page = this.switch_to_page;
      vm.journal = this.subitems();
      vm.journal_info = this.subitems_info();
      vm.journal_warning = this.subitems_warning();
      vm.journal_critical = this.subitems_critical();
      vm.rendered = this.rendered;
      vm.detail_cpu = this.detail_cpu;
      vm.detail_cache = this.detail_cache;
      vm.detail_mem = this.detail_mem;
      return vm.handle_log = this.handle_log;
    };

    CentralServerViewPage.prototype.rendered = function() {
      var $scroller1, $scroller2, $scroller3, $scroller4, e;
      CentralServerViewPage.__super__.rendered.call(this);
      this.vm.journal = this.subitems();
      this.vm.journal_info = this.subitems_info();
      this.vm.journal_warning = this.subitems_warning();
      this.vm.journal_critical = this.subitems_critical();
      this.data_table1 = $("#log-table1").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table2 = $("#log-table2").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table3 = $("#log-table3").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table4 = $("#log-table4").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $('.countup').counterUp({
        delay: 2,
        time: 1000
      });
      $scroller1 = $("#journals-scroller-1");
      $scroller2 = $("#journals-scroller-2");
      $scroller3 = $("#journals-scroller-3");
      $scroller4 = $("#journals-scroller-4");
      $scroller1.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller1.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller2.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller2.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller3.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller3.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller4.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller4.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      try {
        this.plot_flow_in(this.sd.stats.items);
      } catch (_error) {
        e = _error;
        console.log(e);
      }
      this.refresh_num();
      return this.bubble(this.sd.stats.items);
    };

    CentralServerViewPage.prototype.subitems = function() {
      var arrays, error, i, _i, _len, _ref;
      try {
        arrays = [];
        _ref = this.sd.journals.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          i.created = i.created.replace("-", "/").replace("-", "/").replace("T", "-").replace("+08:00", "");
          if (i.status) {
            i.chinese_status = "已处理";
          } else {
            i.chinese_status = "未处理";
          }
          arrays.push(i);
        }
        return arrays.reverse();
      } catch (_error) {
        error = _error;
        return [];
      }
    };

    CentralServerViewPage.prototype.subitems_info = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'info') {
          info.push(i);
        }
      }
      return info;
    };

    CentralServerViewPage.prototype.subitems_warning = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'warning') {
          info.push(i);
        }
      }
      return info;
    };

    CentralServerViewPage.prototype.subitems_critical = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'critical') {
          info.push(i);
        }
      }
      return info;
    };

    CentralServerViewPage.prototype.refresh_num = function() {
      this.vm.colony_num = this._colony();
      this.vm.machine_num = this._machine();
      this.vm.warning_num = this._warning();
      return this.vm.process_num = this._process();
    };

    CentralServerViewPage.prototype.handle_log = function() {
      return (new CentralHandleLogModal(this.sd, this)).attach();
    };

    CentralServerViewPage.prototype.bubble = function(items) {
      return $(function (){
            var config1 = liquidFillGaugeDefaultSettings();
            var config2 = liquidFillGaugeDefaultSettings();
            var config3 = liquidFillGaugeDefaultSettings();
            
            config1.waveAnimateTime = 1000;
            config2.waveAnimateTime = 1000;
            config3.waveAnimateTime = 1000;
            
            config1.textVertPosition = 0.8;
            config2.textVertPosition = 0.8;
            config3.textVertPosition = 0.8;
            
            config1.textSize = 0.55;
            config2.textSize = 0.55;
            config3.textSize = 0.55;
            
            config1.textColor = "rgba(0,0,0,0)";
            config2.textColor = "rgba(0,0,0,0)";
            config3.textColor = "rgba(0,0,0,0)";
            
            config1.circleColor = "rgb(87, 199, 212)";
            config2.circleColor = "rgb(98, 168, 234)";
            config3.circleColor = "rgb(146, 109, 222)";
            
            config1.waveColor = "rgba(87, 199, 212,0.8)";
            config2.waveColor = "rgba(98, 168, 234,0.8)";
            config3.waveColor = "rgba(146, 109, 222,0.8)";
            
            config1.circleFillGap = 0;
            config2.circleFillGap = 0;
            config3.circleFillGap = 0;
            
            var gauge1 = loadLiquidFillGauge("fillgauge1", 0, config1);
            var gauge2 = loadLiquidFillGauge("fillgauge2", 0, config2);
            var gauge3 = loadLiquidFillGauge("fillgauge3", 0, config3);
            
            setInterval(function () {
                try{
                    var cpu = items[items.length - 1].server_cpu;
                        system = items[items.length - 1].server_system;
                        mem = items[items.length - 1].server_mem;
                    gauge1.update(cpu);
                    gauge2.update(system);
                    gauge3.update(mem);
                }
                catch(e){
                    console.log(e);
                }
            }, 3000);
        });

      /*config.circleThickness = 0.15;
          config.circleColor = "#808015";
          config.textColor = "#fff";
          config.waveTextColor = "#FFF";
          config.waveColor = "#AAAA39";
          config.textVertPosition = 0.8;
          config.waveAnimateTime = 1000;
          config.waveHeight = 0.05;
          config.waveAnimate = true;
          config.waveRise = false;
          config.waveHeightScaling = false;
          config.waveOffset = 0.25;
          config.textSize = 0.75;
          config.waveCount = 3;
          var config1 = config;
          var config2 = config;
          var config3 = config;
       */
    };

    CentralServerViewPage.prototype.spark = function(total, online) {
      return $(function() {  
            $("#sparkline1").sparkline([online,total-online], {
                type: 'pie',
                width: '110',
                height: '110',
                borderColor: '#',
                sliceColors: ['rgb(227, 91, 90)','rgba(227, 91, 90,0.5)']})
            $("#sparkline2").sparkline([5,6,7,9,9,5,3,2,2,4,6,7], {
                type: 'line',
                width: '200px',
                height: '50px',
                lineColor: '#0000ff'});
            $("#sparkline3").sparkline([5,6,7,9,9,5,3,2,2,4,6,7], {
                type: 'line',
                width: '150px',
                height: '50px',
                lineColor: '#0000ff'});
            $('#sparkline1').bind('sparklineRegionChange', function(ev) {
                var sparkline = ev.sparklines[0],
                    region = sparkline.getCurrentRegionFields(),
                    value = region.percent;
                $('.mouseoverregion').text("使用率:" + value);
            }).bind('mouseleave', function() {
                $('.mouseoverregion').text('');
            });
        });
    };

    CentralServerViewPage.prototype._ping = function() {
      var i, num, _i, _len, _ref;
      num = [];
      _ref = this.sd.centers.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.Devtype === "export" && i.Status) {
          num.push(i);
        }
      }
      return num.length;
    };

    CentralServerViewPage.prototype._colony = function() {
      var i, max, option, _i, _len, _ref, _ref1;
      option = [0];
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if ((_ref1 = i.cid, __indexOf.call(option, _ref1) < 0) && i.devtype === "storage") {
          option.push(i.cid);
        }
      }
      max = Math.max.apply(null, option);
      return max;
    };

    CentralServerViewPage.prototype._machine = function() {
      var i, option, _i, _len, _ref;
      option = [];
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.devtype === "export") {
          option.push(i.cid);
        }
      }
      return option.length;
    };

    CentralServerViewPage.prototype._warning = function() {
      var arrays, i, _i, _len, _ref;
      arrays = [];
      _ref = this.sd.journals.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === "warning" || i.level === "critical") {
          if (!i.status) {
            arrays.push(i);
          }
        }
      }
      return arrays.length;
    };

    CentralServerViewPage.prototype._process = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: ""
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "export") {
            tmp.push(i);
          }
        }
        return tmp.length;
      }
    };

    CentralServerViewPage.prototype.update_circle = function() {
      var e, opt1, opt2, opt3, _base, _base1, _base2;
      opt1 = {
        animate: 1000,
        size: 100,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(87, 199, 212)",
        trackColor: 'rgba(87, 199, 212,0.1)',
        scaleColor: false
      };
      opt2 = {
        animate: 1000,
        size: 100,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(98, 168, 234)",
        trackColor: 'rgba(98, 168, 234,0.1)',
        scaleColor: false
      };
      opt3 = {
        animate: 1000,
        size: 100,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(146, 109, 222)",
        trackColor: 'rgba(146, 109, 222,0.1)',
        scaleColor: false
      };
      try {
        $("#cpu-load").easyPieChart(opt1);
        if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
          _base.update(this.vm.cpu_load);
        }
        $("#cache-load").easyPieChart(opt2);
        if (typeof (_base1 = $("#cache-load").data("easyPieChart")).update === "function") {
          _base1.update(this.vm.cache_load);
        }
        $("#mem-load").easyPieChart(opt3);
        return typeof (_base2 = $("#mem-load").data("easyPieChart")).update === "function" ? _base2.update(this.vm.mem_load) : void 0;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralServerViewPage.prototype.change_status = function(type) {
      return this.vm.status_server = type;
    };

    CentralServerViewPage.prototype.clear_log = function() {
      if (this.vm.journal.length === 0) {
        (new MessageModal(this.vm.lang.clear_log_error)).attach();
        return;
      }
      return (new ConfirmModal(this.vm.lang.clear_log_tips, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain();
          chain.chain(function() {
            return (new JournalRest(_this.sd.host)).delete_log();
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            _this.attach();
            return (new MessageModal(_this.vm.lang.clear_log_success)).attach();
          });
        };
      })(this))).attach();
    };

    CentralServerViewPage.prototype.detail_cpu = function() {
      return (new CentralServerCpuModal(this.sd, this)).attach();
    };

    CentralServerViewPage.prototype.detail_cache = function() {};

    CentralServerViewPage.prototype.detail_mem = function() {
      return (new CentralServerMemModal(this.sd, this)).attach();
    };

    CentralServerViewPage.prototype.add_time_to_journal = function(items) {
      var change_time, item, journals, _i, _len;
      journals = [];
      change_time = function funConvertUTCToNormalDateTime(utc)
        {
            var date = new Date(utc);
            var ndt;
            ndt = date.getFullYear()+"/"+(date.getMonth()+1)+"/"+date.getDate()+"-"+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
            return ndt;
        };
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        item.date = change_time(item.created_at * 1000);
        journals.push(item);
      }
      return journals;
    };

    CentralServerViewPage.prototype.calendar = function() {
      return $(document).ready(function() {
            $('#calendar').fullCalendar({
            })
        });
    };

    CentralServerViewPage.prototype.sparkline_stats = function(rate) {
      var arm;
      return;
      arm = {
        chart: {
          type: 'pie',
          margin: [0, 0, 0, 0]
        },
        title: {
          text: '',
          verticalAlign: "bottom",
          style: {
            color: '#000',
            fontFamily: 'Microsoft YaHei',
            fontSize: 16
          }
        },
        subtitle: {
          text: ''
        },
        xAxis: {
          type: 'category',
          gridLineColor: '#FFF',
          tickColor: '#FFF',
          labels: {
            enabled: false,
            rotation: -45,
            style: {
              fontSize: '13px',
              fontFamily: 'opensans-serif'
            }
          }
        },
        yAxis: {
          gridLineColor: '#FFF',
          min: 0,
          max: 100,
          title: {
            text: ''
          },
          labels: {
            enabled: true
          }
        },
        credits: {
          enabled: false
        },
        exporting: {
          enabled: false
        },
        legend: {
          enabled: true
        },
        tooltip: {
          pointFormat: '<b>{point.y:.1f}%</b>',
          style: {
            color: '#fff',
            fontSize: '12px',
            opacity: 0.8
          },
          borderRadius: 0,
          borderColor: '#000',
          backgroundColor: '#000'
        },
        plotOptions: {
          pie: {
            animation: false,
            shadow: false,
            dataLabels: {
              enabled: false
            },
            showInLegend: true
          }
        },
        series: [
          {
            type: 'pie',
            name: 'Population'
          }
        ]
      };
      return $('#sparkline1').highcharts(Highcharts.merge(arm, {
        title: {
          text: ''
        },
        colors: ["rgb(40, 183, 121)", "rgba(40, 183, 121,0.5)"],
        series: [
          {
            name: '系统空间',
            data: [['已用', rate * 100], ['剩余', 100 - rate * 100]]
          }
        ]
      }));
    };

    CentralServerViewPage.prototype.refresh_pie = function() {
      var data, e, i, latest, _i, _len, _ref;
      try {
        data = [];
        latest = this.sd.stats.items[this.sd.stats.items.length - 1];
        _ref = latest.master.process;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.cpu === 0) {
            data.push({
              name: i.protype,
              y: i.cpu
            });
          }
        }
        return this.process_stats(data);
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralServerViewPage.prototype.process_stats = function() {

      /*Highcharts.getOptions().plotOptions.pie.colors = (`function () {
          var colors = [],
              base = Highcharts.getOptions().colors[0],
              i;
          for (i = 0; i < 10; i += 1) {
              // Start out with a darkened base color (negative brighten), and end
              // up with a much brighter color
              colors.push(Highcharts.Color(base).brighten((i - 3) / 7).get());
          }
          return colors;
      }()`)
       */
      return $('#process_stats').highcharts({
        chart: {
          plotBackgroundColor: null,
          plotBorderWidth: null,
          plotShadow: false,
          animation: false,
          spacingBottom: 50
        },
        title: {
          text: '进程cpu占用率',
          verticalAlign: 'bottom'
        },
        tooltip: {
          pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        credits: {
          enabled: false
        },
        legend: {
          enabled: false
        },
        exporting: {
          enabled: false
        },
        plotOptions: {
          pie: {
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
              enabled: false,
              format: '<b>{point.name}</b>: {point.percentage:.1f} %',
              style: {
                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
              },
              connectorColor: 'silver'
            }
          }
        },
        colors: ["rgba(3, 110, 184,1)", "rgba(3, 110, 184,0.8)", "rgba(3, 110, 184,0.6)", "rgba(3, 110, 184,0.4)", "rgba(3, 110, 184,0.2)", "rgba(3, 110, 184,0.1)"],
        series: [
          {
            type: 'pie',
            name: '占用比率',
            data: [
              ['minio', 45.0], ['python', 26.8], {
                name: 'Chrome',
                y: 12.8,
                sliced: true,
                selected: true
              }, ['bash', 8.5], ['ssh', 6.2], ['access', 0.7]
            ]
          }
        ]
      });
    };

    CentralServerViewPage.prototype.flot_cpu = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flot_cpu', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    margin:[0,0,0,0],
                    width:200,
                    backgroundColor: 'rgba(0,0,0,0)',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                try{
                                    var type1 = 'server_cpu';
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = Math.random()
                                    series1.addPoint([x, y1+y2], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    lineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    labels:{
                        enabled:false
                    },
                    gridLineWidth:0,
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                colors:["#62a8ea","#a58add"],
                plotOptions: {
                    areaspline: {
                        lineColor: "rgb(87, 199, 212)",
                        lineWidth:2,
                        fillColor: "#fff",
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: true,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(165, 138, 221,0.6)"
                        },
                        fillOpacity:0.3
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
        });
    };

    CentralServerViewPage.prototype.flot_cache = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flot_cache', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    margin:[0,0,0,0],
                    width:200,
                    backgroundColor: 'rgba(0,0,0,0)',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                try{
                                    var type1 = 'server_cache';
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = Math.random()
                                    series1.addPoint([x, y1+y2], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    lineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    labels:{
                        enabled:false
                    },
                    gridLineWidth:0,
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                colors:["#62a8ea","#a58add"],
                plotOptions: {
                    areaspline: {
                        lineColor: "rgb(98, 168, 234)",
                        lineWidth:2,
                        fillColor: "#fff",
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: true,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(165, 138, 221,0.6)"
                        },
                        fillOpacity:0.3
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
        });
    };

    CentralServerViewPage.prototype.flot_mem = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flot_mem', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    margin:[0,0,0,0],
                    width:200,
                    backgroundColor: 'rgba(0,0,0,0)',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                try{
                                    var type1 = 'server_mem';
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = Math.random();
                                    series1.addPoint([x, y1+y2], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    lineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    labels:{
                        enabled:false
                    },
                    gridLineColor: "#FFF",
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                colors:["#62a8ea","#a58add"],
                plotOptions: {
                    areaspline: {
                        lineColor: "rgb(146, 109, 222)",
                        lineWidth:2,
                        fillColor: "#fff",
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(255,120,120)"
                        },
                        fillOpacity:0.3
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
        });
    };

    CentralServerViewPage.prototype.plot_flow_in = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_in', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'server_net_write';
                                    var type2 = 'server_net_read';
                                    var random = Math.random();
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = yaxis[yaxis.length - 1][type2];
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    gridLineColor: "#FFF",
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                colors:["#62a8ea","#a58add"],
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(255,120,120)"
                        },
                        fillOpacity:0.3
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#net_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#net_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    CentralServerViewPage.prototype.plot_flow_out = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_out', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(235, 235, 235)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'server_vol_write';
                                    var type2 = 'server_vol_read';
                                    var random = Math.random();
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = yaxis[yaxis.length - 1][type2];
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    gridLineColor: "#FFF",
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        fillOpacity: 0.2,
                        marker: {
                            enabled: true,
                            symbol: 'circle',
                            radius: 4.5,
                            fillColor:"rgb(143, 208, 253)",
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        lineWidth: 2
                    }
                },
                colors:["rgb(115, 172, 240)","rgb(115, 172, 240)"],
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#vol_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#vol_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    return CentralServerViewPage;

  })(Page);

  CentralStoreViewPage = (function(_super) {
    __extends(CentralStoreViewPage, _super);

    function CentralStoreViewPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.plot_pie = __bind(this.plot_pie, this);
      this.refresh_pie = __bind(this.refresh_pie, this);
      this.plot_flow_out = __bind(this.plot_flow_out, this);
      this.plot_flow_in = __bind(this.plot_flow_in, this);
      this.flot_temp = __bind(this.flot_temp, this);
      this.flot_system = __bind(this.flot_system, this);
      this.flot_cap = __bind(this.flot_cap, this);
      this.add_time_to_journal = __bind(this.add_time_to_journal, this);
      this.detail_mem = __bind(this.detail_mem, this);
      this.detail_cache = __bind(this.detail_cache, this);
      this.detail_cpu = __bind(this.detail_cpu, this);
      this.detail_volume = __bind(this.detail_volume, this);
      this.detail_raid = __bind(this.detail_raid, this);
      this.detail_disk = __bind(this.detail_disk, this);
      this.detail_break = __bind(this.detail_break, this);
      this.clear_log = __bind(this.clear_log, this);
      this.change_status = __bind(this.change_status, this);
      this.update_circle = __bind(this.update_circle, this);
      this._process = __bind(this._process, this);
      this._warning = __bind(this._warning, this);
      this._machine = __bind(this._machine, this);
      this._cap = __bind(this._cap, this);
      this.refresh_num = __bind(this.refresh_num, this);
      this.pie_cap = __bind(this.pie_cap, this);
      this.pie_temp = __bind(this.pie_temp, this);
      this.pie_system = __bind(this.pie_system, this);
      this.column_chart = __bind(this.column_chart, this);
      this.get_cap = __bind(this.get_cap, this);
      this.refresh_store_num = __bind(this.refresh_store_num, this);
      this.waterbubble = __bind(this.waterbubble, this);
      this.gauge_system = __bind(this.gauge_system, this);
      this._ping = __bind(this._ping, this);
      this.webcam = __bind(this.webcam, this);
      this.handle_log = __bind(this.handle_log, this);
      this.alarm = __bind(this.alarm, this);
      this.subitems_unhandled = __bind(this.subitems_unhandled, this);
      this.subitems_critical = __bind(this.subitems_critical, this);
      this.subitems_warning = __bind(this.subitems_warning, this);
      this.subitems_info = __bind(this.subitems_info, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralStoreViewPage.__super__.constructor.call(this, "centralviewpage-", "html/centralstoreviewpage.html");
      this.vm.show_cam = false;
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var latest;
          if (_this.has_rendered) {
            latest = source.items[source.items.length - 1];
            _this.vm.cpu_load = parseInt(latest.store_cpu);
            _this.vm.cache_load = parseInt(latest.store_cache);
            _this.vm.mem_load = parseInt(latest.store_mem);
            _this.vm.system = parseInt(latest.store_system);
            _this.vm.temp = parseInt(latest.temp);
            _this.vm.cap = parseInt(latest.store_cap);
            _this.refresh_pie(parseInt(latest.store_cap), parseInt(latest.store_cap_total), parseInt(latest.store_cap_remain));
            _this.vm.cap_num = (latest.store_cap_total / 1024).toFixed(2);
            return _this.refresh_store_num();
          }
        };
      })(this));
      $(this.sd.journals).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.journal = _this.subitems();
        };
      })(this));
      $(this.sd.centers).on("updated", (function(_this) {
        return function(e, source) {
          var i, num, _i, _len, _ref;
          num = [];
          _ref = source.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i.Devtype === "storage" && i.Status) {
              num.push(i);
            }
          }
          return _this.vm.on_monitor = num.length;
        };
      })(this));
      $(this.sd.stores).on("updated", (function(_this) {
        return function(e, source) {
          _this.vm.warning_number = source.items.NumOfJours;
          _this.vm.disk_number = source.items.NumOfDisks;
          _this.vm.raid_number = source.items.NumOfRaids;
          return _this.vm.volume_number = source.items.NumOfVols;
        };
      })(this));
      $(this.sd.centers).on("updated", (function(_this) {
        return function(e, source) {
          var i, tmp, _i, _len, _ref;
          tmp = [];
          _ref = source.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i.Devtype === "storage") {
              tmp.push(i);
            }
          }
          return _this.vm.process_num = tmp.length;
        };
      })(this));
    }

    CentralStoreViewPage.prototype.define_vm = function(vm) {
      vm.lang = lang.central_store_view;
      vm.cpu_load = 0;
      vm.cache_load = 0;
      vm.mem_load = 0;
      vm.system = 0;
      vm.temp = 0;
      vm.cap = 0;
      vm.cap_load = 30;
      vm.cap_load_availed = 70;
      vm.status_server = "normal";
      vm.change_status = this.change_status;
      vm.cap_num = 0;
      vm.machine_num = 0;
      vm.warning_num = 0;
      vm.process_num = 0;
      vm.connect_number = 0;
      vm.break_number = 0;
      vm.raid_number = 0;
      vm.volume_number = 0;
      vm.disk_number = 0;
      vm.clear_log = this.clear_log;
      vm.journals = [];
      vm.flow_type = "fwrite_mb";
      vm.rendered = this.rendered;
      vm.fattr_journal_status = fattr.journal_status;
      vm.fattr_detail_store = fattr.detail_store;
      vm.fattr_view_status = fattr.view_status;
      vm.switch_to_page = this.switch_to_page;
      vm.$watch("cpu_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("cache_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cache-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("mem_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#mem-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.journal = this.subitems();
      vm.journal_info = this.subitems_info();
      vm.journal_warning = this.subitems_warning();
      vm.journal_critical = this.subitems_critical();
      vm.journal_unhandled = this.subitems_unhandled();
      vm.detail_cpu = this.detail_cpu;
      vm.detail_cache = this.detail_cache;
      vm.detail_mem = this.detail_mem;
      vm.detail_break = this.detail_break;
      vm.detail_disk = this.detail_disk;
      vm.detail_raid = this.detail_raid;
      vm.detail_volume = this.detail_volume;
      vm.switch_net_write = this.switch_net_write;
      vm.switch_net_read = this.switch_net_read;
      vm.switch_vol_write = this.switch_vol_write;
      vm.switch_vol_read = this.switch_vol_read;
      vm.net_write = this.net_write;
      vm.net_read = this.net_read;
      vm.on_monitor = 0;
      vm.all_checked = false;
      vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.journal_unhandled;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
      vm.handle_log = this.handle_log;
      vm.show_cam = false;
      return vm.alarm = this.alarm();
    };

    CentralStoreViewPage.prototype.rendered = function() {
      var $scroller1, $scroller2, $scroller3, $scroller4, e;
      CentralStoreViewPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      this.vm.journal = this.subitems();
      this.vm.journal_info = this.subitems_info();
      this.vm.journal_warning = this.subitems_warning();
      this.vm.journal_critical = this.subitems_critical();
      this.vm.journal_unhandled = this.subitems_unhandled();
      this.update_circle();
      this.data_table1 = $("#log-table1").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table2 = $("#log-table2").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table3 = $("#log-table3").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table4 = $("#log-table4").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller1 = $("#journals-scroller-1");
      $scroller2 = $("#journals-scroller-2");
      $scroller3 = $("#journals-scroller-3");
      $scroller4 = $("#journals-scroller-4");
      $scroller1.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller1.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller2.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller2.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller3.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller3.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller4.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller4.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $('.countup').counterUp({
        delay: 2,
        time: 1000
      });
      try {
        this.plot_flow_in(this.sd.stats.items);
        this.plot_flow_out(this.sd.stats.items);
        this.pie_system(this.sd.stats.items);
        this.pie_temp(this.sd.stats.items);
        this.pie_cap(this.sd.stats.items);
        this.column_chart(this.sd.stats.items);
        this.plot_pie(0, 0, 0);
        this.refresh_num();
        this.refresh_store_num();
        return this.vm.alarm = this.alarm();
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreViewPage.prototype.subitems = function() {
      var arrays, error, i, _i, _len, _ref;
      try {
        arrays = [];
        _ref = this.sd.journals.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          i.created = i.created.replace("-", "/").replace("-", "/").replace("T", "-").replace("+08:00", "");
          if (i.status) {
            i.chinese_status = "已处理";
          } else {
            i.chinese_status = "未处理";
          }
          arrays.push(i);
        }
        return arrays.reverse();
      } catch (_error) {
        error = _error;
        return [];
      }

      /*arrays = [{"date":"2016/09/07 08:45:37","level":"info","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"critical","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"critical","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"warning","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"info","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"info","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"info","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"warning","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"info","chinese_message":"阵列 RAID 已创建"},\
                {"date":"2016/09/07 08:45:37","level":"warning","chinese_message":"阵列 RAID 已创建"}]
       */
    };

    CentralStoreViewPage.prototype.subitems_info = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'info') {
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreViewPage.prototype.subitems_warning = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'warning') {
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreViewPage.prototype.subitems_critical = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'critical') {
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreViewPage.prototype.subitems_unhandled = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (!i.status) {
          i.chinese_status = "未处理";
          i.checked = false;
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreViewPage.prototype.alarm = function() {
      return this.sd.warnings.items;
    };

    CentralStoreViewPage.prototype.handle_log = function() {
      return (new CentralHandleLogModal(this.sd, this)).attach();
    };

    CentralStoreViewPage.prototype.webcam = function() {
      return $(function() {
              var sayCheese = new SayCheese('#webcam', { audio: false });
              sayCheese.on('start', function() {
                this.takeSnapshot();
              });
            
              sayCheese.on('snapshot', function(snapshot) {
                try{
                    var canvas = document.getElementById('canvas'); 
                    var context = canvas.getContext('2d');
                    context.drawImage(snapshot, 0, 0, 320, 240);
                    console.log(snapshot);
                }
                catch(e){
                    console.log(e);
                }
              });
            
              sayCheese.start();
              
              $('#shot').click(function () {
                console.log(sayCheese);
                sayCheese.takeSnapshot();
              });
        });
    };

    CentralStoreViewPage.prototype._ping = function() {
      var i, num, _i, _len, _ref;
      num = [];
      _ref = this.sd.centers.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.Devtype === "storage" && i.Status) {
          num.push(i);
        }
      }
      return num.length;
    };

    CentralStoreViewPage.prototype.gauge_system = function(system) {
      console.log(system);
      return $(function () {
            var gaugeOptions = {
                chart: {
                    type: 'solidgauge'
                },
                title: {
                    text:"",
                    style:{
                        fontWeight:'bold',
                        fontSize:19,
                        color:'#000'
                    }
                },
                pane: {
                    center: ['50%', '85%'],
                    size: '140%',
                    startAngle: -90,
                    endAngle: 90,
                    background: {
                        backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || '#EEE',
                        innerRadius: '60%',
                        outerRadius: '100%',
                        shape: 'arc'
                    }
                },
                tooltip: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                credits: {
                    enabled:false
                },
                // the value axis
                yAxis: {
                    stops: [
                        [0.1, '#55BF3B'], // green
                        [0.5, '#DDDF0D'], // yellow
                        [0.9, '#DF5353'] // red
                    ],
                    lineWidth: 0,
                    minorTickInterval: null,
                    tickPixelInterval: 400,
                    tickWidth: 0,
                    title: {
                        y: -70
                    },
                    labels: {
                        y: 16
                    }
                },
                plotOptions: {
                    solidgauge: {
                        dataLabels: {
                            y: 5,
                            borderWidth: 0,
                            useHTML: true
                        }
                    }
                }
            };
            // The speed gauge
            $('#sparkline_bar1').highcharts(Highcharts.merge(gaugeOptions, {
                yAxis: {
                    min: 0,
                    max: 100,
                    title: {
                        text: ''
                    }
                },
                credits: {
                    enabled: false
                },
                series: [{
                    name: 'Speed',
                    data: [80],
                    dataLabels: {
                        format: '<div style="text-align:center"><span style="font-size:25px;color:' +
                        ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '">{y}</span><br/>' +
                        '<span style="font-size:12px;color:silver">%</span></div>'
                    },
                    tooltip: {
                        valueSuffix: '%'
                    }
                }]
            }));
            setInterval(function () {
                // Speed
                try{
                    var chart = $('#sparkline_bar1').highcharts(),
                        point,
                        newVal,
                        inc;
                    if (chart) {
                        point = chart.series[0].points[0];
                        //inc = Math.round((Math.random() - 0.5) * 100);
                        //newVal = point.y + inc;
                        //if (newVal < 0 || newVal > 200) {
                        //    newVal = point.y - inc;
                        //}
                        newVal = system[system.length - 1]['store_system']
                        point.update(newVal);
                    }
                }
                catch(e){
                    console.log(e);
                }
            }, 2000);
        });
    };

    CentralStoreViewPage.prototype.waterbubble = function(system, temp, cap) {
      var gauge1, gauge2, gauge3, opts1, opts2, opts3, target1, target2, target3;
      opts1 = {
        lines: 12,
        angle: 0,
        lineWidth: 0.35,
        pointer: {
          length: 0.76,
          strokeWidth: 0.034,
          color: '#000000'
        },
        limitMax: 'false',
        colorStart: 'rgb(87, 199, 212)',
        colorStop: 'rgb(87, 199, 212)',
        strokeColor: '#E0E0E0',
        generateGradient: true
      };
      opts2 = {
        lines: 12,
        angle: 0,
        lineWidth: 0.35,
        pointer: {
          length: 0.76,
          strokeWidth: 0.034,
          color: '#000000'
        },
        limitMax: 'false',
        colorStart: 'rgb(98, 168, 234)',
        colorStop: 'rgb(98, 168, 234)',
        strokeColor: '#E0E0E0',
        generateGradient: true
      };
      opts3 = {
        lines: 12,
        angle: 0,
        lineWidth: 0.35,
        pointer: {
          length: 0.76,
          strokeWidth: 0.034,
          color: '#000000'
        },
        limitMax: 'false',
        colorStart: 'rgb(146, 109, 222)',
        colorStop: 'rgb(146, 109, 222)',
        strokeColor: '#E0E0E0',
        generateGradient: true
      };
      target1 = document.getElementById('sparkline_bar1');
      target2 = document.getElementById('sparkline_bar2');
      target3 = document.getElementById('sparkline_bar3');
      gauge1 = new Gauge(target1).setOptions(opts1);
      gauge2 = new Gauge(target2).setOptions(opts2);
      gauge3 = new Gauge(target3).setOptions(opts3);
      gauge1.maxValue = 100;
      gauge1.animationSpeed = 65;
      gauge1.set(system);
      gauge1.setTextField(document.getElementById("gauge-text1"));
      gauge2.setTextField(document.getElementById("gauge-text2"));
      gauge3.setTextField(document.getElementById("gauge-text3"));
      gauge2.maxValue = 100;
      gauge2.animationSpeed = 65;
      gauge2.set(temp);
      gauge3.maxValue = 100;
      gauge3.animationSpeed = 65;
      return gauge3.set(cap);
    };

    CentralStoreViewPage.prototype.refresh_store_num = function() {
      if (this.sd.stores.items !== null) {
        this.vm.raid_number = parseInt(this.sd.stores.items.NumOfRaids);
        this.vm.volume_number = parseInt(this.sd.stores.items.NumOfVols);
        return this.vm.disk_number = parseInt(this.sd.stores.items.NumOfDisks);
      } else {
        this.vm.raid_number = 0;
        this.vm.volume_number = 0;
        return this.vm.disk_number = 0;
      }
    };

    CentralStoreViewPage.prototype.get_cap = function(latest) {
      var datas_total, e, i, _i, _len, _ref;
      datas_total = [];
      try {
        _ref = latest.storages;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.info[0].df.length = 2) {
            datas_total.push({
              name: i.ip,
              y: i.info[0].df[1].total
            });
          }
        }
      } catch (_error) {
        e = _error;
        console.log(e);
      }

      /*for i in @sd.stores.items.Disk
          if i.MachineId not in machine_total
              machine_total.push i.MachineId
              
      for i in @sd.stores.items.Disk
          data_total[i.MachineId] = 0
         
      for i in @sd.stores.items.Disk
          data_total[i.MachineId] = data_total[i.MachineId] + i.CapSector/2/1024/1024
          
      for i in machine_total
          datas_total.push {name:i,y:data_total[i]}
          
      for i in datas_total
          for j in @sd.centers.items
              if i['name'] is j.Uuid
                  i['name'] = j.Ip
       */
      return datas_total;
    };

    CentralStoreViewPage.prototype.column_chart = function(items) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#column_chart').highcharts({
                    chart: {
                      type: 'column',
                      options3d: {
                        enabled: true,
                        alpha: 10,
                        beta: 20,
                        depth: 170
                      },
                      events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                datas_total = [];
                                try{
                                    for (var i=0;i< items[items.length - 1].storages.length;i++){
                                        if( items[items.length - 1].storages[i].info[0].df.length == 2){
                                            datas_total.push({name: items[items.length - 1].storages[i].ip,y: items[items.length - 1].storages[i].info[0].df[1].total});
                                        }
                                    };
                                    if (datas_total.length == 0){
                                        datas_total = [{name:"随机数据",y:100},{name:"随机数据",y:200},{name:"随机数据",y:300},{name:"随机数据",y:200},{name:"随机数据",y:100},{name:"随机数据",y:50}]
                                    }
                                    series1.setData(datas_total);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                      }
                    },
                    title: {
                      text: ''
                    },
                    subtitle: {
                      text: ''
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    xAxis: {
                      crosshair: true,
                      tickWidth: 0,
                      labels: {
                        enabled: false
                      }
                    },
                    yAxis: {
                      min: 0,
                      title: {
                        text: 'GB'
                      }
                    },
                    tooltip: {
                      headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                      pointFormat: '<tr><td style="color:{series.color};padding:0"></td>' + '<td style="padding:0"><b>{point.y:.1f}GB </b></td></tr>',
                      footerFormat: '</table>',
                      shared: true,
                      useHTML: true,
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      column: {
                        animation: false,
                        pointPadding: 0.2,
                        borderWidth: 0,
                        color: 'rgba(60, 192, 150,0.2)',
                        borderColor: 'rgb(60, 192, 150)',
                        borderWidth: 1,
                        pointPadding: 0,
                        events: {
                          legendItemClick: function() {
                            return false;
                          },
                          click: function(event) {}
                        }
                      }
                    },
                    series: [
                      {
                        name: '总容量',
                        data: [{name:"随机数据",y:100},{name:"随机数据",y:200},{name:"随机数据",y:300},{name:"随机数据",y:200},{name:"随机数据",y:100},{name:"随机数据",y:50}]
                      }
                    ]
                });
            });
        });
    };

    CentralStoreViewPage.prototype.pie_system = function(items) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#sparkline_bar1').highcharts({
                    chart: {
                      type: 'pie',
                      margin: [0, 0, 25, 0],
                      events: {
                            load: function () {
                                var series1 = this.series[0];
                                setInterval(function () {
                                    try{
                                        var type = "store_system"
                                        var y = items[items.length - 1][type];
                                        series1.setData([['已用',y], ['剩余',100 - y]]);
                                    }
                                    catch(e){
                                        console.log(e);
                                    }
                                }, 3000);
                            }
                        }
                    },
                    title: {
                      text: '系统空间',
                      verticalAlign: "bottom",
                      style: {
                        color: '#000',
                        fontFamily: 'Microsoft YaHei',
                        fontSize: 16
                      }
                    },
                    subtitle: {
                      text: ''
                    },
                    xAxis: {
                      type: 'category',
                      gridLineColor: '#FFF',
                      tickColor: '#FFF',
                      labels: {
                        enabled: false,
                        rotation: -45,
                        style: {
                          fontSize: '13px',
                          fontFamily: 'opensans-serif'
                        }
                      }
                    },
                    yAxis: {
                      gridLineColor: '#FFF',
                      min: 0,
                      max: 100,
                      title: {
                        text: ''
                      },
                      labels: {
                        enabled: true
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    tooltip: {
                      pointFormat: '<b>{point.y:.1f}%</b>',
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      pie: {
                        animation: false,
                        shadow: false,
                        borderColor: "rgba(0,0,0,0)",
                        dataLabels: {
                          enabled: false
                        }
                      }
                    },
                    colors: ["rgb(87, 199, 212)", "rgba(87, 199, 212,0.2)"],
                    series: [{
                        name: '系统空间',
                        data: [
                            ['已用',   0],
                            ['剩余',   100]
                        ]
                    }]
                });
            });
        });
    };

    CentralStoreViewPage.prototype.pie_temp = function(items) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#sparkline_bar2').highcharts({
                    chart: {
                      type: 'pie',
                      margin: [0, 0, 25, 0],
                      events: {
                            load: function () {
                                var series1 = this.series[0];
                                setInterval(function () {
                                    try{
                                        var type = "temp"
                                        var y = items[items.length - 1][type];
                                        series1.setData([['已用',y], ['剩余',100 - y]]);
                                    }
                                    catch(e){
                                        console.log(e);
                                    }
                                }, 3000);
                            }
                        }
                    },
                    title: {
                      text: '温度',
                      verticalAlign: "bottom",
                      style: {
                        color: '#000',
                        fontFamily: 'Microsoft YaHei',
                        fontSize: 16
                      }
                    },
                    subtitle: {
                      text: ''
                    },
                    xAxis: {
                      type: 'category',
                      gridLineColor: '#FFF',
                      tickColor: '#FFF',
                      labels: {
                        enabled: false,
                        rotation: -45,
                        style: {
                          fontSize: '13px',
                          fontFamily: 'opensans-serif'
                        }
                      }
                    },
                    yAxis: {
                      gridLineColor: '#FFF',
                      min: 0,
                      max: 100,
                      title: {
                        text: ''
                      },
                      labels: {
                        enabled: true
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    tooltip: {
                      pointFormat: '<b>{point.y:.1f}%</b>',
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      pie: {
                        animation: false,
                        shadow: false,
                        borderColor: "rgba(0,0,0,0)",
                        dataLabels: {
                          enabled: false
                        }
                      }
                    },
                    colors: ["rgb(98, 168, 234)", "rgba(98, 168, 234,0.2)"],
                    series: [{
                        name: '温度',
                        data: [
                            ['已用',   0],
                            ['剩余',   100]
                        ]
                    }]
                });
            });
        });
    };

    CentralStoreViewPage.prototype.pie_cap = function(items) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#sparkline_bar3').highcharts({
                    chart: {
                      type: 'pie',
                      margin: [0, 0, 25, 0],
                      events: {
                            load: function () {
                                var series1 = this.series[0];
                                setInterval(function () {
                                    try{
                                        var type = "store_cap"
                                        var y = items[items.length - 1][type];
                                        series1.setData([['已用',y], ['剩余',100 - y]]);
                                    }
                                    catch(e){
                                        console.log(e);
                                    }
                                }, 3000);
                            }
                        }
                    },
                    title: {
                      text: '存储空间',
                      verticalAlign: "bottom",
                      style: {
                        color: '#000',
                        fontFamily: 'Microsoft YaHei',
                        fontSize: 16
                      }
                    },
                    subtitle: {
                      text: ''
                    },
                    xAxis: {
                      type: 'category',
                      gridLineColor: '#FFF',
                      tickColor: '#FFF',
                      labels: {
                        enabled: false,
                        rotation: -45,
                        style: {
                          fontSize: '13px',
                          fontFamily: 'opensans-serif'
                        }
                      }
                    },
                    yAxis: {
                      gridLineColor: '#FFF',
                      min: 0,
                      max: 100,
                      title: {
                        text: ''
                      },
                      labels: {
                        enabled: true
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    tooltip: {
                      pointFormat: '<b>{point.y:.1f}%</b>',
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      pie: {
                        animation: false,
                        shadow: false,
                        borderColor: "rgba(0,0,0,0)",
                        dataLabels: {
                          enabled: false
                        }
                      }
                    },
                    colors: ["rgb(146, 109, 222)", "rgba(146, 109, 222,0.2)"],
                    series: [{
                        name: '存储空间',
                        data: [
                            ['已用',   0],
                            ['剩余',   100]
                        ]
                    }]
                });
            });
        });
    };

    CentralStoreViewPage.prototype.refresh_num = function() {
      this.vm.machine_num = this._machine();
      this.vm.warning_num = this._warning();
      return this.vm.process_num = this._process();
    };

    CentralStoreViewPage.prototype._cap = function() {
      var cap, e;
      cap = 0;
      try {
        cap = this.sd.stats.items[this.sd.stats.items.length - 1].store_cap_total / 1024;
      } catch (_error) {
        e = _error;
        console.log(e);
      }
      return cap.toFixed(2);
    };

    CentralStoreViewPage.prototype._machine = function() {
      var i, option, _i, _len, _ref;
      option = [];
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.devtype === "storage") {
          option.push(i.cid);
        }
      }
      return option.length;
    };

    CentralStoreViewPage.prototype._warning = function() {
      var arrays, i, _i, _len, _ref;
      arrays = [];
      _ref = this.sd.journals.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === "warning" || i.level === "critical") {
          if (!i.status) {
            arrays.push(i);
          }
        }
      }
      return arrays.length;
    };

    CentralStoreViewPage.prototype._process = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: ""
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "storage") {
            tmp.push(i);
          }
        }
        return tmp.length;
      }
    };

    CentralStoreViewPage.prototype.update_circle = function() {
      var e, opt1, opt2, opt3, _base, _base1, _base2;
      opt1 = {
        animate: 1000,
        size: 115,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(255, 184, 72)",
        trackColor: 'rgba(255, 184, 72,0.1)',
        scaleColor: false
      };
      opt2 = {
        animate: 1000,
        size: 115,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(40, 183, 121)",
        trackColor: 'rgba(40, 183, 121,0.1)',
        scaleColor: false
      };
      opt3 = {
        animate: 1000,
        size: 115,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(52, 152, 219)",
        trackColor: 'rgba(52, 152, 219,0.1)',
        scaleColor: false
      };
      try {
        $("#cpu-load").easyPieChart(opt1);
        if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
          _base.update(this.vm.cpu_load);
        }
        $("#cache-load").easyPieChart(opt2);
        if (typeof (_base1 = $("#cache-load").data("easyPieChart")).update === "function") {
          _base1.update(this.vm.cache_load);
        }
        $("#mem-load").easyPieChart(opt3);
        return typeof (_base2 = $("#mem-load").data("easyPieChart")).update === "function" ? _base2.update(this.vm.mem_load) : void 0;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreViewPage.prototype.change_status = function(type) {
      return this.vm.status_server = type;
    };

    CentralStoreViewPage.prototype.clear_log = function() {
      if (this.vm.journal.length === 0) {
        (new MessageModal(this.vm.lang.clear_log_error)).attach();
        return;
      }
      return (new ConfirmModal(this.vm.lang.clear_log_tips, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain();
          chain.chain(function() {
            return (new JournalRest(_this.sd.host)).delete_log();
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            _this.attach();
            return (new MessageModal(_this.vm.lang.clear_log_success)).attach();
          });
        };
      })(this))).attach();
    };

    CentralStoreViewPage.prototype.detail_break = function() {
      var detail, ip;
      return;
      ip = '192.168.2.103';
      this.frozen();
      detail = (new JournalRest(this.sd.host)).disk_info(ip);
      detail.done((function(_this) {
        return function(data) {
          return (new CentralStoreBreakModal(_this.sd, _this, data.detail)).attach();
        };
      })(this));
    };

    CentralStoreViewPage.prototype.detail_disk = function() {
      var detail, ip;
      return;
      ip = '192.168.2.103';
      this.frozen();
      detail = (new JournalRest(this.sd.host)).disk_info(ip);
      detail.done((function(_this) {
        return function(data) {
          var error;
          console.log(data);
          try {
            return (new CentralStoreDiskModal(_this.sd, _this, data.detail.D)).attach();
          } catch (_error) {
            error = _error;
            return console.log(error);
          }
        };
      })(this));
    };

    CentralStoreViewPage.prototype.detail_raid = function() {
      var detail, ip;
      return;
      ip = '192.168.2.103';
      this.frozen();
      detail = (new JournalRest(this.sd.host)).disk_info(ip);
      detail.done((function(_this) {
        return function(data) {
          var error;
          console.log(data);
          try {
            return (new CentralStoreRaidModal(_this.sd, _this, data.detail.R)).attach();
          } catch (_error) {
            error = _error;
            return console.log(error);
          }
        };
      })(this));
    };

    CentralStoreViewPage.prototype.detail_volume = function() {
      var detail, ip;
      return;
      ip = '192.168.2.103';
      this.frozen();
      detail = (new JournalRest(this.sd.host)).disk_info(ip);
      detail.done((function(_this) {
        return function(data) {
          return (new CentralStoreVolumeModal(_this.sd, _this, data.detail.V)).attach();
        };
      })(this));
    };

    CentralStoreViewPage.prototype.detail_cpu = function() {
      return (new CentralServerCpuModal(this.sd, this)).attach();
    };

    CentralStoreViewPage.prototype.detail_cache = function() {
      return;
      return (new CentralServerCacheModal(this.sd, this)).attach();
    };

    CentralStoreViewPage.prototype.detail_mem = function() {
      return (new CentralServerMemModal(this.sd, this)).attach();
    };

    CentralStoreViewPage.prototype.add_time_to_journal = function(items) {
      var change_time, item, journals, _i, _len;
      journals = [];
      change_time = function funConvertUTCToNormalDateTime(utc)
        {
            var date = new Date(utc);
            var ndt;
            ndt = date.getFullYear()+"/"+(date.getMonth()+1)+"/"+date.getDate()+"-"+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
            return ndt;
        };
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        item.date = change_time(item.created_at * 1000);
        journals.push(item);
      }
      return journals;
    };

    CentralStoreViewPage.prototype.flot_cap = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('sparkline_bar3', {
                chart: {
                    type: 'area',
                    //animation:false,
                    //margin:[0,0,0,0],
                    backgroundColor: 'rgba(0,0,0,0)',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                try{
                                    var type1 = 'store_cap';
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = Math.random()
                                    series1.addPoint([x, y1+y2], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    lineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    //labels:{
                    //    enabled:false
                    //},
                    gridLineWidth:0,
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                //colors:["#62a8ea","#a58add"],
                plotOptions: {
                    area: {
                        lineColor: "rgb(87, 199, 212)",
                        lineWidth:1,
                        fillColor: "rgba(87, 199, 212,0.1)",
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(165, 138, 221,0.6)"
                        },
                        fillOpacity:0.3
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
        });
    };

    CentralStoreViewPage.prototype.flot_system = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('sparkline_bar1', {
                chart: {
                    type: 'area',
                    //animation:false,
                    //margin:[0,0,0,0],
                    backgroundColor: 'rgba(0,0,0,0)',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                try{
                                    var type1 = 'store_system';
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = Math.random()
                                    series1.addPoint([x, y1+y2], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    lineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    //labels:{
                    //    enabled:false
                    //},
                    gridLineWidth:0,
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                //colors:["#62a8ea","#a58add"],
                plotOptions: {
                    area: {
                        lineColor: "rgb(98, 168, 234)",
                        lineWidth:1,
                        fillColor: "rgba(98, 168, 234,0.1)",
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(165, 138, 221,0.6)"
                        },
                        fillOpacity:0.3
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
        });
    };

    CentralStoreViewPage.prototype.flot_temp = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('sparkline_bar2', {
                chart: {
                    type: 'area',
                    //animation:false,
                    //margin:[0,0,0,0],
                    backgroundColor: 'rgba(0,0,0,0)',
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    //plotBorderColor:"rgb(235, 235, 235)",
                    //plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            setInterval(function () {
                                try{
                                    var type1 = 'temp';
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = Math.random();
                                    series1.addPoint([x, y1+y2], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    lineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    labels:{
                        enabled:false
                    },
                    gridLineColor: "#FFF",
                    min:-1,
                    //max:150,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 0,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                //colors:["#62a8ea","#a58add"],
                plotOptions: {
                    area: {
                        lineColor: "rgb(146, 109, 222)",
                        lineWidth:1,
                        fillColor: "rgba(146, 109, 222,0.1)",
                        fillOpacity:0.3,
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 1,
                            lineWidth:1,
                            lineColor:"#fff",
                            fillColor:"rgba(255,120,120)"
                        }
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
        });
    };

    CentralStoreViewPage.prototype.plot_flow_in = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_in', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function (event) {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                //var maxs =  event.target.yAxis[0].max * 2;
                                //chart.yAxis[0].setExtremes(maxs);
                                try{
                                    var type1 = 'store_net_write';
                                    var type2 = 'store_net_read';
                                    var random = Math.random();
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = yaxis[yaxis.length - 1][type2];
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    //gridLineColor: "#FFF",
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                //colors:["rgba(227,91,90,0.4)","rgba(227,91,243,0.1)"],
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        fillOpacity: 0.2,
                        fillColor:"rgba(227,91,90,0.4)",
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 4,
                            lineWidth:2,
                            lineColor:"#fff",
                            fillColor:"rgba(255,120,120,0.7)",
                            states: {
                                hover: {
                                    enabled: true,
                                    fillColor:"rgb(227,91,90)"
                                }
                            }
                        },
                        lineWidth: 2,
                        lineColor:"rgba(227,91,90,0.5)"
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#net_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#net_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    CentralStoreViewPage.prototype.plot_flow_out = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_out', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'store_vol_write';
                                    var type2 = 'store_vol_read';
                                    var random = Math.random();
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = yaxis[yaxis.length - 1][type2];
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    //gridLineColor: "#FFF",
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        animation:false,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        fillOpacity: 0.2,
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 4.5,
                            fillColor:"rgb(143, 208, 253)",
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        lineWidth: 2
                    }
                },
                colors:["rgb(115, 172, 240)","rgb(115, 172, 240)"],
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#vol_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#vol_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    CentralStoreViewPage.prototype.refresh_pie = function(per, total, remain) {

      /*cap = 0
      used_cap = 0
      
      chain = new Chain
      chain.chain @sd.update("stores")
      console.log @sd.stores.items
      for i in @sd.stores.items.Disk
          cap = cap + i.CapSector
          
      for i in @sd.stores.items.Raid
          if i.Health is 'normal' 
              used_cap = used_cap + i.Used
      
      cap = cap/2/1024/1024
      per = used_cap/cap*100
      
      if @sd.stores.items.Disk.length isnt 0
          @plot_pie per, cap.toFixed(0), used_cap.toFixed(0), @sd, this
      else
          @plot_pie 0, 0, 0, @sd, this
       */
      return this.plot_pie(per, total, remain);
    };

    CentralStoreViewPage.prototype.plot_pie = function(per, total, remain) {
      var used;
      if (remain === null) {
        remain = 0;
      }
      used = total - remain;
      Highcharts.setOptions({
        lang: {
          contextButtonTitle: "图表导出菜单",
          decimalPoint: ".",
          downloadJPEG: "下载JPEG图片",
          downloadPDF: "下载PDF文件",
          downloadPNG: "下载PNG文件",
          downloadSVG: "下载SVG文件",
          printChart: "打印图表"
        }
      });
      return $('#pie_chart').highcharts({
        chart: {
          type: 'pie',
          options3d: {
            enabled: true,
            alpha: 45,
            beta: 0
          }
        },
        title: {
          text: ''
        },
        tooltip: {
          pointFormat: '<b>{point.percentage:.1f}%</b>',
          style: {
            color: '#fff',
            fontSize: '15px',
            opacity: 0.8
          },
          borderColor: '#000',
          backgroundColor: '#000',
          borderRadius: 0
        },
        credits: {
          enabled: false
        },
        exporting: {
          enabled: false
        },
        plotOptions: {
          pie: {
            states: {
              hover: {
                brightness: 0.08
              }
            },
            allowPointSelect: true,
            animation: false,
            cursor: 'pointer',
            depth: 25,
            slicedOffset: 15,
            showInLegend: true,
            dataLabels: {
              enabled: false,
              format: '{point.percentage:.1f} %',
              style: {
                fontSize: '14px'
              }
            },
            point: {
              events: {
                legendItemClick: function() {
                  return false;
                },
                click: function(event) {
                  return;
                  if (cap) {
                    return (new CentralPieModal(sd, page, this.name, cap, used_cap)).attach();
                  }
                }
              }
            }
          }
        },
        legend: {
          enabled: true,
          backgroundColor: '#FFFFFF',
          floating: true,
          align: 'right',
          layout: 'vertical',
          verticalAlign: 'top',
          itemStyle: {
            color: 'rgb(110,110,110)',
            fontWeight: '100',
            fontFamily: "Microsoft YaHei"
          },
          labelFormatter: function() {
            if (this.name === '已用容量') {
              return this.name + ':' + used + 'GB';
            } else {
              return this.name + ':' + remain + 'GB';
            }
          }
        },
        colors: ['rgb(130, 192, 150)', 'rgba(60, 192, 150,0.3)'],
        series: [
          {
            type: 'pie',
            name: '',
            data: [['已用容量', per], ['剩余容量', 100 - per]]
          }
        ]
      });
    };

    return CentralStoreViewPage;

  })(Page);

  CentralMonitorPage = (function(_super) {
    __extends(CentralMonitorPage, _super);

    function CentralMonitorPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.test_1 = __bind(this.test_1, this);
      this._compare = __bind(this._compare, this);
      this.compare = __bind(this.compare, this);
      this._get_devices = __bind(this._get_devices, this);
      this.get_devices = __bind(this.get_devices, this);
      this._get_shown_machies = __bind(this._get_shown_machies, this);
      this._filter_machine = __bind(this._filter_machine, this);
      this.unmonitor = __bind(this.unmonitor, this);
      this.detail = __bind(this.detail, this);
      this.translate = __bind(this.translate, this);
      this.get_history_devices = __bind(this.get_history_devices, this);
      this._subitems_server = __bind(this._subitems_server, this);
      this._subitems_store = __bind(this._subitems_store, this);
      this.subitems_server = __bind(this.subitems_server, this);
      this.subitems_store = __bind(this.subitems_store, this);
      this._search = __bind(this._search, this);
      this.search = __bind(this.search, this);
      this.manual = __bind(this.manual, this);
      this.test = __bind(this.test, this);
      this.tab_click_server = __bind(this.tab_click_server, this);
      this.tab_click_store = __bind(this.tab_click_store, this);
      this.tree = __bind(this.tree, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralMonitorPage.__super__.constructor.call(this, "centralmonitorpage-", "html/centralmonitorpage.html");
      $(this.sd.centers).on("updated", (function(_this) {
        return function(e, source) {
          _this.vm.devices_store = _this.subitems_store();
          _this.vm.devices_server = _this.subitems_server();
          return _this.tree(_this.vm.devices_store, _this.vm.devices_server, _this, _this.sd);
        };
      })(this));
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var latest;
          if (_this.has_rendered) {
            return latest = source.items[source.items.length - 1];
          }
        };
      })(this));
      this.vm.show_tree_1 = false;
    }

    CentralMonitorPage.prototype.define_vm = function(vm) {
      vm.lang = lang.centralmonitor;
      vm.search = this.search;
      vm.detail = this.detail;
      vm.rendered = this.rendered;
      vm.unmonitor = this.unmonitor;
      vm.devices_store = this.subitems_store();
      vm.devices_server = this.subitems_server();
      vm.switch_to_page = this.switch_to_page;
      vm.test = this.test;
      vm.manual = this.manual;
      vm.fattr_machine_status = fattr.machine_status;
      vm.server_navs = "192.168.2.149";
      vm.tab_click_store = this.tab_click_store;
      vm.tab_click_server = this.tab_click_server;
      return vm.show_tree_1 = false;
    };

    CentralMonitorPage.prototype.rendered = function() {
      CentralMonitorPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      $("form.machines").validate(valid_opt({
        rules: {
          'machine-checkbox': {
            required: true,
            minlength: 1
          }
        },
        messages: {
          'machine-checkbox': "请选择至少一个虚拟磁盘"
        }
      }));
      this.vm.devices_store = this.subitems_store();
      this.vm.devices_server = this.subitems_server();
      return this.tree(this.vm.devices_store, this.vm.devices_server, this, this.sd);
    };

    CentralMonitorPage.prototype.tree = function(store, server, page, sd) {
      console.log(store);
      console.log(server);
      return $(function () {
            var _ref;
            tree_store = [];
            for (var i=0;i< store.length;i++){
                _ref = store[i];
                var chinese_health;
                if (_ref.health){
                   chinese_health = "在线"
                }
                else{
                   chinese_health = "掉线"
                }
                if (_ref.name == "(请添加)"){
                   _ref.devtype = "storage"
                }
                tree_store.push({"name": _ref.name,
                                 "parent": server[0].name,
                                 "health":_ref.health,
                                 "chinese_health":chinese_health,
                                 "devtype":_ref.devtype,
                                 "slotnr": _ref.slotnr,
                                 "uuid":_ref.uuid});
            };
            var chinese_health_server;
            if (server[0].health){
                chinese_health_server = "在线"
            }
            else{
                chinese_health_server = "掉线"
            }
            if (server[0].name == "(请添加)"){
                server[0].devtype = "export"
            }
            var treeData = [
              {
                "name": server[0].name,
                "health":server[0].health,
                "chinese_health":chinese_health_server,
                "devtype":server[0].devtype,
                "slotnr": server[0].slotnr,
                "uuid":server[0].uuid,
                "parent": "null",
                "children": tree_store
              }
            ];
            
            // ************** Generate the tree diagram  *****************
            var margin = {top: 20, right: 120, bottom: 20, left: 120},
                width = 960 - margin.right - margin.left,
                height = 500 - margin.top - margin.bottom;
            
            var i = 0,
                duration = 750,
                root;
            
            var tree = d3.layout.tree()
                .size([height, width]);
            
            var diagonal = d3.svg.diagonal()
                .projection(function(d) { return [d.y, d.x]; });
            
            var svg = d3.select("#body").append("svg")
                .attr("width", width + margin.right + margin.left)
                .attr("height", height + margin.top + margin.bottom)
              .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            
            root = treeData[0];
            root.x0 = height / 2;
            root.y0 = 0;
            
            update(root);
            
            // d3.select(self.frameElement).style("height", "500px");
            
            function update(source) {
            
              // Compute the new tree layout.
              var nodes = tree.nodes(root).reverse(),
                  links = tree.links(nodes);
            
              // Normalize for fixed-depth.线条长度
              nodes.forEach(function(d) { d.y = d.depth * 280; });
            
              // Update the nodes…
              var node = svg.selectAll("g.node")
                  .data(nodes, function(d) { return d.id || (d.id = ++i); });
                  
              //tooltip
              var tooltip = d3.select("body")
                  .append("div")
                  .attr("class","tooltip_tree")
                  .style("opacity",0.0);
                  
              /*var remove = d3.select("#body")
                  .html('地址:')
                  .append("div")
                  .attr("class","tooltip_tree")
                  .style("opacity",1.0)
                  .style("left", 1000 + "px")
                  .style("top", 1000 + "px");*/
                  
              // Enter any new nodes at the parent's previous position.
              var nodeEnter = node.enter().append("g")
                  .attr("class", "node")
                  .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                  .on("click", click)
                  .on("mouseover",function(d){
                        if (d.name == "(请添加)"){
                            tooltip.html(d.name)
                                .style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY + 20) + "px")
                                .style("opacity",1.0);
                        }
                        else{
                            tooltip.html('地址:' + d.name + '</br>' + '状态:' + d.chinese_health)
                                .style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY + 20) + "px")
                                .style("opacity",1.0);
                        }
                  })
                  .on("mousemove",function(d){
                        tooltip.style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY + 20) + "px");
                  })
                  .on("mouseout",function(d){
                        tooltip.style("opacity",0.0);
                  });
                    
              nodeEnter.append("circle")
                  .attr("r", 1e-6)
                  .style("fill", function(d) { 
                        if( d.health){
                            return d._children ? "lightsteelblue" : "#3cc051"; 
                        }
                        else{
                            return d._children ? "lightsteelblue" : "rgb(214, 70, 53)"; 
                        }
                });
                
              nodeEnter.append("image")
                    .attr("x", function(d) { return d.children || d._children ? -66 : 23; })
                    .attr("y", "-30px") 
                    .attr("width",50)  
                    .attr("height",50)  
                    .style("cursor", "pointer")
                    .attr("xlink:href",function(d) {
                        if(d.devtype == "storage"){
                            return "images/d3/networking.png"
                        }else{
                            return "images/d3/computer-1.png"
                        }
                    })
                    .on("click", function(d) {
                        tooltip.html(d.name)
                            .style("opacity",0.0);
                        if (d.name == "(请添加)"){
                            return click(d);
                        }
                        if (d.devtype == "export"){
                            return (new CentralServerDetailPage(sd,page,d, page.switch_to_page,d.uuid)).attach();
                        }
                        else{
                            page.frozen();
                            chain = new Chain();
                            chain.chain((function() {
                              return function() {
                                return (new MachineRest(sd.host)).refresh_detail(d.uuid);
                              };
                            })(page));
                            chain.chain(sd.update("all"));
                            return show_chain_progress(chain).done((function() {
                              return function() {
                                page.attach();
                                return page.detail(d);
                              };
                            })(page));
                        }
                  });
                    
              nodeEnter.append("text")
                  .attr("x", function(d) { 
                           if(d.name == "(请添加)"){
                             return d.children || d._children ? -22 : 25; 
                           }else{
                             return d.children || d._children ? -10 : 83; 
                           }
                        })
                  .attr("y", function(d) { 
                           if(d.name == "(请添加)"){
                             return d.children || d._children ? 38 : 38; 
                           }else{
                             return d.children || d._children ? 38 : 0; 
                           } 
                   })
                  .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
                  //.text(function(d) {})
                  .text(function(d) { return d.name; })
                  .style("fill-opacity", 1e-6)
                  .on("click", function(d) {
                        tooltip.html(d.name)
                            .style("opacity",0.0);
                        if (d.name == "(请添加)"){
                            return click(d);
                        }
                        if (d.devtype == "export"){
                            return (new CentralServerDetailPage(sd,page,d, page.switch_to_page,d.uuid)).attach();
                        }
                        else{
                            page.frozen();
                            chain = new Chain();
                            chain.chain((function() {
                              return function() {
                                return (new MachineRest(sd.host)).refresh_detail(d.uuid);
                              };
                            })(page));
                            chain.chain(sd.update("all"));
                            return show_chain_progress(chain).done((function() {
                              return function() {
                                page.attach();
                                return page.detail(d);
                              };
                            })(page));
                        }
                  });
                  
              /*
              //add icon
              nodeEnter.append("svg:foreignObject")
                  .attr("width", 50)
                  .attr("height", 50)
                  .attr("y", "-16px")
                  .attr("x", function(d) { return d.children || d._children ? -66 : 23; })
                .append("xhtml:span")
                    .attr("class", function(d){
                        if(d.devtype == "storage"){
                            return "icon_storage icon-laptop";
                        }
                        else{
                            return "icon_export icon-desktop";
                        }
                    });*/
               /*
               //add status span
               nodeEnter.append("svg:foreignObject")
                  .attr("width", 50)
                  .attr("height", 50)
                  .attr("y", "-16px")
                  .attr("x", function(d) { return d.children || d._children ? -126 : 63; })
                .append("xhtml:span")
                    .attr("class", function(d){
                        if(d.health){
                            return "span_success";
                        }
                        else{
                            return "span_warning";
                        }})
                    .text(function(d) {
                        if (d.health){
                            return "在线";
                        }
                        else{
                            return "掉线";
                    }});*/
                    
              // Transition nodes to their new position.
              var nodeUpdate = node.transition()
                  .duration(duration)
                  .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
            
              nodeUpdate.select("circle")
                  .attr("r", 5)
                  .style("fill", function(d) { 
                        if( d.health){
                            return d._children ? "lightsteelblue" : "#3cc051"; 
                        }
                        else{
                            return d._children ? "lightsteelblue" : "rgb(214, 70, 53)"; 
                        }
                });
            
              nodeUpdate.select("text")
                  .style("fill-opacity", 1);
            
              // Transition exiting nodes to the parent's new position.
              var nodeExit = node.exit().transition()
                  .duration(duration)
                  .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                  .remove();
            
              nodeExit.select("circle")
                  .attr("r", 1e-6);
            
              nodeExit.select("text")
                  .style("fill-opacity", 1e-6);
            
              // Update the links…
              var link = svg.selectAll("path.link")
                  .data(links, function(d) { return d.target.id; });
            
              // Enter any new links at the parent's previous position.
              link.enter().insert("path", "g")
                  .attr("class", "link")
                  .attr("d", function(d) {
                    var o = {x: source.x0, y: source.y0};
                    return diagonal({source: o, target: o});
                  });
            
              // Transition links to their new position.
              link.transition()
                  .duration(duration)
                  .attr("d", diagonal);
            
              // Transition exiting nodes to the parent's new position.
              link.exit().transition()
                  .duration(duration)
                  .attr("d", function(d) {
                    var o = {x: source.x, y: source.y};
                    return diagonal({source: o, target: o});
                  })
                  .remove();
            
              // Stash the old positions for transition.
              nodes.forEach(function(d) {
                d.x0 = d.x;
                d.y0 = d.y;
              });
            }
            
            // Toggle children on click.
            function click(d) {
              if (d.children) {
                d._children = d.children;
                d.children = null;
              } else {
                d.children = d._children;
                d._children = null;
              }
              update(d);
            }
        });
    };

    CentralMonitorPage.prototype.tab_click_store = function(e) {
      var chain, device;
      device = e.currentTarget.$vmodel.e.$model;
      if (device.name === "(请添加)" || !device.health) {
        return;
      }
      if (e.target.className !== "icon-close") {
        this.frozen();
        chain = new Chain();
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).refresh_detail(device.uuid);
          };
        })(this));
        chain.chain(this.sd.update("all"));
        return show_chain_progress(chain).done((function(_this) {
          return function() {
            _this.attach();
            return _this.detail(device);
          };
        })(this));
      } else {
        return this.unmonitor(device);
      }
    };

    CentralMonitorPage.prototype.tab_click_server = function(e) {
      var device;
      device = e.currentTarget.$vmodel.t.$model;
      if (e.target.className !== "icon-close") {
        return this.detail(device);
      } else {
        return this.unmonitor(device);
      }
    };

    CentralMonitorPage.prototype.test = function() {
      var chain, tlist;
      chain = new Chain();
      tlist = new MachineRest(this.sd.host);
      return (tlist.query()).done((function(_this) {
        return function(data) {
          return console.log(data);
        };
      })(this));
    };

    CentralMonitorPage.prototype.manual = function() {
      return (new CentralManualModal(this.sd, this)).attach();
    };

    CentralMonitorPage.prototype.search = function() {
      var bcst, chain, outline;
      outline = [];
      chain = new Chain();
      bcst = new BCST;
      chain.chain(bcst.broadcast);
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          var i, machines, online, _i, _len, _ref;
          machines = bcst.getMachines().reverse();
          _this._search(machines).sort(_this._compare('num'));
          if (machines) {
            if (_this.sd.centers.items !== null) {
              online = [
                (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.sd.centers.items;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    i = _ref[_i];
                    _results.push(i.Ip);
                  }
                  return _results;
                }).call(_this)
              ];
              for (_i = 0, _len = machines.length; _i < _len; _i++) {
                i = machines[_i];
                if (_ref = i.ifaces[0], __indexOf.call(online[0], _ref) < 0) {
                  outline.push(i);
                }
              }
              if (outline.length > 0) {
                console.log(_this);
                return (new CentralSearchModal(_this.sd, _this, outline, "storage", function(data) {
                  return _this.frozen();
                })).attach();
              } else {
                return (new MessageModal(lang.centralview.detect_no_new_machine_info)).attach();
              }
            } else {
              console.log(machines);
              return (new CentralSearchModal(_this.sd, _this, machines, "storage", function(data) {
                return _this.frozen();
              })).attach();
            }
          } else {
            return (new MessageModal(lang.centralview.detect_no_machines_info)).attach();
          }
        };
      })(this));
    };

    CentralMonitorPage.prototype._search = function(machines) {
      var i, _i, _len;
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        i = machines[_i];
        i.num = Number(i.ifaces[0].split('.')[3]);
      }
      return machines;
    };

    CentralMonitorPage.prototype.subitems_store = function() {
      var all_devices;
      if (this._subitems_store().length) {
        all_devices = this.get_devices(this._subitems_store());
        return all_devices;
      }
      return [
        {
          name: "(请添加)",
          health: true
        }
      ];
    };

    CentralMonitorPage.prototype.subitems_server = function() {
      var all_devices;
      if (this._subitems_server().length) {
        all_devices = this.get_devices(this._subitems_server());
        return all_devices;
      }
      return [
        {
          name: "(请添加)",
          health: true
        }
      ];
    };

    CentralMonitorPage.prototype._subitems_store = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: "",
          Status: ""
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "storage") {
            tmp.push(i);
          }
        }
        return tmp;
      }
    };

    CentralMonitorPage.prototype._subitems_server = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: "",
          Status: ""
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "export") {
            tmp.push(i);
          }
        }
        return tmp;
      }
    };

    CentralMonitorPage.prototype.get_history_devices = function() {
      var tlist;
      tlist = new MachineRest(this.sd.host);
      return (tlist.query()).done((function(_this) {
        return function(data) {
          var all_devices, machines;
          if (data.detail !== null) {
            machines = _this.translate(data.detail);
            all_devices = _this.get_devices(machines);
            return _this.vm.devices = all_devices;
          }
        };
      })(this));
    };

    CentralMonitorPage.prototype.translate = function(detail) {
      var i, machines, _i, _len, _ref;
      machines = [];
      for (_i = 0, _len = detail.length; _i < _len; _i++) {
        i = detail[_i];
        if (_ref = i.Ip, __indexOf.call(machines, _ref) < 0) {
          machines.push(i.Ip);
        }
      }
      return machines;
    };

    CentralMonitorPage.prototype.detail = function(device) {
      if (device.name === '(请添加)' || !device.health) {
        return;
      }
      if (device.devtype === "storage") {
        return (new CentralStoreDetailPage(this.sd, this, device, this.switch_to_page, device.uuid)).attach();
      } else {
        return (new CentralServerDetailPage(this.sd, this, device, this.switch_to_page, device.uuid)).attach();
      }
    };

    CentralMonitorPage.prototype.unmonitor = function() {
      return (new CentralUnmonitorModal(this.sd, this)).attach();

      /*
      if device.name is '(请添加)'
          return
      (new ConfirmModal(@vm.lang.unmonitor_tips, =>
              @frozen()
              chain = new Chain()
              chain.chain(=> (new MachineRest(@sd.host)).unmonitor(device.uuid))
              chain.chain @sd.update("all")
              show_chain_progress(chain).done =>
                  @attach()
                  (new MessageModal @vm.lang.unmonitor_success).attach()
      )).attach()
       */
    };

    CentralMonitorPage.prototype._filter_machine = function(bcst) {
      var addr, isLoged, is_add, machine, machines, shown_machines, temp, temp_machines, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref;
      machines = bcst.getDetachMachines();
      shown_machines = this._get_shown_machies();
      temp_machines = [];
      isLoged = false;
      temp = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        machine = machines[_i];
        for (_j = 0, _len1 = machine.length; _j < _len1; _j++) {
          addr = machine[_j];
          if (__indexOf.call(shown_machines, addr) >= 0) {
            isLoged = true;
            break;
          }
        }
        if (!isLoged) {
          temp_machines.push(machine);
        }
        isLoged = false;
      }
      machines = [];
      for (_k = 0, _len2 = temp_machines.length; _k < _len2; _k++) {
        machine = temp_machines[_k];
        is_add = false;
        if (machines.length === 0) {
          machines.push(machine);
          continue;
        }
        for (_l = 0, _len3 = machines.length; _l < _len3; _l++) {
          temp = machines[_l];
          if (_ref = temp[0], __indexOf.call(machine, _ref) >= 0) {
            is_add = true;
            break;
          }
        }
        if (!is_add) {
          machines.push(machine);
        }
      }
      temp_machines = [];
      for (_m = 0, _len4 = machines.length; _m < _len4; _m++) {
        machine = machines[_m];
        for (_n = 0, _len5 = machine.length; _n < _len5; _n++) {
          addr = machine[_n];
          if (bcst.isContained(addr)) {
            temp_machines.push(addr);
            break;
          }
        }
      }
      return temp_machines;
    };

    CentralMonitorPage.prototype._get_shown_machies = function() {
      var machine, machines, regex, settings, _i, _len, _ref;
      machines = [];
      regex = /^\d{1,3}(\.\d{1,3}){3}$/;
      settings = new SettingsManager;
      if (settings.getSearchedMachines() && settings.getSearchedMachines().length !== 0) {
        _ref = settings.getSearchedMachines();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          machine = _ref[_i];
          if (regex.test(machine)) {
            machines.push(machine);
          }
        }
      }
      return machines;
    };

    CentralMonitorPage.prototype.get_devices = function(machines) {
      var count, i, o, on_monitor, slot, slotgroup, slotgroups, slots, _i, _len, _ref;
      slotgroups = [];
      slotgroup = [];
      slot = [];
      count = 0;
      on_monitor = [];
      _ref = machines.sort(this.compare('Ip'));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        o = this._get_devices(i.Ip);
        o.num = Number(i.Ip.split('.')[3]);
        o.uuid = i.Uuid;
        o.name = i.Ip;
        o.slotnr = i.Slotnr;
        o.created = i.Created;
        o.health = i.Status;
        o.devtype = i.Devtype;
        slot.push(o);
      }
      slots = this.compare(slot);
      return slots;
    };

    CentralMonitorPage.prototype._get_devices = function(machine) {
      var gap, regex, result, temp;
      regex = /\d{1,3}(\.\d{1,3})$/;
      temp = machine.match(regex)[0];
      if (temp.length === 4) {
        gap = '.0';
        result = temp.split('.').join(gap);
      } else if (temp.length === 3) {
        gap = '.00';
        result = temp.split('.').join(gap);
      } else {
        result = temp;
      }
      return {
        ip: result
      };
    };

    CentralMonitorPage.prototype.compare = function(machines) {
      var degraded, failed, i, normal, _i, _len;
      failed = [];
      degraded = [];
      normal = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        i = machines[_i];
        switch (i.health) {
          case true:
            normal.push(i);
            break;
          case false:
            failed.push(i);
            break;
          case 'degraded':
            degraded.push(i);
        }
      }
      failed = failed.sort(this._compare('ip'));
      degraded = degraded.sort(this._compare('ip'));
      normal = normal.sort(this._compare('num'));
      return failed.concat(degraded).concat(normal);
    };

    CentralMonitorPage.prototype._compare = function(propertyname) {
      return (function(_this) {
        return function(obj1, obj2) {
          var value1, value2;
          value1 = obj1[propertyname];
          value2 = obj2[propertyname];
          if (value1 < value2) {
            return -1;
          } else if (value1 > value2) {
            return 1;
          } else {
            return 0;
          }
        };
      })(this);
    };

    CentralMonitorPage.prototype.test_1 = function() {
      return [
        [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "1"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "2"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "3"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "4"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "5"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "6"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "7"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "8"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "9"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "10"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "11"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "12"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "13"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "14"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "15"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "16"
          }
        ]
      ];
    };

    return CentralMonitorPage;

  })(Page);

  CentralStoremonitorPage = (function(_super) {
    __extends(CentralStoremonitorPage, _super);

    function CentralStoremonitorPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.test_1 = __bind(this.test_1, this);
      this._compare = __bind(this._compare, this);
      this.compare = __bind(this.compare, this);
      this._get_devices = __bind(this._get_devices, this);
      this.get_devices = __bind(this.get_devices, this);
      this._get_shown_machies = __bind(this._get_shown_machies, this);
      this._filter_machine = __bind(this._filter_machine, this);
      this.unmonitor = __bind(this.unmonitor, this);
      this.detail = __bind(this.detail, this);
      this.translate = __bind(this.translate, this);
      this.get_history_devices = __bind(this.get_history_devices, this);
      this._subitems = __bind(this._subitems, this);
      this.subitems = __bind(this.subitems, this);
      this._search = __bind(this._search, this);
      this.search = __bind(this.search, this);
      this.manual = __bind(this.manual, this);
      this.test = __bind(this.test, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralStoremonitorPage.__super__.constructor.call(this, "centralstoremonitorpage-", "html/centralstoremonitorpage.html");
      $(this.sd.centers).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.devices = _this.subitems();
        };
      })(this));
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var latest;
          if (_this.has_rendered) {
            return latest = source.items[source.items.length - 1];
          }
        };
      })(this));
    }

    CentralStoremonitorPage.prototype.define_vm = function(vm) {
      vm.lang = lang.centralstoremonitor;
      vm.search = this.search;
      vm.detail = this.detail;
      vm.rendered = this.rendered;
      vm.unmonitor = this.unmonitor;
      vm.devices = this.subitems();
      vm.switch_to_page = this.switch_to_page;
      vm.test = this.test;
      vm.manual = this.manual;
      vm.fattr_machine_status = fattr.machine_status;
      return vm.server_navs = "192.168.2.149";
    };

    CentralStoremonitorPage.prototype.rendered = function() {
      CentralStoremonitorPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      $("form.machines").validate(valid_opt({
        rules: {
          'machine-checkbox': {
            required: true,
            minlength: 1
          }
        },
        messages: {
          'machine-checkbox': "请选择至少一个虚拟磁盘"
        }
      }));
      return this.vm.devices = this.subitems();
    };

    CentralStoremonitorPage.prototype.test = function() {
      var chain, tlist;
      chain = new Chain();
      tlist = new MachineRest(this.sd.host);
      return (tlist.query()).done((function(_this) {
        return function(data) {
          return console.log(data);
        };
      })(this));
    };

    CentralStoremonitorPage.prototype.manual = function() {
      return (new CentralManualModal(this.sd, this, "storage")).attach();
    };

    CentralStoremonitorPage.prototype.search = function() {
      var bcst, chain, outline;
      outline = [];
      chain = new Chain();
      bcst = new BCST;
      chain.chain(bcst.broadcast);
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          var i, machines, online, _i, _len, _ref;
          machines = bcst.getMachines().reverse();
          _this._search(machines).sort(_this._compare('num'));
          if (machines) {
            if (_this.sd.centers.items !== null) {
              online = [
                (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.sd.centers.items;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    i = _ref[_i];
                    _results.push(i.Ip);
                  }
                  return _results;
                }).call(_this)
              ];
              for (_i = 0, _len = machines.length; _i < _len; _i++) {
                i = machines[_i];
                if (_ref = i.ifaces[0], __indexOf.call(online[0], _ref) < 0) {
                  outline.push(i);
                }
              }
              if (outline.length > 0) {
                console.log(_this);
                return (new CentralSearchModal(_this.sd, _this, outline, "storage", function(data) {
                  return _this.frozen();
                })).attach();
              } else {
                return (new MessageModal(lang.centralview.detect_no_new_machine_info)).attach();
              }
            } else {
              console.log(machines);
              return (new CentralSearchModal(_this.sd, _this, machines, "storage", function(data) {
                return _this.frozen();
              })).attach();
            }
          } else {
            return (new MessageModal(lang.centralview.detect_no_machines_info)).attach();
          }
        };
      })(this));
    };

    CentralStoremonitorPage.prototype._search = function(machines) {
      var i, _i, _len;
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        i = machines[_i];
        i.num = Number(i.ifaces[0].split('.')[3]);
      }
      return machines;
    };

    CentralStoremonitorPage.prototype.subitems = function() {
      var all_devices;
      if (this._subitems().length) {
        all_devices = this.get_devices(this._subitems());
        return all_devices[0];
      }
      return [
        [
          {
            name: "请添加",
            health: true
          }
        ]
      ];
    };

    CentralStoremonitorPage.prototype._subitems = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: "",
          Status: ""
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "storage") {
            tmp.push(i);
          }
        }
        return tmp;
      }
    };

    CentralStoremonitorPage.prototype.get_history_devices = function() {
      var tlist;
      tlist = new MachineRest(this.sd.host);
      return (tlist.query()).done((function(_this) {
        return function(data) {
          var all_devices, machines;
          if (data.detail !== null) {
            machines = _this.translate(data.detail);
            all_devices = _this.get_devices(machines);
            return _this.vm.devices = all_devices;
          }
        };
      })(this));
    };

    CentralStoremonitorPage.prototype.translate = function(detail) {
      var i, machines, _i, _len, _ref;
      machines = [];
      for (_i = 0, _len = detail.length; _i < _len; _i++) {
        i = detail[_i];
        if (_ref = i.Ip, __indexOf.call(machines, _ref) < 0) {
          machines.push(i.Ip);
        }
      }
      return machines;
    };

    CentralStoremonitorPage.prototype.detail = function(device) {
      if (device.name === '请添加' || !device.health) {
        return;
      }
      return (new CentralStoreDetailPage(this.sd, this, device, this.switch_to_page)).attach();
    };

    CentralStoremonitorPage.prototype.unmonitor = function(device) {
      if (device.name === '请添加') {
        return;
      }
      return (new ConfirmModal(this.vm.lang.unmonitor_tips, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain();
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).unmonitor(device.uuid);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            _this.attach();
            return (new MessageModal(_this.vm.lang.unmonitor_success)).attach();
          });
        };
      })(this))).attach();
    };

    CentralStoremonitorPage.prototype._filter_machine = function(bcst) {
      var addr, isLoged, is_add, machine, machines, shown_machines, temp, temp_machines, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref;
      machines = bcst.getDetachMachines();
      shown_machines = this._get_shown_machies();
      temp_machines = [];
      isLoged = false;
      temp = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        machine = machines[_i];
        for (_j = 0, _len1 = machine.length; _j < _len1; _j++) {
          addr = machine[_j];
          if (__indexOf.call(shown_machines, addr) >= 0) {
            isLoged = true;
            break;
          }
        }
        if (!isLoged) {
          temp_machines.push(machine);
        }
        isLoged = false;
      }
      machines = [];
      for (_k = 0, _len2 = temp_machines.length; _k < _len2; _k++) {
        machine = temp_machines[_k];
        is_add = false;
        if (machines.length === 0) {
          machines.push(machine);
          continue;
        }
        for (_l = 0, _len3 = machines.length; _l < _len3; _l++) {
          temp = machines[_l];
          if (_ref = temp[0], __indexOf.call(machine, _ref) >= 0) {
            is_add = true;
            break;
          }
        }
        if (!is_add) {
          machines.push(machine);
        }
      }
      temp_machines = [];
      for (_m = 0, _len4 = machines.length; _m < _len4; _m++) {
        machine = machines[_m];
        for (_n = 0, _len5 = machine.length; _n < _len5; _n++) {
          addr = machine[_n];
          if (bcst.isContained(addr)) {
            temp_machines.push(addr);
            break;
          }
        }
      }
      return temp_machines;
    };

    CentralStoremonitorPage.prototype._get_shown_machies = function() {
      var machine, machines, regex, settings, _i, _len, _ref;
      machines = [];
      regex = /^\d{1,3}(\.\d{1,3}){3}$/;
      settings = new SettingsManager;
      if (settings.getSearchedMachines() && settings.getSearchedMachines().length !== 0) {
        _ref = settings.getSearchedMachines();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          machine = _ref[_i];
          if (regex.test(machine)) {
            machines.push(machine);
          }
        }
      }
      return machines;
    };

    CentralStoremonitorPage.prototype.get_devices = function(machines) {
      var count, i, o, on_monitor, slot, slotgroup, slotgroups, slots, _i, _j, _len, _len1, _ref;
      slotgroups = [];
      slotgroup = [];
      slot = [];
      count = 0;
      on_monitor = [];
      _ref = machines.sort(this.compare('Ip'));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        o = this._get_devices(i.Ip);
        o.num = Number(i.Ip.split('.')[3]);
        o.uuid = i.Uuid;
        o.name = i.Ip;
        o.slotnr = i.Slotnr;
        o.created = i.Created;
        o.health = i.Status;
        slot.push(o);
      }
      slots = this.compare(slot);
      for (_j = 0, _len1 = slots.length; _j < _len1; _j++) {
        i = slots[_j];
        count += 1;
        slotgroup.push(i);
        if (machines.length === count || count % 4 === 0) {
          slotgroups.push(slotgroup);
          slotgroup = [];
        }
      }
      return slotgroups;
    };

    CentralStoremonitorPage.prototype._get_devices = function(machine) {
      var gap, regex, result, temp;
      regex = /\d{1,3}(\.\d{1,3})$/;
      temp = machine.match(regex)[0];
      if (temp.length === 4) {
        gap = '.0';
        result = temp.split('.').join(gap);
      } else if (temp.length === 3) {
        gap = '.00';
        result = temp.split('.').join(gap);
      } else {
        result = temp;
      }
      return {
        ip: result
      };
    };

    CentralStoremonitorPage.prototype.compare = function(machines) {
      var degraded, failed, i, normal, _i, _len;
      failed = [];
      degraded = [];
      normal = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        i = machines[_i];
        switch (i.health) {
          case true:
            normal.push(i);
            break;
          case false:
            failed.push(i);
            break;
          case 'degraded':
            degraded.push(i);
        }
      }
      failed = failed.sort(this._compare('ip'));
      degraded = degraded.sort(this._compare('ip'));
      normal = normal.sort(this._compare('num'));
      return failed.concat(degraded).concat(normal);
    };

    CentralStoremonitorPage.prototype._compare = function(propertyname) {
      return (function(_this) {
        return function(obj1, obj2) {
          var value1, value2;
          value1 = obj1[propertyname];
          value2 = obj2[propertyname];
          if (value1 < value2) {
            return -1;
          } else if (value1 > value2) {
            return 1;
          } else {
            return 0;
          }
        };
      })(this);
    };

    CentralStoremonitorPage.prototype.test_1 = function() {
      return [
        [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "1"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "2"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "3"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "4"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "5"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "6"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "7"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "8"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "9"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "10"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "11"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "12"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "13"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "14"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "15"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "16"
          }
        ]
      ];
    };

    return CentralStoremonitorPage;

  })(Page);

  CentralServermonitorPage = (function(_super) {
    __extends(CentralServermonitorPage, _super);

    function CentralServermonitorPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.test_1 = __bind(this.test_1, this);
      this._compare = __bind(this._compare, this);
      this.compare = __bind(this.compare, this);
      this._get_devices = __bind(this._get_devices, this);
      this.get_devices = __bind(this.get_devices, this);
      this._get_shown_machies = __bind(this._get_shown_machies, this);
      this._filter_machine = __bind(this._filter_machine, this);
      this.unmonitor = __bind(this.unmonitor, this);
      this.detail = __bind(this.detail, this);
      this.translate = __bind(this.translate, this);
      this.get_history_devices = __bind(this.get_history_devices, this);
      this._subitems = __bind(this._subitems, this);
      this.subitems = __bind(this.subitems, this);
      this._search = __bind(this._search, this);
      this.search = __bind(this.search, this);
      this.test = __bind(this.test, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServermonitorPage.__super__.constructor.call(this, "centralservermonitorpage-", "html/centralservermonitorpage.html");
      $(this.sd.centers).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.devices = _this.subitems();
        };
      })(this));
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var latest;
          if (_this.has_rendered) {
            return latest = source.items[source.items.length - 1];
          }
        };
      })(this));
    }

    CentralServermonitorPage.prototype.define_vm = function(vm) {
      vm.lang = lang.centralservermonitor;
      vm.search = this.search;
      vm.detail = this.detail;
      vm.rendered = this.rendered;
      vm.unmonitor = this.unmonitor;
      vm.devices = this.subitems();
      vm.switch_to_page = this.switch_to_page;
      return vm.test = this.test;
    };

    CentralServermonitorPage.prototype.rendered = function() {
      CentralServermonitorPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      $("form.machines").validate(valid_opt({
        rules: {
          'machine-checkbox': {
            required: true,
            minlength: 1
          }
        },
        messages: {
          'machine-checkbox': "请选择至少一个虚拟磁盘"
        }
      }));
      return this.vm.devices = this.subitems();
    };

    CentralServermonitorPage.prototype.test = function() {
      var chain, tlist;
      chain = new Chain();
      tlist = new MachineRest(this.sd.host);
      return (tlist.query()).done((function(_this) {
        return function(data) {
          return console.log(data);
        };
      })(this));
    };

    CentralServermonitorPage.prototype.search = function() {
      var bcst, chain, outline;
      outline = [];
      chain = new Chain();
      bcst = new BCST;
      chain.chain(bcst.broadcast);
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          var i, machines, online, _i, _len, _ref;
          machines = bcst.getMachines().reverse();
          _this._search(machines).sort(_this._compare('num'));
          if (machines) {
            if (_this.sd.centers.items !== null) {
              online = [
                (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.sd.centers.items;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    i = _ref[_i];
                    _results.push(i.Ip);
                  }
                  return _results;
                }).call(_this)
              ];
              for (_i = 0, _len = machines.length; _i < _len; _i++) {
                i = machines[_i];
                if (_ref = i.ifaces[0], __indexOf.call(online[0], _ref) < 0) {
                  outline.push(i);
                }
              }
              if (outline.length > 0) {
                console.log(_this);
                return (new CentralSearchModal(_this.sd, _this, outline, "export", function(data) {
                  return _this.frozen();
                })).attach();
              } else {
                return (new MessageModal(lang.centralview.detect_no_new_machine_info)).attach();
              }
            } else {
              return (new CentralSearchModal(_this.sd, _this, machines, "export", function(data) {
                return _this.frozen();
              })).attach();
            }
          } else {
            return (new MessageModal(lang.centralview.detect_no_machines_info)).attach();
          }
        };
      })(this));
    };

    CentralServermonitorPage.prototype._search = function(machines) {
      var i, _i, _len;
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        i = machines[_i];
        i.num = Number(i.ifaces[0].split('.')[3]);
      }
      return machines;
    };

    CentralServermonitorPage.prototype.subitems = function() {
      var all_devices;
      if (this._subitems().length) {
        all_devices = this.get_devices(this._subitems());
        return all_devices;
      }
      return [
        [
          {
            name: "请添加",
            health: true
          }
        ]
      ];
    };

    CentralServermonitorPage.prototype._subitems = function() {
      var i, items, tmp, _i, _len;
      if (this.sd.centers.items !== null) {
        tmp = [];
        items = subitems(this.sd.centers.items, {
          Uuid: "",
          Ip: "",
          Slotnr: "",
          Created: "",
          Devtype: "",
          Status: ""
        });
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          if (i.Devtype === "export") {
            tmp.push(i);
          }
        }
        return tmp;
      }
    };

    CentralServermonitorPage.prototype.get_history_devices = function() {
      var tlist;
      tlist = new MachineRest(this.sd.host);
      return (tlist.query()).done((function(_this) {
        return function(data) {
          var all_devices, machines;
          if (data.detail !== null) {
            machines = _this.translate(data.detail);
            all_devices = _this.get_devices(machines);
            return _this.vm.devices = all_devices;
          }
        };
      })(this));
    };

    CentralServermonitorPage.prototype.translate = function(detail) {
      var i, machines, _i, _len, _ref;
      machines = [];
      for (_i = 0, _len = detail.length; _i < _len; _i++) {
        i = detail[_i];
        if (_ref = i.Ip, __indexOf.call(machines, _ref) < 0) {
          machines.push(i.Ip);
        }
      }
      return machines;
    };

    CentralServermonitorPage.prototype.detail = function(device) {
      var machine_detail, query;
      if (device.name === '请添加' || !device.health) {
        return;
      }
      query = new MachineRest(this.sd.host);
      machine_detail = query.machine(device.uuid);
      return machine_detail.done((function(_this) {
        return function(data) {
          console.log(data);
          if (data.status === 'success') {
            return (new CentralServerDetailPage(_this.sd, _this, device, _this.switch_to_page, data.detail)).attach();
          } else {
            return (new MessageModal(_this.vm.lang.detail_error)).attach();
          }
        };
      })(this));
    };

    CentralServermonitorPage.prototype.unmonitor = function(device) {
      if (device.name === '请添加') {
        return;
      }
      return (new ConfirmModal(this.vm.lang.unmonitor_tips, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain();
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).unmonitor(device.uuid);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            _this.attach();
            return (new MessageModal(_this.vm.lang.unmonitor_success)).attach();
          });
        };
      })(this))).attach();
    };

    CentralServermonitorPage.prototype._filter_machine = function(bcst) {
      var addr, isLoged, is_add, machine, machines, shown_machines, temp, temp_machines, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref;
      machines = bcst.getDetachMachines();
      shown_machines = this._get_shown_machies();
      temp_machines = [];
      isLoged = false;
      temp = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        machine = machines[_i];
        for (_j = 0, _len1 = machine.length; _j < _len1; _j++) {
          addr = machine[_j];
          if (__indexOf.call(shown_machines, addr) >= 0) {
            isLoged = true;
            break;
          }
        }
        if (!isLoged) {
          temp_machines.push(machine);
        }
        isLoged = false;
      }
      machines = [];
      for (_k = 0, _len2 = temp_machines.length; _k < _len2; _k++) {
        machine = temp_machines[_k];
        is_add = false;
        if (machines.length === 0) {
          machines.push(machine);
          continue;
        }
        for (_l = 0, _len3 = machines.length; _l < _len3; _l++) {
          temp = machines[_l];
          if (_ref = temp[0], __indexOf.call(machine, _ref) >= 0) {
            is_add = true;
            break;
          }
        }
        if (!is_add) {
          machines.push(machine);
        }
      }
      temp_machines = [];
      for (_m = 0, _len4 = machines.length; _m < _len4; _m++) {
        machine = machines[_m];
        for (_n = 0, _len5 = machine.length; _n < _len5; _n++) {
          addr = machine[_n];
          if (bcst.isContained(addr)) {
            temp_machines.push(addr);
            break;
          }
        }
      }
      return temp_machines;
    };

    CentralServermonitorPage.prototype._get_shown_machies = function() {
      var machine, machines, regex, settings, _i, _len, _ref;
      machines = [];
      regex = /^\d{1,3}(\.\d{1,3}){3}$/;
      settings = new SettingsManager;
      if (settings.getSearchedMachines() && settings.getSearchedMachines().length !== 0) {
        _ref = settings.getSearchedMachines();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          machine = _ref[_i];
          if (regex.test(machine)) {
            machines.push(machine);
          }
        }
      }
      return machines;
    };

    CentralServermonitorPage.prototype.get_devices = function(machines) {
      var count, i, o, on_monitor, slot, slotgroup, slotgroups, slots, _i, _j, _len, _len1, _ref;
      slotgroups = [];
      slotgroup = [];
      slot = [];
      count = 0;
      on_monitor = [];
      _ref = machines.sort(this.compare('Ip'));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        o = this._get_devices(i.Ip);
        o.num = Number(i.Ip.split('.')[3]);
        o.uuid = i.Uuid;
        o.name = i.Ip;
        o.slotnr = i.Slotnr;
        o.created = i.Created;
        o.health = i.Status;
        slot.push(o);
      }
      slots = this.compare(slot);
      for (_j = 0, _len1 = slots.length; _j < _len1; _j++) {
        i = slots[_j];
        count += 1;
        slotgroup.push(i);
        if (machines.length === count || count % 4 === 0) {
          slotgroups.push(slotgroup);
          slotgroup = [];
        }
      }
      return slotgroups;
    };

    CentralServermonitorPage.prototype._get_devices = function(machine) {
      var gap, regex, result, temp;
      regex = /\d{1,3}(\.\d{1,3})$/;
      temp = machine.match(regex)[0];
      if (temp.length === 4) {
        gap = '.0';
        result = temp.split('.').join(gap);
      } else if (temp.length === 3) {
        gap = '.00';
        result = temp.split('.').join(gap);
      } else {
        result = temp;
      }
      return {
        ip: result
      };
    };

    CentralServermonitorPage.prototype.compare = function(machines) {
      var degraded, failed, i, normal, _i, _len;
      failed = [];
      degraded = [];
      normal = [];
      for (_i = 0, _len = machines.length; _i < _len; _i++) {
        i = machines[_i];
        switch (i.health) {
          case true:
            normal.push(i);
            break;
          case false:
            failed.push(i);
            break;
          case 'degraded':
            degraded.push(i);
        }
      }
      failed = failed.sort(this._compare('ip'));
      degraded = degraded.sort(this._compare('ip'));
      normal = normal.sort(this._compare('num'));
      return failed.concat(degraded).concat(normal);
    };

    CentralServermonitorPage.prototype._compare = function(propertyname) {
      return (function(_this) {
        return function(obj1, obj2) {
          var value1, value2;
          value1 = obj1[propertyname];
          value2 = obj2[propertyname];
          if (value1 < value2) {
            return -1;
          } else if (value1 > value2) {
            return 1;
          } else {
            return 0;
          }
        };
      })(this);
    };

    CentralServermonitorPage.prototype.test_1 = function() {
      return [
        [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "1"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "2"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "3"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "4"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "5"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "6"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "7"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "8"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "9"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "10"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "11"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "12"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "13"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "14"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "15"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "16"
          }
        ]
      ];
    };

    return CentralServermonitorPage;

  })(Page);

  CentralStoreDetailPage = (function(_super) {
    __extends(CentralStoreDetailPage, _super);

    function CentralStoreDetailPage(sd, page, device, switch_to_page, message) {
      this.sd = sd;
      this.page = page;
      this.device = device;
      this.switch_to_page = switch_to_page;
      this.message = message;
      this._compare = __bind(this._compare, this);
      this.test = __bind(this.test, this);
      this._get_raid_color_map = __bind(this._get_raid_color_map, this);
      this._has_disk = __bind(this._has_disk, this);
      this._get_disk_info = __bind(this._get_disk_info, this);
      this._translate = __bind(this._translate, this);
      this.disk_list = __bind(this.disk_list, this);
      this.get_raids = __bind(this.get_raids, this);
      this.get_slots = __bind(this.get_slots, this);
      this._get_slots_b = __bind(this._get_slots_b, this);
      this.get_slots_b = __bind(this.get_slots_b, this);
      this._subitems = __bind(this._subitems, this);
      this.query_list = __bind(this.query_list, this);
      this._temporary = __bind(this._temporary, this);
      this.slots = __bind(this.slots, this);
      this.smarts = __bind(this.smarts, this);
      this.smget = __bind(this.smget, this);
      this.initiators = __bind(this.initiators, this);
      this.filesystems = __bind(this.filesystems, this);
      this.volumes = __bind(this.volumes, this);
      this.raids = __bind(this.raids, this);
      this.disks = __bind(this.disks, this);
      this.plot_flow_out = __bind(this.plot_flow_out, this);
      this.plot_flow_in = __bind(this.plot_flow_in, this);
      this.refresh = __bind(this.refresh, this);
      this.refresh_flow = __bind(this.refresh_flow, this);
      this.subitems = __bind(this.subitems, this);
      this.pie_cap = __bind(this.pie_cap, this);
      this.pie_temp = __bind(this.pie_temp, this);
      this.pie_system = __bind(this.pie_system, this);
      this.subitems_critical = __bind(this.subitems_critical, this);
      this.subitems_warning = __bind(this.subitems_warning, this);
      this.subitems_info = __bind(this.subitems_info, this);
      this.subitems_log = __bind(this.subitems_log, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralStoreDetailPage.__super__.constructor.call(this, "centralstoredetailpage-", "html/centralstoredetailpage.html");
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var i, latest, _i, _len, _ref, _results;
          if (_this.has_rendered) {
            latest = source.items[source.items.length - 1];
            _ref = latest.storages;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (i.ip === _this.device.name) {
                _this.vm.cpu_load = parseInt(i.info[0].cpu);
                _this.vm.mem_load = parseInt(i.info[0].mem);
                _this.vm.system = parseInt(i.info[0].df[0].used_per);
                _this.vm.temp = parseInt(i.info[0].temp);
                if (i.info[0].cache_total === 0) {
                  _this.vm.cache_load = 0;
                } else {
                  _this.vm.cache_load = parseInt(i.info[i.info.length - 1].cache_used / i.info[i.info.length - 1].cache_total);
                }
                if (i.info[0].df.length === 2) {
                  _results.push(_this.vm.cap = parseInt(i.info[0].df[1].used_per));
                } else {
                  _results.push(_this.vm.cap = 0);
                }
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
      $(this.sd.journals).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.journal = _this.subitems_log();
        };
      })(this));
      $(this.sd.machinedetails).on("updated", (function(_this) {
        return function(e, source) {
          var array_journal, array_slot, details, i, j, slot, t, _i, _j, _k, _len, _len1, _len2, _ref;
          if (_this.has_rendered) {
            _ref = source.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (i.uuid === _this.device.uuid) {
                array_slot = [];
                array_journal = [];
                if (i.disks.length > 0) {
                  array_slot = i.disks;
                }
                details = _this.query_list(array_slot);
                slot = _this.get_slots(details);
                array_journal = i.journals;
                _this.vm.slots = slot;
                _this.vm.raids = i.raids;
                _this.vm.volumes = i.volumes;
              }
            }
            for (_j = 0, _len1 = array_journal.length; _j < _len1; _j++) {
              t = array_journal[_j];
              t.created = t.created.replace("-", "/").replace("-", "/").replace("T", "-").replace("+08:00", "");
              if (t.status) {
                t.chinese_status = "handled";
              } else {
                t.chinese_status = "unhandled";
              }
            }
            for (_k = 0, _len2 = array_slot.length; _k < _len2; _k++) {
              j = array_slot[_k];
              if (j.raid === "") {
                j.raid = "无";
              }
            }
            _this.vm.journal = array_journal.reverse();
            return _this.vm.disks = array_slot;
          }
        };
      })(this));
    }

    CentralStoreDetailPage.prototype.define_vm = function(vm) {
      var newid;
      vm.lang = lang.centraldisk;
      vm.slots = this.slots();
      vm.flow_type = "fwrite_mb";
      vm.disks = this.disks();
      vm.raids = this.raids();
      vm.volumes = this.volumes();
      vm.filesystems = this.filesystems();
      vm.fattr_health = fattr.health;
      vm.fattr_role = fattr.role;
      vm.fattr_cap = fattr.cap;
      vm.fattr_caps = fattr.caps;
      vm.fattr_disk_status = fattr.disk_status;
      vm.fattr_view_status_fixed = fattr.view_status_fixed;
      vm.disk_list = this.disk_list;
      vm.need_format = false;
      vm.switch_to_page = this.switch_to_page;
      vm.navs = [
        {
          title: lang.centralsidebar.overview,
          icon: "icon-dashboard",
          id: "overview"
        }, {
          title: lang.centralsidebar.server,
          icon: "icon-wrench",
          id: "server"
        }
      ];
      newid = random_id('menu-');
      vm.navss = [
        {
          title: lang.adminview.menu_new,
          icon: "icon-home",
          menuid: "" + newid
        }
      ];
      vm.cpu_load = 0;
      vm.cache_load = 0;
      vm.mem_load = 0;
      vm.system = 0;
      vm.temp = 0;
      vm.cap = 0;
      vm.$watch("cpu_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("cache_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cache-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("mem_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#mem-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.tabletitle = this.device.name;
      vm.fattr_journal_status = fattr.journal_status;
      vm.journal = this.subitems_log();
      vm.journal_info = this.subitems_info();
      vm.journal_warning = this.subitems_warning();
      vm.journal_critical = this.subitems_critical();
      return vm.rendered = this.rendered;
    };

    CentralStoreDetailPage.prototype.rendered = function() {
      var $scroller1, $scroller2, $scroller3, $scroller4, e, opt1, opt2, opt3, _base, _base1, _base2;
      CentralStoreDetailPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      $(function() {});
      $("#myTab li:eq(0) a").tab("show");
      $("#smartTab li:eq(0) a").tab("show");
      opt1 = {
        animate: 1000,
        size: 115,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(255, 184, 72)",
        trackColor: 'rgba(255, 184, 72,0.1)',
        scaleColor: false
      };
      opt2 = {
        animate: 1000,
        size: 115,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(40, 183, 121)",
        trackColor: 'rgba(40, 183, 121,0.1)',
        scaleColor: false
      };
      opt3 = {
        animate: 1000,
        size: 115,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(52, 152, 219)",
        trackColor: 'rgba(52, 152, 219,0.1)',
        scaleColor: false
      };
      this.data_table = $("#table2").dataTable(dtable_opt({
        retrieve: true
      }));
      this.data_table = $("#table3").dataTable(dtable_opt({
        retrieve: true
      }));
      this.data_table = $("#table4").dataTable(dtable_opt({
        retrieve: true
      }));
      this.data_table = $("#table5").dataTable(dtable_opt({
        retrieve: true
      }));
      this.data_table1 = $("#log-table1").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table2 = $("#log-table2").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table3 = $("#log-table3").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table4 = $("#log-table4").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller1 = $("#journals-scroller-1");
      $scroller2 = $("#journals-scroller-2");
      $scroller3 = $("#journals-scroller-3");
      $scroller4 = $("#journals-scroller-4");
      $scroller1.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller1.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller2.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller2.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller3.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller3.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller4.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller4.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $("#cpu-load").easyPieChart(opt1);
      if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
        _base.update(this.vm.cpu_load);
      }
      $("#cache-load").easyPieChart(opt2);
      if (typeof (_base1 = $("#cache-load").data("easyPieChart")).update === "function") {
        _base1.update(this.vm.cache_load);
      }
      $("#mem-load").easyPieChart(opt3);
      if (typeof (_base2 = $("#mem-load").data("easyPieChart")).update === "function") {
        _base2.update(this.vm.mem_load);
      }
      try {
        this.plot_flow_in(this.sd.stats.items, this.device.name);
        this.plot_flow_out(this.sd.stats.items, this.device.name);
        this.pie_system(this.sd.stats.items, this.device.name);
        this.pie_temp(this.sd.stats.items, this.device.name);
        return this.pie_cap(this.sd.stats.items, this.device.name);
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.subitems_log = function() {
      var arrays, error, i, t, _i, _j, _len, _len1, _ref;
      try {
        arrays = [];
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.message) {
            arrays = i.journals;
          }
        }
        for (_j = 0, _len1 = arrays.length; _j < _len1; _j++) {
          t = arrays[_j];
          t.created = t.created.replace("-", "/").replace("-", "/").replace("T", "-").replace("+08:00", "");
          if (t.status) {
            t.chinese_status = "handled";
          } else {
            t.chinese_status = "unhandled";
          }
        }
        return arrays.reverse();
      } catch (_error) {
        error = _error;
        return [];
      }
    };

    CentralStoreDetailPage.prototype.subitems_info = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems_log();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'info') {
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreDetailPage.prototype.subitems_warning = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems_log();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'warning') {
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreDetailPage.prototype.subitems_critical = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems_log();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'critical') {
          info.push(i);
        }
      }
      return info;
    };

    CentralStoreDetailPage.prototype.pie_system = function(items, name) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#sparkline_bar1').highcharts({
                    chart: {
                      type: 'pie',
                      margin: [0, 0, 25, 0],
                      events: {
                            load: function () {
                                var series1 = this.series[0];
                                setInterval(function () {
                                    try{
                                        for (var i=0;i< items[items.length - 1].storages.length;i++){
                                            if( items[items.length - 1].storages[i].ip == name){
                                                y = items[items.length - 1].storages[i].info[0].df[0].used_per;
                                            }
                                        };
                                        series1.setData([['已用',y], ['剩余',100 - y]]);
                                    }
                                    catch(e){
                                        console.log(e);
                                    }
                                }, 3000);
                            }
                        }
                    },
                    title: {
                      text: '系统空间',
                      verticalAlign: "bottom",
                      style: {
                        color: '#000',
                        fontFamily: 'Microsoft YaHei',
                        fontSize: 16
                      }
                    },
                    subtitle: {
                      text: ''
                    },
                    xAxis: {
                      type: 'category',
                      gridLineColor: '#FFF',
                      tickColor: '#FFF',
                      labels: {
                        enabled: false,
                        rotation: -45,
                        style: {
                          fontSize: '13px',
                          fontFamily: 'opensans-serif'
                        }
                      }
                    },
                    yAxis: {
                      gridLineColor: '#FFF',
                      min: 0,
                      max: 100,
                      title: {
                        text: ''
                      },
                      labels: {
                        enabled: true
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    tooltip: {
                      pointFormat: '<b>{point.y:.1f}%</b>',
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      pie: {
                        animation: false,
                        shadow: false,
                        borderColor: "rgba(0,0,0,0)",
                        dataLabels: {
                          enabled: false
                        }
                      }
                    },
                    colors: ["rgb(87, 199, 212)", "rgba(87, 199, 212,0.2)"],
                    series: [{
                        name: '系统空间',
                        data: [
                            ['已用',   0],
                            ['剩余',   100]
                        ]
                    }]
                });
            });
        });
    };

    CentralStoreDetailPage.prototype.pie_temp = function(items, name) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#sparkline_bar2').highcharts({
                    chart: {
                      type: 'pie',
                      margin: [0, 0, 25, 0],
                      events: {
                            load: function () {
                                var series1 = this.series[0];
                                setInterval(function () {
                                    try{
                                        for (var i=0;i< items[items.length - 1].storages.length;i++){
                                            if( items[items.length - 1].storages[i].ip == name){
                                                y = items[items.length - 1].storages[i].info[0].temp;
                                            }
                                        };
                                        series1.setData([['已用',y], ['剩余',100 - y]]);
                                    }
                                    catch(e){
                                        console.log(e);
                                    }
                                }, 3000);
                            }
                        }
                    },
                    title: {
                      text: '温度',
                      verticalAlign: "bottom",
                      style: {
                        color: '#000',
                        fontFamily: 'Microsoft YaHei',
                        fontSize: 16
                      }
                    },
                    subtitle: {
                      text: ''
                    },
                    xAxis: {
                      type: 'category',
                      gridLineColor: '#FFF',
                      tickColor: '#FFF',
                      labels: {
                        enabled: false,
                        rotation: -45,
                        style: {
                          fontSize: '13px',
                          fontFamily: 'opensans-serif'
                        }
                      }
                    },
                    yAxis: {
                      gridLineColor: '#FFF',
                      min: 0,
                      max: 100,
                      title: {
                        text: ''
                      },
                      labels: {
                        enabled: true
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    tooltip: {
                      pointFormat: '<b>{point.y:.1f}%</b>',
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      pie: {
                        animation: false,
                        shadow: false,
                        borderColor: "rgba(0,0,0,0)",
                        dataLabels: {
                          enabled: false
                        }
                      }
                    },
                    colors: ["rgb(98, 168, 234)", "rgba(98, 168, 234,0.2)"],
                    series: [{
                        name: '温度',
                        data: [
                            ['已用',   0],
                            ['剩余',   100]
                        ]
                    }]
                });
            });
        });
    };

    CentralStoreDetailPage.prototype.pie_cap = function(items, name) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#sparkline_bar3').highcharts({
                    chart: {
                      type: 'pie',
                      margin: [0, 0, 25, 0],
                      events: {
                            load: function () {
                                var series1 = this.series[0];
                                setInterval(function () {
                                    try{
                                        for (var i=0;i< items[items.length - 1].storages.length;i++){
                                            if( items[items.length - 1].storages[i].ip == name){
                                                if( items[items.length - 1].storages[i].info[0].df.length == 2){
                                                    y = items[items.length - 1].storages[i].info[0].df[1].used_per;
                                                }
                                                else{
                                                    y = 0;
                                                }
                                            }
                                        };
                                        series1.setData([['已用',y], ['剩余',100 - y]]);
                                    }
                                    catch(e){
                                        console.log(e);
                                    }
                                }, 3000);
                            }
                        }
                    },
                    title: {
                      text: '存储空间',
                      verticalAlign: "bottom",
                      style: {
                        color: '#000',
                        fontFamily: 'Microsoft YaHei',
                        fontSize: 16
                      }
                    },
                    subtitle: {
                      text: ''
                    },
                    xAxis: {
                      type: 'category',
                      gridLineColor: '#FFF',
                      tickColor: '#FFF',
                      labels: {
                        enabled: false,
                        rotation: -45,
                        style: {
                          fontSize: '13px',
                          fontFamily: 'opensans-serif'
                        }
                      }
                    },
                    yAxis: {
                      gridLineColor: '#FFF',
                      min: 0,
                      max: 100,
                      title: {
                        text: ''
                      },
                      labels: {
                        enabled: true
                      }
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    tooltip: {
                      pointFormat: '<b>{point.y:.1f}%</b>',
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      pie: {
                        animation: false,
                        shadow: false,
                        borderColor: "rgba(0,0,0,0)",
                        dataLabels: {
                          enabled: false
                        }
                      }
                    },
                    colors: ["rgb(146, 109, 222)", "rgba(146, 109, 222,0.2)"],
                    series: [{
                        name: '存储空间',
                        data: [
                            ['已用',   0],
                            ['剩余',   100]
                        ]
                    }]
                });
            });
        });
    };

    CentralStoreDetailPage.prototype.subitems = function() {
      var items;
      items = subitems(this._temporary(), {
        Location: "",
        host: "native",
        health: "normal",
        raid: "",
        role: "unused",
        cap_sector: 5860000000,
        sn: "WD-WCC2E4EYFU91",
        vendor: "WDC"
      });
      return items;
    };

    CentralStoreDetailPage.prototype.refresh_flow = function() {
      var e, i, _i, _len, _ref, _results;
      try {
        _ref = this.sd.stats.items[this.sd.stats.items.length - 1].storages;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.ip === this.device.name) {
            console.log(i.info);
            this.plot_flow_in(i.info);
            _results.push(this.plot_flow_out(i.info));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.refresh = function() {
      var cap, e, i, system, temp, _i, _len, _ref, _results;
      try {
        _ref = this.sd.stats.items[this.sd.stats.items.length - 1].storages;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.ip === this.device.name) {
            this.vm.cpu_load = i.info[i.info.length - 1].cpu;
            this.vm.mem_load = i.info[i.info.length - 1].mem;
            this.vm.cache_load = i.info[i.info.length - 1].cache_used / i.info[i.info.length - 1].cache_total;
            system = i.info[i.info.length - 1].df[0].used_per;
            cap = i.info[i.info.length - 1].df[1].used_per;
            temp = i.info[i.info.length - 1].temp;
            _results.push(this.sparkline_stats(system, temp, cap));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.plot_flow_in = function(yaxis, name) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_in', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'write_mb';
                                    var type2 = 'read_mb';
                                    var x = (new Date()).getTime(); // current time
                                    var y1 = 0;
                                    var y2 = 0;
                                    for (var i=0;i< yaxis[yaxis.length - 1].storages.length;i++){
                                        if( yaxis[yaxis.length - 1].storages[i].ip == name){
                                            y1 = yaxis[yaxis.length - 1].storages[i].info[0][type1];
                                            y2 = yaxis[yaxis.length - 1].storages[i].info[0][type2];
                                        }
                                    };
                                    var random = Math.random();
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                //colors:["rgba(227,91,90,0.4)","rgba(227,91,243,0.1)"],
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        //animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        fillOpacity: 0.2,
                        fillColor:"rgba(227,91,90,0.4)",
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 5,
                            lineWidth:2,
                            lineColor:"#fff",
                            fillColor:"rgba(255,120,120,0.7)",
                            states: {
                                hover: {
                                    enabled: true,
                                    fillColor:"rgb(227,91,90)"
                                }
                            }
                        },
                        lineWidth: 2,
                        lineColor:"rgb(227,91,90)"
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#net_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#net_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    CentralStoreDetailPage.prototype.plot_flow_out = function(yaxis, name) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_out', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'write_vol';
                                    var type2 = 'read_vol';
                                    var x = (new Date()).getTime();// current time
                                    var y1 = 0;
                                    var y2 = 0;
                                    for (var i=0;i< yaxis[yaxis.length - 1].storages.length;i++){
                                        if( yaxis[yaxis.length - 1].storages[i].ip == name){
                                            y1 = yaxis[yaxis.length - 1].storages[i].info[0][type1];
                                            y2 = yaxis[yaxis.length - 1].storages[i].info[0][type2];
                                        }
                                    };
                                    var random = Math.random();
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        //animation:false,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        fillOpacity: 0.2,
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 4.5,
                            fillColor:"rgb(143, 208, 253)",
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        lineWidth: 2
                    }
                },
                colors:["rgb(115, 172, 240)","rgb(115, 172, 240)"],
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#vol_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#vol_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    CentralStoreDetailPage.prototype.disks = function() {
      var e, i, j, tmp, _i, _j, _len, _len1, _ref;
      try {
        tmp = [];
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.message) {
            tmp = i.disks;
          }
        }
        for (_j = 0, _len1 = tmp.length; _j < _len1; _j++) {
          j = tmp[_j];
          if (j.raid === '') {
            j.raid = '无';
          }
        }
        return tmp;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.raids = function() {
      var e, i, _i, _len, _ref;
      try {
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.message) {
            return i.raids;
          }
        }
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.volumes = function() {
      var e, i, _i, _len, _ref;
      try {
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.message) {
            return i.volumes;
          }
        }
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.filesystems = function() {
      var e, i, _i, _len, _ref;
      try {
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.message) {
            return i.filesystems;
          }
        }
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.initiators = function() {
      var e, i, portal, volume, _i, _len, _ref;
      try {
        _ref = this.message.initiators;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          i.iface = ((function() {
            var _j, _len1, _ref1, _results;
            _ref1 = i.portals;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              portal = _ref1[_j];
              _results.push(portal);
            }
            return _results;
          })()).join(",");
          i.map = ((function() {
            var _j, _len1, _ref1, _results;
            _ref1 = i.volumes;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              volume = _ref1[_j];
              _results.push(volume);
            }
            return _results;
          })()).join(",");
          if (i.map === '') {
            i.map = '无';
          }
        }
        return this.message.initiators;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralStoreDetailPage.prototype.smget = function(e) {
      return this.vm.smart = e.smartinfo;
    };

    CentralStoreDetailPage.prototype.smarts = function() {
      var error, i, items, smart, tem, temp, temps, _i, _len;
      try {
        smart = ['CurrentPendingSector', 'LoadCycleCount', 'OfflineUncorrectable', 'PowerCycleCount', 'PowerOffRetractCount', 'PowerOnHours', 'RawReadErrorRate', 'ReallocatedSectorCt', 'SeekErrorRate', 'SpinRetryCount', 'SpinUpTime', 'StartStopCount', 'UDMACRCErrorCount'];
        items = subitems(this.sd.stores.items, {
          Location: "",
          CurrentPendingSector: "",
          LoadCycleCount: "",
          OfflineUncorrectable: "",
          PowerCycleCount: "",
          PowerOffRetractCount: "",
          PowerOnHours: "",
          RawReadErrorRate: "",
          ReallocatedSectorCt: "",
          SeekErrorRate: "",
          SpinRetryCount: "",
          SpinUpTime: "",
          StartStopCount: "",
          UDMACRCErrorCount: ""
        });
        temp = {};
        tem = [];
        temps = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          i = items[_i];
          $.each(i, function(key, val) {
            switch (key) {
              case 'Location':
                temp.location = val;
                return temp.num = Number(val.split('.')[2]);
              default:
                return tem.push({
                  'name': key,
                  'val': val
                });
            }
          });
          temp.smartinfo = tem;
          temps.push(temp);
          tem = [];
          temp = {};
        }
        temps.sort(this._compare('num'));
        return temps;
      } catch (_error) {
        error = _error;
        console.log(error);
        return [];
      }
    };

    CentralStoreDetailPage.prototype.slots = function() {
      var details, error, i, slot, temp, _i, _len, _ref;
      try {
        temp = [];
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.device.uuid) {
            if (i.disks.length === 0) {
              (new MessageModal(lang.centraldisk.no_data)).attach();
              return;
            } else {
              temp = i.disks;
            }
          }
        }
        details = this.query_list(temp);
        slot = this.get_slots(details);
        return slot;
      } catch (_error) {
        error = _error;
        return console.log(error);
      }
    };

    CentralStoreDetailPage.prototype._temporary = function() {
      var machine_detail, query_disks;
      query_disks = new MachineRest(this.sd.host);
      machine_detail = query_disks.machine(this.device.uuid);
      return machine_detail.done((function(_this) {
        return function(data) {
          var details, slots;
          if (data.detail === null) {
            return _this.vm.slots = _this.test();
          } else {
            details = _this.query_list(data.detail);
            slots = _this.get_slots(details);
            return _this.vm.slots = slots;
          }
        };
      })(this));
    };

    CentralStoreDetailPage.prototype.query_list = function(details) {
      var error, i, items, o, query, _i, _len;
      console.log(details);
      query = [];
      o = {};
      try {
        for (_i = 0, _len = details.length; _i < _len; _i++) {
          i = details[_i];
          o = {
            location: i.location,
            uuid: i.id,
            role: i.role,
            raid: i.raid,
            health: i.health,
            cap_sector: i.cap
          };
          query.push(o);
        }
        items = subitems(query, {
          location: "",
          host: "native",
          health: "",
          raid: "",
          role: "",
          cap_sector: 5860000000,
          sn: "WD-WCC2E4EYFU91",
          vendor: "WDC",
          type: "enterprise",
          model: "WD5000AAKX-60U6AA0"
        });
        return items;
      } catch (_error) {
        error = _error;
        return [];
      }
    };

    CentralStoreDetailPage.prototype._subitems = function() {
      var chain, machine_detail, query_disks;
      chain = new Chain();
      query_disks = new MachineRest(this.sd.host);
      console.log(query_disks);
      machine_detail = query_disks.machine(this.device.uuid);
      return machine_detail.done((function(_this) {
        return function(data) {
          var machines;
          if (data.detail === !null) {
            machines = _this.get_slots_b(data.detail);
            return machines;
          }
        };
      })(this));
    };

    CentralStoreDetailPage.prototype.get_slots_b = function(details) {
      var count, i, o, slotgroup, slotgroups, _i, _len;
      slotgroups = [];
      slotgroup = [];
      count = 0;
      for (_i = 0, _len = details.length; _i < _len; _i++) {
        i = details[_i];
        count += 1;
        o = this._get_slots_b(i.Location);
        o.raid = "normal";
        o.raidcolor = "color0";
        o.role = "unused";
        slotgroup.push(o);
        if (details.length === count || count % 4 === 0) {
          slotgroups.push(slotgroup);
          slotgroup = [];
        }
      }
      return slotgroups;
    };

    CentralStoreDetailPage.prototype._get_slots_b = function(machine) {
      var regex;
      regex = /\.(\d{1,2})$/;
      return {
        slot: machine.match(regex)[1]
      };
    };

    CentralStoreDetailPage.prototype.get_slots = function(temp) {
      var dsu, dsu_disk_num, dsus, i, o, raid_color_map, slotgroup, slotgroups, _i, _j, _len, _ref;
      slotgroups = [];
      slotgroup = [];
      dsus = [
        {
          location: "1.1",
          support_disk_nr: this.device.slotnr
        }
      ];
      dsu_disk_num = 0;
      raid_color_map = this._get_raid_color_map(temp);
      for (_i = 0, _len = dsus.length; _i < _len; _i++) {
        dsu = dsus[_i];
        for (i = _j = 1, _ref = dsu.support_disk_nr; 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
          o = this._has_disk(i, dsu, dsu_disk_num, temp);
          o.raidcolor = raid_color_map[o.raid];
          o.info = this._get_disk_info(i, dsu, temp);
          slotgroup.push(o);
          if (i % 4 === 0) {
            slotgroups.push(slotgroup);
            slotgroup = [];
          }
        }
        dsu_disk_num = dsu_disk_num + dsu.support_disk_nr;
      }
      console.log(slotgroups);
      return slotgroups;
    };

    CentralStoreDetailPage.prototype.get_raids = function() {
      var key, o, raid_color_map, raids, value;
      raids = [];
      raid_color_map = this._get_raid_color_map();
      for (key in raid_color_map) {
        value = raid_color_map[key];
        o = {
          name: key,
          color: value
        };
        raids.push(o);
      }
      return raids;
    };

    CentralStoreDetailPage.prototype.disk_list = function(disks) {
      if (disks.info === "none") {
        return "空盘";
      } else {
        return this._translate(disks.info);
      }
    };

    CentralStoreDetailPage.prototype._translate = function(obj) {
      var health, role, status, type;
      status = '';
      health = {
        'normal': '正常',
        'down': '下线',
        'failed': '损坏'
      };
      role = {
        'data': '数据盘',
        'spare': '热备盘',
        'unused': '未使用',
        'kicked': '损坏',
        'global_spare': '全局热备盘',
        'data&spare': '数据热备盘'
      };
      type = {
        'enterprise': '企业盘',
        'monitor': '监控盘',
        'sas': 'SAS盘'
      };
      $.each(obj, function(key, val) {
        var mod, name;
        switch (key) {
          case 'cap_sector':
            return status += '容量: ' + fattr.cap(val) + '<br/>';
          case 'health':
            return status += '健康: ' + health[val] + '<br/>';
          case 'role':
            return status += '状态: ' + role[val] + '<br/>';
          case 'raid':
            if (val.length === 0) {
              val = '无';
            }
            return status += '阵列: ' + val + '<br/>';
          case 'vendor':
            return status += '品牌: ' + val + '<br/>';
          case 'sn':
            return status += '序列号: ' + val + '<br/>';
          case 'model':
            return status += '型号: ' + val + '<br/>';
          case 'type':
            name = '未知';
            mod = obj.model.match(/(\S*)-/)[1];
            $.each(disks_type, function(j, k) {
              if (__indexOf.call(k, mod) >= 0) {
                return name = type[j];
              }
            });
            return status += '类型: ' + name + '<br/>';
        }
      });
      return status;
    };

    CentralStoreDetailPage.prototype._get_disk_info = function(slotNo, dsu, temp) {
      var disk, info, _i, _len;
      for (_i = 0, _len = temp.length; _i < _len; _i++) {
        disk = temp[_i];
        if (disk.location === ("" + dsu.location + "." + slotNo)) {
          info = {
            health: disk.health,
            cap_sector: disk.cap_sector,
            role: disk.role,
            raid: disk.raid,
            vendor: disk.vendor,
            sn: disk.sn,
            model: disk.model,
            type: disk.type
          };
          return info;
        }
      }
      return 'none';
    };

    CentralStoreDetailPage.prototype._has_disk = function(slotNo, dsu, dsu_disk_num, temp) {
      var disk, loc, o, rdname, rdrole, _i, _len;
      loc = "" + (dsu_disk_num + slotNo);
      for (_i = 0, _len = temp.length; _i < _len; _i++) {
        disk = temp[_i];
        if (disk.location === ("" + dsu.location + "." + slotNo)) {
          rdname = disk.raid === "" ? "noraid" : disk.raid;
          rdrole = disk.health === "down" ? "down" : disk.role;
          o = {
            slot: loc,
            role: rdrole,
            raid: rdname,
            raidcolor: ""
          };
          return o;
        }
      }
      o = {
        slot: loc,
        role: "nodisk",
        raid: "noraid",
        raidcolor: ""
      };
      return o;
    };

    CentralStoreDetailPage.prototype._get_raid_color_map = function(temp) {
      var disk, has_global_spare, i, map, raid, raids, rdname, _i, _j, _len, _len1;
      map = {};
      raids = [];
      i = 1;
      has_global_spare = false;
      for (_i = 0, _len = temp.length; _i < _len; _i++) {
        disk = temp[_i];
        if (disk.role === "global_spare") {
          has_global_spare = true;
          continue;
        }
        rdname = disk.raid === "" ? "noraid" : disk.raid;
        if (__indexOf.call(raids, rdname) < 0) {
          raids.push(rdname);
        }
      }
      for (_j = 0, _len1 = raids.length; _j < _len1; _j++) {
        raid = raids[_j];
        map[raid] = "color" + i;
        i = i + 1;
      }
      map["noraid"] = "color0";
      if (has_global_spare === true) {
        map["global_spare"] = "color5";
      }
      return map;
    };

    CentralStoreDetailPage.prototype.test = function() {
      return [
        [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "1"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "2"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "3"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "4"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "5"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "6"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "7"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "8"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "9"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "10"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "11"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "12"
          }
        ], [
          {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "13"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "14"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "15"
          }, {
            raid: "normal",
            raidcolor: "color0",
            role: "unused",
            slot: "16"
          }
        ]
      ];
    };

    CentralStoreDetailPage.prototype._compare = function(propertyname) {
      return (function(_this) {
        return function(obj1, obj2) {
          var value1, value2;
          value1 = obj1[propertyname];
          value2 = obj2[propertyname];
          if (value1 < value2) {
            return -1;
          } else if (value1 > value2) {
            return 1;
          } else {
            return 0;
          }
        };
      })(this);
    };

    return CentralStoreDetailPage;

  })(Page);

  CentralServerDetailPage = (function(_super) {
    __extends(CentralServerDetailPage, _super);

    function CentralServerDetailPage(sd, page, device, switch_to_page, message) {
      this.sd = sd;
      this.page = page;
      this.device = device;
      this.switch_to_page = switch_to_page;
      this.message = message;
      this.plot_flow_out = __bind(this.plot_flow_out, this);
      this.plot_flow_in = __bind(this.plot_flow_in, this);
      this.refresh_pie = __bind(this.refresh_pie, this);
      this.refresh = __bind(this.refresh, this);
      this.refresh_flow = __bind(this.refresh_flow, this);
      this.subitems = __bind(this.subitems, this);
      this.sparkline_stats = __bind(this.sparkline_stats, this);
      this.subitems_critical = __bind(this.subitems_critical, this);
      this.subitems_warning = __bind(this.subitems_warning, this);
      this.subitems_info = __bind(this.subitems_info, this);
      this.subitems_log = __bind(this.subitems_log, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServerDetailPage.__super__.constructor.call(this, "centralserverdetailpage-", "html/centralserverdetailpage.html");
      $(this.sd.stats).on("updated", (function(_this) {
        return function(e, source) {
          var i, latest, _i, _len, _ref, _results;
          if (_this.has_rendered) {
            latest = source.items[source.items.length - 1];
            _ref = latest.exports;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (i.ip === _this.device.name) {
                _this.vm.cpu_load = parseInt(i.info[0].cpu);
                _this.vm.mem_load = parseInt(i.info[0].mem);
                _results.push(_this.vm.cache_load = parseInt(i.info[0].df[0].used_per));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
      $(this.sd.journals).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.journal = _this.subitems_log();
        };
      })(this));
    }

    CentralServerDetailPage.prototype.define_vm = function(vm) {
      vm.lang = lang.centraldisk;
      vm.switch_to_page = this.switch_to_page;
      vm.cpu_load = 0;
      vm.cache_load = 0;
      vm.flow_type = "fwrite_mb";
      vm.mem_load = 0;
      vm.tabletitle = this.device.name;
      vm.$watch("cpu_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("cache_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#cache-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.$watch("mem_load", (function(_this) {
        return function(nval, oval) {
          var _base;
          if (_this.has_rendered) {
            if (typeof (_base = $("#mem-load").data("easyPieChart")).update === "function") {
              _base.update(nval);
            }
          }
        };
      })(this));
      vm.fattr_journal_status = fattr.journal_status;
      vm.journal = this.subitems_log();
      vm.journal_info = this.subitems_info();
      vm.journal_warning = this.subitems_warning();
      vm.journal_critical = this.subitems_critical();
      vm.rendered = this.rendered;
      vm.fattr_monitor_status = fattr.monitor_status;
      return vm.fattr_view_status_fixed = fattr.view_status_fixed;
    };

    CentralServerDetailPage.prototype.rendered = function() {
      var $scroller1, $scroller2, $scroller3, $scroller4, e, opt1, opt2, opt3, _base, _base1, _base2;
      CentralServerDetailPage.__super__.rendered.call(this);
      opt1 = {
        animate: 1000,
        size: 100,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(87, 199, 212)",
        trackColor: 'rgba(87, 199, 212,0.1)',
        scaleColor: false
      };
      opt2 = {
        animate: 1000,
        size: 100,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(98, 168, 234)",
        trackColor: 'rgba(98, 168, 234,0.1)',
        scaleColor: false
      };
      opt3 = {
        animate: 1000,
        size: 100,
        lineWidth: 5,
        lineCap: "butt",
        barColor: "rgb(146, 109, 222)",
        trackColor: 'rgba(146, 109, 222,0.1)',
        scaleColor: false
      };
      $("#cpu-load").easyPieChart(opt1);
      if (typeof (_base = $("#cpu-load").data("easyPieChart")).update === "function") {
        _base.update(this.vm.cpu_load);
      }
      $("#cache-load").easyPieChart(opt2);
      if (typeof (_base1 = $("#cache-load").data("easyPieChart")).update === "function") {
        _base1.update(this.vm.cache_load);
      }
      $("#mem-load").easyPieChart(opt3);
      if (typeof (_base2 = $("#mem-load").data("easyPieChart")).update === "function") {
        _base2.update(this.vm.mem_load);
      }
      this.data_table1 = $("#log-table1").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table2 = $("#log-table2").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table3 = $("#log-table3").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      this.data_table4 = $("#log-table4").dataTable(dtable_opt({
        retrieve: true,
        bSort: false,
        scrollX: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      $(".dataTables_length select").addClass("m-wrap small");
      $scroller1 = $("#journals-scroller-1");
      $scroller2 = $("#journals-scroller-2");
      $scroller3 = $("#journals-scroller-3");
      $scroller4 = $("#journals-scroller-4");
      $scroller1.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller1.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller2.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller2.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller3.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller3.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller4.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller4.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      try {
        return this.plot_flow_in(this.sd.stats.items, this.device.name);
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralServerDetailPage.prototype.subitems_log = function() {
      var arrays, error, i, t, _i, _j, _len, _len1, _ref;
      try {
        arrays = [];
        _ref = this.sd.machinedetails.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.uuid === this.message) {
            arrays = i.journals;
          }
        }
        for (_j = 0, _len1 = arrays.length; _j < _len1; _j++) {
          t = arrays[_j];
          t.created = t.created.replace("-", "/").replace("-", "/").replace("T", "-").replace("+08:00", "");
        }
        return arrays.reverse();
      } catch (_error) {
        error = _error;
        return [];
      }
    };

    CentralServerDetailPage.prototype.subitems_info = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems_log();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'info') {
          info.push(i);
        }
      }
      return info;
    };

    CentralServerDetailPage.prototype.subitems_warning = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems_log();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'warning') {
          info.push(i);
        }
      }
      return info;
    };

    CentralServerDetailPage.prototype.subitems_critical = function() {
      var i, info, _i, _len, _ref;
      info = [];
      _ref = this.subitems_log();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.level === 'critical') {
          info.push(i);
        }
      }
      return info;
    };

    CentralServerDetailPage.prototype.sparkline_stats = function(system, temp, cap) {
      var arm;
      arm = {
        chart: {
          type: 'column'
        },
        title: {
          text: '',
          verticalAlign: "bottom",
          style: {
            color: '#000',
            fontFamily: 'Microsoft YaHei',
            fontSize: 16
          }
        },
        subtitle: {
          text: ''
        },
        xAxis: {
          type: 'category',
          gridLineColor: '#FFF',
          tickColor: '#FFF',
          labels: {
            enabled: false,
            rotation: -45,
            style: {
              fontSize: '13px',
              fontFamily: 'Verdana, sans-serif'
            }
          }
        },
        yAxis: {
          gridLineColor: '#FFF',
          min: 0,
          title: {
            text: ''
          },
          labels: {
            enabled: false
          }
        },
        credits: {
          enabled: false
        },
        exporting: {
          enabled: false
        },
        legend: {
          enabled: false
        },
        tooltip: {
          pointFormat: '<b>{point.y:.1f}</b>'
        },
        plotOptions: {
          column: {
            animation: false,
            pointPadding: 0.01,
            groupPadding: 0.01,
            borderWidth: 0.01,
            shadow: false,
            pointWidth: 7
          }
        },
        series: [
          {
            name: 'Population'
          }
        ]
      };
      $('#sparkline_bar1').highcharts(Highcharts.merge(arm, {
        title: {
          text: '处理器'
        },
        plotOptions: {
          column: {
            color: '#35aa47'
          }
        },
        series: [
          {
            data: [['Lima', 8.9], ['Karachi', 14.0], ['Jakarta', 10.0], ['Kinshasa', 9.3], ['Tianjin', 9.3], ['Tokyo', 9.0], ['Cairo', 8.9], ['Shanghai', 23.7], ['Lagos', 16.1], ['Instanbul', 14.2], ['Dhaka', 8.9], ['Mexico City', 8.9]]
          }
        ]
      }));
      $('#sparkline_bar2').highcharts(Highcharts.merge(arm, {
        title: {
          text: '系统空间'
        },
        plotOptions: {
          column: {
            color: '#ffb848'
          }
        },
        series: [
          {
            data: [['Shanghai', 23.7], ['Lagos', 16.1], ['Instanbul', 14.2], ['Dhaka', 8.9], ['Mexico City', 8.9], ['Lima', 8.9], ['Karachi', 14.0], ['Jakarta', 10.0], ['Kinshasa', 9.3], ['Tianjin', 9.3], ['Tokyo', 9.0], ['Cairo', 8.9]]
          }
        ]
      }));
      return $('#sparkline_bar3').highcharts(Highcharts.merge(arm, {
        title: {
          text: '内存'
        },
        plotOptions: {
          column: {
            color: '#e7505a'
          }
        },
        series: [
          {
            data: [['Lima', 8.9], ['Karachi', 14.0], ['Jakarta', 10.0], ['Tokyo', 9.0], ['Cairo', 8.9], ['Shanghai', 23.7], ['Lagos', 16.1], ['Instanbul', 14.2], ['Kinshasa', 9.3], ['Tianjin', 9.3], ['Dhaka', 8.9], ['Mexico City', 8.9]]
          }
        ]
      }));
    };

    CentralServerDetailPage.prototype.subitems = function() {
      return [];
    };

    CentralServerDetailPage.prototype.refresh_flow = function() {
      var e, i, _i, _len, _ref, _results;
      try {
        _ref = this.sd.stats.items[this.sd.stats.items.length - 1].exports;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.ip === this.device.name) {
            this.plot_flow_in(i.info);
            _results.push(this.plot_flow_out(i.info));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralServerDetailPage.prototype.refresh = function() {
      var e, i, _i, _len, _ref, _results;
      try {
        _ref = this.sd.stats.items[this.sd.stats.items.length - 1].exports;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.ip === this.device.name) {
            this.vm.cpu_load = i.info[i.info.length - 1].cpu;
            this.vm.mem_load = i.info[i.info.length - 1].mem;
            _results.push(this.vm.cache_load = i.info[i.info.length - 1].df[0].used_per);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CentralServerDetailPage.prototype.refresh_pie = function(sd) {
      return $(function () {
            var gaugeOptions = {
                chart: {
                    type: 'gauge',
                    plotBackgroundColor: null,
                    plotBackgroundImage: null,
                    plotBorderWidth: 0,
                    plotShadow: false
                },
                exporting: {
                    enabled: false
                },
                credits: {
                    enabled:false
                },
                title: {
                    style:{
                        fontWeight:'bold',
                        fontSize:19,
                        color:'#000'
                    }
                },
                pane: {
                    startAngle: -150,
                    endAngle: 150,
                    background: [{
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#FFF'],
                                [1, '#333']
                            ]
                        },
                        borderWidth: 0,
                        outerRadius: '109%'
                    }, {
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#333'],
                                [1, '#FFF']
                            ]
                        },
                        borderWidth: 1,
                        outerRadius: '107%'
                    }, {
                        // default background
                    }, {
                        backgroundColor: '#DDD',
                        borderWidth: 0,
                        outerRadius: '105%',
                        innerRadius: '103%'
                    }]
                },
                // the value axis
                yAxis: {
                    min: 0,
                    max: 100,
                    minorTickInterval: 'auto',
                    minorTickWidth: 1,
                    minorTickLength: 10,
                    minorTickPosition: 'inside',
                    minorTickColor: '#666',
                    tickPixelInterval: 30,
                    tickWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 10,
                    tickColor: '#666',
                    labels: {
                        step: 2,
                        rotation: 'auto'
                    },
                    title: {
                        text: '%'
                    },
                    plotBands: [{
                        from: 0,
                        to: 120,
                        color: '#55BF3B' // green
                    }, {
                        from: 120,
                        to: 160,
                        color: '#DDDF0D' // yellow
                    }, {
                        from: 160,
                        to: 200,
                        color: '#DF5353' // red
                    }]
                }
            };
            $('#container_cpu').highcharts(Highcharts.merge(gaugeOptions, {
                    title: {
                        text:'处理器'
                    },
                    series: [{
                        name: '处理器',
                        data: [0],
                        tooltip: {
                            valueSuffix: '%'
                        }
                    }]
                }));
                
            $('#container_cache').highcharts(Highcharts.merge(gaugeOptions, {
                    title: {
                        text:'缓存'
                    },
                    series: [{
                        name: '缓存',
                        data: [0],
                        tooltip: {
                            valueSuffix: '%'
                        }
                    }]
                }));
                
            $('#container_mem').highcharts(Highcharts.merge(gaugeOptions, {
                    title: {
                        text:'内存'
                    },
                    series: [{
                        name: '内存',
                        data: [0],
                        tooltip: {
                            valueSuffix: '%'
                        }
                    }]
                }));
            setInterval(function () {
                // cpu
                var latest = sd.stats.items[sd.stats.items.length-1];
                var cpu_load  = parseInt(latest.cpu);
                var cache_load  = parseInt(latest.cache);
                var mem_load = parseInt(latest.mem);
                
                var chart = $('#container_cpu').highcharts(),
                    point,
                    newVal,
                    inc;
                if (chart) {
                    point = chart.series[0].points[0];
                    point.update(cpu_load);
                }
                
                // cache
                chart = $('#container_cache').highcharts();
                if (chart) {
                    point = chart.series[0].points[0];
                    point.update(cache_load);
                }
                
                //mem
                chart = $('#container_mem').highcharts();
                if (chart) {
                    point = chart.series[0].points[0];
                    point.update(mem_load);
                }
            }, 2000);
        });
    };

    CentralServerDetailPage.prototype.plot_flow_in = function(yaxis, name) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_in', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'write_mb';
                                    var type2 = 'read_mb';
                                    var x = (new Date()).getTime(); // current time
                                    var y1 = 0;
                                    var y2 = 0;
                                    for (var i=0;i< yaxis[yaxis.length - 1].exports.length;i++){
                                        if( yaxis[yaxis.length - 1].exports[i].ip == name){
                                            y1 = yaxis[yaxis.length - 1].exports[i].info[0][type1];
                                            y2 = yaxis[yaxis.length - 1].exports[i].info[0][type2];
                                        }
                                    };
                                    var random = Math.random();
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000',
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                //colors:["rgba(227,91,90,0.4)","rgba(227,91,243,0.1)"],
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        //animation:false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        fillOpacity: 0.2,
                        fillColor:"rgba(227,91,90,0.4)",
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 5,
                            lineWidth:2,
                            lineColor:"#fff",
                            fillColor:"rgba(255,120,120,0.7)",
                            states: {
                                hover: {
                                    enabled: true,
                                    fillColor:"rgb(227,91,90)"
                                }
                            }
                        },
                        lineWidth: 2,
                        lineColor:"rgb(227,91,90)"
                    }
                },
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#net_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#net_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    CentralServerDetailPage.prototype.plot_flow_out = function(yaxis) {
      return $(document).ready(function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = Highcharts.chart('flow_stats_out', {
                chart: {
                    type: 'areaspline',
                    //animation:false,
                    animation: Highcharts.svg, // don't animate in old IE
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1,
                    //backgroundColor:"rgb(250, 250, 250)",
                    events: {
                        load: function () {
                            var series1 = this.series[0];
                            var series2 = this.series[1];
                            setInterval(function () {
                                try{
                                    var type1 = 'write_vol';
                                    var type2 = 'read_vol';
                                    var random = Math.random();
                                    var x = (new Date()).getTime(), // current time
                                        y1 = yaxis[yaxis.length - 1][type1];
                                        y2 = yaxis[yaxis.length - 1][type2];
                                    series1.addPoint([x, y1 + random], true, true);
                                    series2.addPoint([x, y2 + random], true, true);
                                }
                                catch(e){
                                    console.log(e);
                                }
                            }, 3000);
                            series2.hide();
                        }
                    }
                },
                title: {
                    text: ''
                },
                xAxis: {
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    maxPadding: 2,
                    tickAmount: 4,
                    min:-1,
                    title: {
                        text: ''
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                credits: {
                    enabled:false
                },
                legend: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        //animation:false,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        fillOpacity: 0.2,
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            radius: 4.5,
                            fillColor:"rgb(143, 208, 253)",
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        lineWidth: 2
                    }
                },
                colors:["rgb(115, 172, 240)","rgb(115, 172, 240)"],
                series: [{
                    name: '写流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                },{
                    name: '读流量',
                    data: (function () {
                        // generate an array of random data
                        try{
                            var data = [],
                                time = (new Date()).getTime(),
                                i;
                            for (i = -9; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: Math.random()
                                });
                            }
                            return data;
                        }
                        catch(e){
                            console.log(e);
                        }
                    }())
                }]
            });
            $('#vol_write').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.show();
                series2.hide();
            });
            $('#vol_read').click(function () {
                var series1 = chart.series[0];
                var series2 = chart.series[1];
                series1.hide();
                series2.show();
            });
        });
    };

    return CentralServerDetailPage;

  })(Page);

  CentralServerlistPage = (function(_super) {
    __extends(CentralServerlistPage, _super);

    function CentralServerlistPage(sd) {
      this.sd = sd;
      this.check = __bind(this.check, this);
      this.start = __bind(this.start, this);
      this.unset = __bind(this.unset, this);
      this.expand = __bind(this.expand, this);
      this.create_mysql = __bind(this.create_mysql, this);
      this.delete_record = __bind(this.delete_record, this);
      this.detail_html = __bind(this.detail_html, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralServerlistPage.__super__.constructor.call(this, "centralpage-server-list", "html/centralserverlistpage.html");
      $(this.sd.clouds).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.devices = _this.subitems();
        };
      })(this));
      table_update_listener(this.sd.clouds, "#server-table", (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.devices = _this.subitems();
          }
        };
      })(this));
    }

    CentralServerlistPage.prototype.define_vm = function(vm) {
      vm.devices = this.subitems();
      vm.lang = lang.central_server_list;
      vm.create_mysql = this.create_mysql;
      vm.check = this.check;
      vm.unset = this.unset;
      vm.rendered = this.rendered;
      vm.fattr_server_status = fattr.server_status;
      vm.fattr_server_health = fattr.server_health;
      vm.all_checked = false;
      vm.delete_record = this.delete_record;
      vm.detail = this.detail;
      vm.expand = this.expand;
      vm.start = this.start;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.devices;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralServerlistPage.prototype.rendered = function() {
      CentralServerlistPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      this.vm.devices = this.subitems();
      this.data_table = $("#server-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    CentralServerlistPage.prototype.subitems = function() {
      var arrays, i, sub, _i, _len;
      arrays = subitems(this.sd.clouds.items, {
        id: "",
        uuid: "",
        session: "",
        ip: "",
        created: "",
        checked: false,
        status: "",
        version: "",
        devtype: "",
        size: "",
        detail_closed: true,
        "export": ""
      });
      sub = [];
      for (_i = 0, _len = arrays.length; _i < _len; _i++) {
        i = arrays[_i];
        if (i.devtype === 'export') {
          i.name = '服务器';
          i.id = i.uuid;
          sub.push(i);
        }
      }
      return sub;
    };

    CentralServerlistPage.prototype.detail_html = function(server) {
      var html, i, o, vm, _i, _len, _ref;
      html = avalon_templ(server.id, "html/server_detail_row.html");
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.uuid === server.id) {
          o = i;
        }
      }
      vm = avalon.define(server.id, (function(_this) {
        return function(vm) {
          vm.stores = subitems(_this.sd.server_stores(o), {
            ip: "",
            node: "",
            location: ""
          });
          return vm.lang = lang.central_server_list;
        };
      })(this));
      return [html, vm];
    };

    CentralServerlistPage.prototype.delete_record = function() {
      var deleted, r;
      deleted = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.devices;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.checked) {
            _results.push($.extend({}, r.$model));
          }
        }
        return _results;
      }).call(this);
      if (deleted.length !== 0) {
        return (new CentralRecordDeleteModal(this.sd, this, deleted)).attach();
      } else {
        return (new MessageModal(this.vm.lang.delete_error)).attach();
      }
    };

    CentralServerlistPage.prototype.create_mysql = function() {
      return (new CentralCreateServerModal(this.sd, this)).attach();
    };

    CentralServerlistPage.prototype.expand = function(ip) {
      return (new CentralExpandModal(this.sd, this, ip)).attach();
    };

    CentralServerlistPage.prototype.unset = function(name, ip) {
      return (new ConfirmModal(this.vm.lang.stop, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).rozostop("export", ip);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            (new MessageModal(_this.vm.lang.stop_success)).attach();
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    CentralServerlistPage.prototype.start = function(ip) {
      return (new CentralStartModal(this.sd, this, ip)).attach();
    };

    CentralServerlistPage.prototype.check = function(ip, name) {
      var tmp;
      tmp = ['mysql', 'mongo', 'gateway', 'fileserver', 'web'];
      if (__indexOf.call(tmp, name) >= 0) {
        return (new ConfirmModal(lang.central_mysql.check, (function(_this) {
          return function() {
            var chain;
            _this.frozen();
            chain = new Chain;
            chain.chain(function() {
              return (new MachineRest(_this.sd.host)).check(ip, name);
            });
            chain.chain(_this.sd.update("all"));
            return show_chain_progress(chain).done(function() {
              (new MessageModal(lang.central_mysql.check_success)).attach();
              return _this.attach();
            });
          };
        })(this))).attach();
      } else {
        return (new MessageModal(lang.central_mysql.check_error)).attach();
      }
    };

    return CentralServerlistPage;

  })(DetailTablePage);

  CentralStorelistPage = (function(_super) {
    __extends(CentralStorelistPage, _super);

    function CentralStorelistPage(sd) {
      this.sd = sd;
      this.check = __bind(this.check, this);
      this.unset = __bind(this.unset, this);
      this.pre = __bind(this.pre, this);
      this.mount = __bind(this.mount, this);
      this.expand = __bind(this.expand, this);
      this.create_mysql = __bind(this.create_mysql, this);
      this.delete_record = __bind(this.delete_record, this);
      this.detail_html = __bind(this.detail_html, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralStorelistPage.__super__.constructor.call(this, "centralpage-store-list", "html/centralstorelistpage.html");
      $(this.sd.clouds).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.devices = _this.subitems();
        };
      })(this));
      table_update_listener(this.sd.clouds, "#store-table", (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.devices = _this.subitems();
          }
        };
      })(this));
    }

    CentralStorelistPage.prototype.define_vm = function(vm) {
      vm.devices = this.subitems();
      vm.lang = lang.central_store_list;
      vm.create_mysql = this.create_mysql;
      vm.check = this.check;
      vm.unset = this.unset;
      vm.pre = this.pre;
      vm.mount = this.mount;
      vm.rendered = this.rendered;
      vm.fattr_server_status = fattr.server_status;
      vm.fattr_server_health = fattr.server_health;
      vm.all_checked = false;
      vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.devices;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
      vm.delete_record = this.delete_record;
      vm.detail = this.detail;
      return vm.expand = this.expand;
    };

    CentralStorelistPage.prototype.rendered = function() {
      CentralStorelistPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      this.vm.devices = this.subitems();
      this.data_table = $("#store-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    CentralStorelistPage.prototype.subitems = function() {
      var arrays, i, sub, _i, _len;
      arrays = subitems(this.sd.clouds.items, {
        id: "",
        uuid: "",
        session: "",
        ip: "",
        created: "",
        checked: false,
        status: "",
        version: "",
        devtype: "",
        size: "",
        detail_closed: true,
        "export": ""
      });
      sub = [];
      for (_i = 0, _len = arrays.length; _i < _len; _i++) {
        i = arrays[_i];
        if (i.devtype === 'storage') {
          i.name = '存储';
          i.id = i.uuid;
          if (i["export"] === "") {
            i["export"] = '无';
          }
          sub.push(i);
        }
      }
      return sub;
    };

    CentralStorelistPage.prototype.detail_html = function(store) {
      var html, i, o, vm, _i, _len, _ref;
      html = avalon_templ(store.id, "html/store_detail_row.html");
      _ref = this.sd.clouds.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.uuid === store.id) {
          o = i;
        }
      }
      vm = avalon.define(store.id, (function(_this) {
        return function(vm) {
          vm.servers = subitems(_this.sd.store_servers(o), {
            ip: ""
          });
          return vm.lang = lang.central_store_list;
        };
      })(this));
      return [html, vm];
    };

    CentralStorelistPage.prototype.delete_record = function() {
      var deleted, r;
      deleted = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.devices;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.checked) {
            _results.push($.extend({}, r.$model));
          }
        }
        return _results;
      }).call(this);
      if (deleted.length !== 0) {
        return (new CentralRecordDeleteModal(this.sd, this, deleted)).attach();
      } else {
        return (new MessageModal(this.vm.lang.delete_error)).attach();
      }
    };

    CentralStorelistPage.prototype.create_mysql = function() {
      return (new CentralCreateStoreModal(this.sd, this)).attach();
    };

    CentralStorelistPage.prototype.expand = function(ip) {
      return (new CentralExpandModal(this.sd, this, ip)).attach();
    };

    CentralStorelistPage.prototype.mount = function(ip, name) {
      return (new ConfirmModal(this.vm.lang.mount, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).rozoset(name, ip, "");
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            (new MessageModal(_this.vm.lang.mount_success)).attach();
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    CentralStorelistPage.prototype.pre = function() {
      return (new CentralPreModal(this.sd, this)).attach();
    };

    CentralStorelistPage.prototype.unset = function(name, ip) {
      return (new ConfirmModal(this.vm.lang.stop, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).rozostop("storage", ip);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            (new MessageModal(_this.vm.lang.stop_success)).attach();
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    CentralStorelistPage.prototype.check = function(ip, name) {
      var tmp;
      tmp = ['mysql', 'mongo', 'gateway', 'fileserver', 'web'];
      if (__indexOf.call(tmp, name) >= 0) {
        return (new ConfirmModal(lang.central_mysql.check, (function(_this) {
          return function() {
            var chain;
            _this.frozen();
            chain = new Chain;
            chain.chain(function() {
              return (new MachineRest(_this.sd.host)).check(ip, name);
            });
            chain.chain(_this.sd.update("all"));
            return show_chain_progress(chain).done(function() {
              (new MessageModal(lang.central_mysql.check_success)).attach();
              return _this.attach();
            });
          };
        })(this))).attach();
      } else {
        return (new MessageModal(lang.central_mysql.check_error)).attach();
      }
    };

    return CentralStorelistPage;

  })(DetailTablePage);

  CentralClientlistPage = (function(_super) {
    __extends(CentralClientlistPage, _super);

    function CentralClientlistPage(sd) {
      this.sd = sd;
      this.check = __bind(this.check, this);
      this.unset = __bind(this.unset, this);
      this.pre = __bind(this.pre, this);
      this.start = __bind(this.start, this);
      this.create_mysql = __bind(this.create_mysql, this);
      this.delete_record = __bind(this.delete_record, this);
      this.subitems = __bind(this.subitems, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralClientlistPage.__super__.constructor.call(this, "centralpage-client-list", "html/centralclientlistpage.html");
      $(this.sd.clouds).on("updated", (function(_this) {
        return function(e, source) {
          return _this.vm.devices = _this.subitems();
        };
      })(this));
      table_update_listener(this.sd.clouds, "#client-table", (function(_this) {
        return function() {
          if (!_this.has_frozen) {
            return _this.vm.devices = _this.subitems();
          }
        };
      })(this));
    }

    CentralClientlistPage.prototype.define_vm = function(vm) {
      vm.devices = this.subitems();
      vm.lang = lang.central_client_list;
      vm.create_mysql = this.create_mysql;
      vm.check = this.check;
      vm.unset = this.unset;
      vm.start = this.start;
      vm.pre = this.pre;
      vm.rendered = this.rendered;
      vm.fattr_server_status = fattr.server_status;
      vm.fattr_server_health = fattr.server_health;
      vm.all_checked = false;
      vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.devices;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
      return vm.delete_record = this.delete_record;
    };

    CentralClientlistPage.prototype.rendered = function() {
      CentralClientlistPage.__super__.rendered.call(this);
      $('.tooltips').tooltip();
      if (!this.has_frozen) {
        this.vm.devices = this.subitems();
      }
      this.data_table = $("#client-table").dataTable(dtable_opt({
        retrieve: true
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    CentralClientlistPage.prototype.subitems = function() {
      var arrays, i, sub, _i, _len;
      arrays = subitems(this.sd.clouds.items, {
        id: "",
        uuid: "",
        session: "",
        ip: "",
        created: "",
        checked: false,
        status: "",
        version: "",
        devtype: "",
        size: "",
        detail_closed: true,
        "export": ""
      });
      sub = [];
      for (_i = 0, _len = arrays.length; _i < _len; _i++) {
        i = arrays[_i];
        if (i.devtype === 'client') {
          i.id = i.uuid;
          i.name = '客户端';
          sub.push(i);
        }
      }
      return sub;
    };

    CentralClientlistPage.prototype.delete_record = function() {
      var deleted, r;
      deleted = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.devices;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.checked) {
            _results.push($.extend({}, r.$model));
          }
        }
        return _results;
      }).call(this);
      if (deleted.length !== 0) {
        return (new CentralRecordDeleteModal(this.sd, this, deleted)).attach();
      } else {
        return (new MessageModal(this.vm.lang.delete_error)).attach();
      }
    };

    CentralClientlistPage.prototype.create_mysql = function() {
      return (new CentralCreateClientModal(this.sd, this)).attach();
    };

    CentralClientlistPage.prototype.start = function(ip) {
      return (new ConfirmModal(this.vm.lang.start, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).client(ip);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            (new MessageModal(_this.vm.lang.start_success)).attach();
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    CentralClientlistPage.prototype.pre = function() {
      return (new CentralPreModal(this.sd, this)).attach();
    };

    CentralClientlistPage.prototype.unset = function(name, ip) {
      return (new ConfirmModal(this.vm.lang.stop, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).rozostop('client', ip);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            (new MessageModal(_this.vm.lang.stop_success)).attach();
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    CentralClientlistPage.prototype.check = function(ip, name) {
      var tmp;
      tmp = ['mysql', 'mongo', 'gateway', 'fileserver', 'web'];
      if (__indexOf.call(tmp, name) >= 0) {
        return (new ConfirmModal(lang.central_mysql.check, (function(_this) {
          return function() {
            var chain;
            _this.frozen();
            chain = new Chain;
            chain.chain(function() {
              return (new MachineRest(_this.sd.host)).check(ip, name);
            });
            chain.chain(_this.sd.update("all"));
            return show_chain_progress(chain).done(function() {
              (new MessageModal(lang.central_mysql.check_success)).attach();
              return _this.attach();
            });
          };
        })(this))).attach();
      } else {
        return (new MessageModal(lang.central_mysql.check_error)).attach();
      }
    };

    return CentralClientlistPage;

  })(Page);

  CentralWarningPage = (function(_super) {
    __extends(CentralWarningPage, _super);

    function CentralWarningPage(sd) {
      this.sd = sd;
      this.change_email = __bind(this.change_email, this);
      this.change_value = __bind(this.change_value, this);
      this.removes = __bind(this.removes, this);
      this.add = __bind(this.add, this);
      this.subitems = __bind(this.subitems, this);
      this.subitems_email = __bind(this.subitems_email, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CentralWarningPage.__super__.constructor.call(this, "maintainpage-", "html/centralwarning.html");
      this.settings = new SettingsManager;
    }

    CentralWarningPage.prototype.define_vm = function(vm) {
      vm.lang = lang.central_warning;
      vm.diagnosis_url = "http://" + this.sd.host + "/api/diagnosis/all";
      vm.devices = this.subitems();
      vm.emails = this.subitems_email();
      vm.add = this.add;
      vm.change_value = this.change_value;
      vm.removes = this.removes;
      vm.change_email = this.change_email;
      vm.all_checked = false;
      return vm.$watch("all_checked", (function(_this) {
        return function() {
          var r, _i, _len, _ref, _results;
          _ref = vm.emails;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            r = _ref[_i];
            _results.push(r.checked = vm.all_checked);
          }
          return _results;
        };
      })(this));
    };

    CentralWarningPage.prototype.rendered = function() {
      CentralWarningPage.__super__.rendered.call(this);
      this.vm.devices = this.subitems();
      return this.vm.emails = this.subitems_email();
    };

    CentralWarningPage.prototype.subitems_email = function() {
      var i, tmp, _i, _len, _ref;
      tmp = [];
      _ref = this.sd.emails.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.checked = false;
        tmp.push(i);
      }
      return tmp;
    };

    CentralWarningPage.prototype.subitems = function() {
      var i, tmp, _i, _len, _ref;
      tmp = [];
      _ref = this.sd.warnings.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.bad = i.warning;
        if (i.type === "cpu") {
          i.chinese_type = "处理器";
        }
        if (i.type === "diskcap") {
          i.chinese_type = "磁盘容量";
        }
        if (i.type === "cache") {
          i.chinese_type = "缓存";
        }
        if (i.type === "mem") {
          i.chinese_type = "内存";
        }
        tmp.push(i);
      }
      return tmp;
    };

    CentralWarningPage.prototype.add = function() {
      return (new CentralAddEmailModal(this.sd, this)).attach();
    };

    CentralWarningPage.prototype.removes = function() {
      var deleted, r;
      deleted = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vm.emails;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.checked) {
            _results.push($.extend({}, r.$model));
          }
        }
        return _results;
      }).call(this);
      if (deleted.length !== 0) {
        return (new CentralEmailDeleteModal(this.sd, this, deleted)).attach();
      } else {
        return (new MessageModal(this.vm.lang.delete_error)).attach();
      }
    };

    CentralWarningPage.prototype.change_value = function(value_type) {
      return (new CentralChangeValueModal(this.sd, this, value_type)).attach();
    };

    CentralWarningPage.prototype.change_email = function(address, level, ttl) {
      return (new CentralChangeEmailModal(this.sd, this, address, level, ttl)).attach();
    };

    return CentralWarningPage;

  })(DetailTablePage);

  FaceQuickProPage = (function(_super) {
    __extends(FaceQuickProPage, _super);

    function FaceQuickProPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.process = __bind(this.process, this);
      this._upload = __bind(this._upload, this);
      this.webcam = __bind(this.webcam, this);
      this.face_track = __bind(this.face_track, this);
      this.getpic = __bind(this.getpic, this);
      this.show_stamp_new = __bind(this.show_stamp_new, this);
      this.show_stamp = __bind(this.show_stamp, this);
      this.compare = __bind(this.compare, this);
      this.check_remain = __bind(this.check_remain, this);
      this.show_tips = __bind(this.show_tips, this);
      this.get_card = __bind(this.get_card, this);
      this.set_time = __bind(this.set_time, this);
      this.auto_Interval = __bind(this.auto_Interval, this);
      this.retry_camera = __bind(this.retry_camera, this);
      this.initpage = __bind(this.initpage, this);
      this.nprocess = __bind(this.nprocess, this);
      this.retry_cameras = __bind(this.retry_cameras, this);
      this.face_tracking = __bind(this.face_tracking, this);
      this.spin = __bind(this.spin, this);
      this.chart_active = __bind(this.chart_active, this);
      this.grab_data = __bind(this.grab_data, this);
      this.count_day_amchart = __bind(this.count_day_amchart, this);
      this.day_chart = __bind(this.day_chart, this);
      this.count_day_highchart = __bind(this.count_day_highchart, this);
      this.datatable_init = __bind(this.datatable_init, this);
      this.remove_all = __bind(this.remove_all, this);
      this.ipcam_takesnap = __bind(this.ipcam_takesnap, this);
      this.ip_camera = __bind(this.ip_camera, this);
      this.init_ip_cam = __bind(this.init_ip_cam, this);
      this.check_cam_change = __bind(this.check_cam_change, this);
      this.change_cam = __bind(this.change_cam, this);
      this.change_cam_modal = __bind(this.change_cam_modal, this);
      this.refresh_page = __bind(this.refresh_page, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FaceQuickProPage.__super__.constructor.call(this, "facequickpropage-", "html/facequickpropage.html");
      this.dataurl = "";
      this.personal_id = "";
      this.person_msg = "";
      this.sayCheese = "";
      this.ip_camera_status = false;
      this.x1 = "";
      this.x2 = "";
      this.y1 = "";
      this.y2 = "";
      this.mode = "usb";
      this.source_cam = 'usb摄像头';
      $(this.sd).on("compareresult", (function(_this) {
        return function(e, result) {
          if (result.name === "compareResult") {
            return _this.show_stamp_new(result.confidence);
          }
        };
      })(this));
    }

    FaceQuickProPage.prototype.define_vm = function(vm) {
      var vm_show_compare;
      vm.lang = lang.facepage;
      vm.get_card = this.get_card;
      vm.compare = this.compare;
      vm.personName = "未对比";
      vm.sex = "未对比";
      vm.birthday = "未对比";
      vm.nation = "未对比";
      vm.personId = "未对比";
      vm.address = "未对比";
      vm.startDate = "未对比";
      vm.endDate = "未对比";
      vm.department = "未对比";
      vm.imgPath = "未对比";
      vm.show_card_result = false;
      vm.show_canvas = false;
      vm_show_compare = false;
      vm.show_loading = false;
      vm.show_cam = true;
      vm.checked = false;
      vm.upload_pic = this.upload_pic;
      vm.show_upload_canvas = false;
      vm.compare_result = "";
      vm.show_results = true;
      vm.next_action = "读卡";
      vm.camera_error = true;
      vm.retry_camera = this.retry_camera;
      vm.retry_cameras = this.retry_cameras;
      vm.show_cut = false;
      vm.switch_to_page = this.switch_to_page;
      vm.status = "未对比";
      vm.result = "未对比";
      vm.com = "0%";
      vm.show_img = true;
      vm.show_spin = false;
      vm.rendered = this.rendered;
      vm.show_retry = false;
      vm.remove_all = this.remove_all;
      vm.fattr_compare_status = fattr.compare_status;
      vm.show_tracking = false;
      vm.amount_compare = 0;
      vm.show_all = true;
      vm.options_cam = [
        {
          key: "usb摄像头",
          value: "usb"
        }, {
          key: "ip摄像头",
          value: "ip"
        }
      ];
      vm.change_cam = this.change_cam;
      vm.show_ip_cam = false;
      vm.change_cam_modal = this.change_cam_modal;
      return vm.source_cam = this.source_cam;
    };

    FaceQuickProPage.prototype.rendered = function() {
      var $scroller;
      FaceQuickProPage.__super__.rendered.call(this);
      new WOW().init();
      $('.hastip-facequickpro').poshytip({
        className: 'tip-twitter',
        showTimeout: 0,
        alignTo: 'target',
        alignX: 'center',
        offsetY: 5
      });
      $scroller = $("#journals-scroller-1");
      $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      this.webcam(this);
      this.vm.show_card_result = false;
      this.vm.show_canvas = false;
      this.vm.show_cam = true;
      this.vm.camera_error = true;
      this.vm.show_img = true;
      this.vm.show_loading = false;
      this.vm.show_spin = false;
      this.vm.show_retry = false;
      this.vm.show_tracking = false;
      this.vm.show_all = true;
      this.vm.show_ip_cam = false;
      this.vm.personName = "未对比";
      this.vm.sex = "未对比";
      this.vm.birthday = "未对比";
      this.vm.nation = "未对比";
      this.vm.personId = "未对比";
      this.vm.address = "未对比";
      this.vm.startDate = "未对比";
      this.vm.endDate = "未对比";
      this.vm.department = "未对比";
      this.vm.imgPath = "未对比";
      this.vm.status = "未对比";
      this.vm.result = "未对比";
      this.vm.com = "0%";
      this.vm.amount_compare = 0;
      this.vm.source_cam = 'usb摄像头';
      this.mode = 'usb';
      this.vm.show_upload_canvas = false;
      this.initpage(this);
      this.vm.compare_result = "";
      this.vm.show_results = true;
      this.vm.next_action = "读卡";
      $('#vedio').attr('style', 'position: absolute;left: 266px;top: 223px;');
      this.count_day_amchart(this, this.sd.pay.items);
      this.count_day_highchart(this, this.sd.pay.items);
      this.datatable_init(this);
      this.init_ip_cam();
      return this.refresh_page();
    };

    FaceQuickProPage.prototype.refresh_page = function() {
      if (compare_card.length) {
        compare_card.splice(0, compare_card.length);
      }
      if (compare_result.length) {
        return compare_result.splice(0, compare_result.length);
      }
    };

    FaceQuickProPage.prototype.change_cam_modal = function() {
      return (new FaceQuickChangeCam(this.sd, this, this.mode)).attach();
    };

    FaceQuickProPage.prototype.change_cam = function(selected) {
      this.mode = selected;
      this.check_cam_change(this.mode, this);
      if (this.mode === "ip") {
        this.source_cam = 'ip摄像头';
        this.vm.show_ip_cam = true;
        this.ip_camera();
        $("#face_ul").css("padding-top", "137px");
        $("#face_portlet").css("height", "333px");
        $("#face_no_result").css("padding-top", "120px");
      } else {
        this.source_cam = 'usb摄像头';
        this.vm.show_ip_cam = false;
        if (this.vm.show_img) {
          $("#face_ul").css("padding-top", "50px");
        } else {
          $("#face_ul").css("padding-top", "185px");
        }
        $("#face_portlet").css("height", "395px");
        $("#face_no_result").css("padding-top", "170px");
      }
      return this.vm.source_cam = this.source_cam;
    };

    FaceQuickProPage.prototype.check_cam_change = function(mode, page) {
      var cam_url, i, _i, _len, _results;
      if (mode === "usb") {
        if (this.vm.camera_error) {
          _results = [];
          for (_i = 0, _len = compare_Interval.length; _i < _len; _i++) {
            i = compare_Interval[_i];
            _results.push(window.clearInterval(i));
          }
          return _results;
        } else {
          return this.auto_Interval();
        }
      } else {
        cam_url = 'http://localhost:7788/cam';
        return $.ajax({
          type: 'get',
          url: cam_url,
          error: function(e) {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = compare_Interval.length; _j < _len1; _j++) {
              i = compare_Interval[_j];
              _results1.push(window.clearInterval(i));
            }
            return _results1;
          },
          success: function(e) {
            var ip_video;
            ip_video = document.getElementById("videoplayer");
            ip_video.src = cam_url;
            return page.auto_Interval();
          }
        });
      }
    };

    FaceQuickProPage.prototype.init_ip_cam = function() {
      var cam_url, ip_video;
      ip_video = document.getElementById("videoplayer");
      cam_url = 'http://localhost:7788/cam';
      return ip_video.src = cam_url;
    };

    FaceQuickProPage.prototype.ip_camera = function() {
      return this.auto_Interval();
    };

    FaceQuickProPage.prototype.ipcam_takesnap = function() {
      var cxt, dataURL, facecut, filename, imgData, video;
      video = document.getElementById("videoplayer");
      facecut = document.getElementById('mirror');
      cxt = facecut.getContext("2d");
      cxt.drawImage(video, 300, 80, 820, 640, 0, 0, 164, 128);
      imgData = facecut.toDataURL('png');
      dataURL = facecut.toDataURL("image/jpg");
      filename = this.sd.register.items["account"] + "_" + this.personal_id + "_own.jpg";
      this._upload(this, dataURL, filename, this.sd.host, true);
      this.vm.show_canvas = true;
      return this.vm.show_img = false;
    };

    FaceQuickProPage.prototype.remove_all = function() {
      var chain;
      this.frozen();
      chain = new Chain;
      chain.chain(this.sd.update("all"));
      return show_chain_progress(chain).done((function(_this) {
        return function() {
          _this.attach();
          if ($("#vedio").length > 0) {
            return _this.auto_Interval();
          }
        };
      })(this));
    };

    FaceQuickProPage.prototype.datatable_init = function(page) {
      return $(function() {
            var table = $("#log-table1").DataTable(dtable_opt({
                /*retrieve: true,
                bSort: false,
                scrollX: true,*/
                destroy:true,
                bProcessing: true,
                bServerSide: true,
                sAjaxSource: "http://" + page.sd.host + "/api/searchRecord",
                aoColumnDefs: [
                  {
                    "aTargets": [0],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                        return  "<img src=http://" + page.sd.host + "/images" + full[0].replace(" ", "%20") + " style='height: 20px;width: 20px;'>";
                    }
                  }, {
                    "aTargets": [1],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                        return  "<img src=http://" + page.sd.host + "/images" + full[1].replace(" ", "%20") + " style='height: 20px;width: 20px;'>";
                    }
                  }
                ],
                fnServerData: function(sSource, aoData, fnCallback) {
                  aoData.push({
                    "name": "account",
                    "value": page.sd.register.items["account"]
                  });
                  return $.ajax({
                    "type": 'post',
                    "url": sSource,
                    "dataType": "json",
                    "data": aoData,
                    "success": function(resp) {
                      //page.count_day(page,page.sd.pay.items);
                      try{
                        return fnCallback(resp);
                       }catch(e){
                        return
                       }
                    },
                    "error": function(e) {
                      return console.log('error');
                    }
                  });
                }
            }));
            $(".dataTables_filter input").addClass("m-wrap small");
            $(".dataTables_length select").addClass("m-wrap small");

            $('#log-table1 tbody').on( 'click', 'a', function () {
                var data = table.row( $(this).parents('tr') ).data();
                page.record_detail(data[ 3 ]);
            });
        });
    };

    FaceQuickProPage.prototype.count_day_highchart = function(page, items) {
      return $(function () { 
            var myDate = new Date(); //获取今天日期
            myDate.setDate(myDate.getDate() - 9);
            var dateArray = []; 
            var dateTemp; 
            var total_count = {}
            var flag = 1; 
            var total = [];
            page.vm.amount_compare = 0;
            for (var i = 0; i <= 9; i++) {
                dateTemp = (myDate.getMonth()+1)+"月"+myDate.getDate();
                dateArray.push(dateTemp);
                myDate.setDate(myDate.getDate() + flag);
            }
            //var total = [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1];

            for (var i = 0; i < dateArray.length; i++) {
                total_count[dateArray[i]] = 0;
            }

            Array.prototype.Exists=function(v){
                var b=false;
                for(var i=0;i<this.length;i++){
                    if(this[i]==v){
                        b=true;
                        break;
                    }
                }
                return b;
            }

            for (var i = 0; i < items.length; i++) {
                var strdate = parseInt(items[i].created.split(" ")[0].split("-")[1]) + '月' + parseInt(items[i].created.split(" ")[0].split("-")[2]);
                if ( dateArray.Exists(strdate)) {
                    total_count[strdate] = total_count[strdate] + 1;
                }
            }

            for (var i = 0; i < dateArray.length; i++) {
                page.vm.amount_compare = page.vm.amount_compare + total_count[dateArray[i]];
                total.push(total_count[dateArray[i]]);
            }
            page.day_chart(dateArray,total);
        });
    };

    FaceQuickProPage.prototype.day_chart = function(time, total) {
      return $(function () {
            $('#day_chart').highcharts({
                chart: {
                    type: 'areaspline',
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1
                },
                title: {
                    text: ''
                },
                subtitle: {
                    text: ''
                },
                exporting: {
                    enabled: false
                },
                credits: {
                    enabled:false
                },
                tooltip: {
                    formatter: function () {
                        return this.x + '<br/>' +
                               '<b>' + this.series.name + ':' +'</b>' + Highcharts.numberFormat(this.y, 0);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8,
                        fontFamily:"Microsoft Yahei"
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                xAxis: {
                    categories: time,
                    labels:{
                        style: { 
                            "fontFamily": "Microsoft Yahei" 
                        }
                    }
                },
                yAxis: {
                    title: {
                        text: ''
                    },
                    min:-1,
                    tickColor:"rgba(0,0,0,0)",
                    tickWidth: 0,
                    gridLineColor: 'rgba(0,0,0,0)',
                    labels:{
                        enabled:false
                    }
                },
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        fillOpacity: 0.2,
                        marker: {
                            enabled: true,
                            symbol: 'circle',
                            radius: 5.0,
                            lineWidth: 3,
                            lineColor: "#1796f9",
                            fillColor:"#fff",
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        lineWidth: 2
                    }
                },
                series: [{
                    name: '对比次数',
                    data: total,
                    showInLegend: false
                }]
            });
        });
    };

    FaceQuickProPage.prototype.count_day_amchart = function(page, items) {
      return $(function () {
            function Appendzero(obj)  
            {  
                if(obj<10) return "0" +""+ obj;  
                else return obj;  
            }

            var myDate = new Date(); //获取今天日期

            myDate.setDate(myDate.getDate() - 9);
            var dateArray = []; 
            var dateTemp; 
            var total_count = {};
            var average_count = {};
            var flag = 1; 
            var total = [];
            for (var i = 0; i <= 9; i++) {
                dateTemp = (myDate.getFullYear() + '-' + Appendzero(myDate.getMonth()+1)) + "-" + Appendzero(myDate.getDate());
                dateArray.push(dateTemp);
                myDate.setDate(myDate.getDate() + flag);
            }
            for (var i = 0; i < dateArray.length; i++) {
                total_count[dateArray[i]] = 0;
                average_count[dateArray[i]] = 0;
            }

            Array.prototype.Exists=function(v){
                var b=false;
                for(var i=0;i<this.length;i++){
                    if(this[i]==v){
                        b=true;
                        break;
                    }
                }
                return b;
            }

            for (var i = 0; i < items.length; i++) {
                var strdate = items[i].created.split(" ")[0].split("-")[0] + '-' + items[i].created.split(" ")[0].split("-")[1] + '-' + items[i].created.split(" ")[0].split("-")[2];
                average_count[items[i].created.split(" ")[0]] = average_count[items[i].created.split(" ")[0]] + parseInt(items[i].confidence)
                if ( dateArray.Exists(strdate)) {
                    total_count[strdate] = total_count[strdate] + 1;
                }
            }

            for (var i = 0; i < dateArray.length; i++) {
                total.push(total_count[dateArray[i]]);
                if (total_count[dateArray[i]] !== 0) {
                    average_count[dateArray[i]] = parseInt(average_count[dateArray[i]] / total_count[dateArray[i]]);
                }
            }
            page.grab_data(dateArray,total,average_count)
        });
    };

    FaceQuickProPage.prototype.grab_data = function(dateArray, total, average_count) {
      var chartdata, chartdata1, i, _i, _ref;
      chartdata1 = [
        {
          "date": "2012-01-01",
          "rate": 227,
          "townName": "New York",
          "townName2": "New York",
          "townSize": 25,
          "average": 40
        }, {
          "date": "2012-01-02",
          "rate": 371,
          "townName": "Washington",
          "townSize": 14,
          "average": 38
        }, {
          "date": "2012-01-03",
          "rate": 433,
          "townName": "Wilmington",
          "townSize": 6,
          "average": 34
        }, {
          "date": "2012-01-04",
          "rate": 345,
          "townName": "Jacksonville",
          "townSize": 7,
          "average": 30
        }, {
          "date": "2012-01-05",
          "rate": 480,
          "townName": "Miami",
          "townName2": "Miami",
          "townSize": 10,
          "average": 25
        }, {
          "date": "2012-01-06",
          "rate": 386,
          "townName": "Tallahassee",
          "townSize": 7,
          "average": 30
        }, {
          "date": "2012-01-07",
          "rate": 348,
          "townName": "New Orleans",
          "townSize": 10,
          "average": 29
        }, {
          "date": "2012-01-08",
          "rate": 238,
          "townName": "Houston",
          "townName2": "Houston",
          "townSize": 16,
          "average": 29
        }, {
          "date": "2012-01-09",
          "rate": 218,
          "townName": "Dalas",
          "townSize": 17,
          "average": 32
        }, {
          "date": "2012-01-10",
          "rate": 349,
          "townName": "Oklahoma City",
          "townSize": 11,
          "average": 35
        }
      ];
      chartdata = [];
      for (i = _i = 0, _ref = dateArray.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        chartdata.push({
          "date": dateArray[i],
          "rate": total[i],
          "townName": "",
          "townSize": 10,
          "average": average_count[dateArray[i]]
        });
      }
      return this.chart_active(chartdata);
    };

    FaceQuickProPage.prototype.chart_active = function(chartData) {
      return $(function() {
            /*var chartData = [ {
              "date": "2012-01-01",
              "distance": 227,
              "townName": "New York",
              "townName2": "New York",
              "townSize": 25,
              "latitude": 40
            }, {
              "date": "2012-01-02",
              "distance": 371,
              "townName": "Washington",
              "townSize": 14,
              "latitude": 38
            }, {
              "date": "2012-01-03",
              "distance": 433,
              "townName": "Wilmington",
              "townSize": 6,
              "latitude": 34
            }, {
              "date": "2012-01-04",
              "distance": 345,
              "townName": "Jacksonville",
              "townSize": 7,
              "latitude": 30
            }, {
              "date": "2012-01-05",
              "distance": 480,
              "townName": "Miami",
              "townName2": "Miami",
              "townSize": 10,
              "latitude": 25
            }, {
              "date": "2012-01-06",
              "distance": 386,
              "townName": "Tallahassee",
              "townSize": 7,
              "latitude": 30
            }, {
              "date": "2012-01-07",
              "distance": 348,
              "townName": "New Orleans",
              "townSize": 10,
              "latitude": 29
            }, {
              "date": "2012-01-08",
              "distance": 238,
              "townName": "Houston",
              "townName2": "Houston",
              "townSize": 16,
              "latitude": 29
            }, {
              "date": "2012-01-09",
              "distance": 218,
              "townName": "Dalas",
              "townSize": 17,
              "latitude": 32
            }, {
              "date": "2012-01-10",
              "distance": 349,
              "townName": "Oklahoma City",
              "townSize": 11,
              "latitude": 35
            }, {
              "date": "2012-01-11",
              "distance": 603,
              "townName": "Kansas City",
              "townSize": 10,
              "latitude": 39
            }, {
              "date": "2012-01-12",
              "distance": 534,
              "townName": "Denver",
              "townName2": "Denver",
              "townSize": 18,
              "latitude": 39
            }, {
              "date": "2012-01-13",
              "townName": "Salt Lake City",
              "townSize": 12,
              "distance": 425,
              "latitude": 40,
              "alpha": 0.4
            }, {
              "date": "2012-01-14",
              "latitude": 36,
              "distance": 425,
              "townName": "Las Vegas",
              "townName2": "Las Vegas",
              "bulletClass": "lastBullet"
            }];*/
            var chart = AmCharts.makeChart( "amchart", {

              "type": "serial",
              "theme": "light",
              "fontFamily":"Microsoft YaHei",
              
              "dataDateFormat": "YYYY-MM-DD",
              "dataProvider": chartData,

              "addClassNames": true,
              "startDuration": 1,
              //"color": "#FFFFFF",
              "marginLeft": 0,

              "categoryField": "date",
              "categoryAxis": {
                "parseDates": true,
                "minPeriod": "DD",
                "autoGridCount": false,
                "gridCount": 50,
                "gridAlpha": 0.1,
                "gridColor": "#FFFFFF",
                "axisColor": "#555555",
                "dateFormats": [ {
                  "period": 'DD',
                  "format": 'DD'
                }, {
                  "period": 'WW',
                  "format": 'MMM DD'
                }, {
                  "period": 'MM',
                  "format": 'MMM'
                }, {
                  "period": 'YYYY',
                  "format": 'YYYY'
                } ]
              },

              "valueAxes": [ {
                "id": "a1",
                "title": "对比次数",
                "gridAlpha": 0,
                "axisAlpha": 0
              }, {
                "id": "a2",
                "position": "right",
                "gridAlpha": 0,
                "axisAlpha": 0,
                "labelsEnabled": false
              }],
              "graphs": [ {
                "id": "g1",
                "valueField": "rate",
                "title": "对比次数",
                "type": "column",
                "fillAlphas": 0.9,
                "valueAxis": "a1",
                "balloonText": "[[value]] 次",
                "legendValueText": "[[value]] 次",
                "legendPeriodValueText": "总共: [[value.sum]] 次",
                "lineColor": "rgba(124, 181, 236,0.5)",
                "alphaField": "alpha"
              }, {
                "id": "g2",
                "valueField": "average",
                "classNameField": "bulletClass",
                "title": "平均相似度",
                "type": "line",
                "valueAxis": "a2",
                "lineColor": "rgb(137, 196, 244)",
                "lineThickness": 1,
                "legendValueText": "[[value]] %",
                "descriptionField": "townName",
                "bullet": "round",
                "bulletSizeField": "townSize",
                "bulletBorderColor": "rgb(23, 150, 249)",
                "bulletBorderAlpha": 1,
                "bulletBorderThickness": 3,
                "bulletColor": "rgba(255,255,255,1)",
                "labelText": "[[townName2]]",
                "labelPosition": "right",
                "balloonText": "平均相似度:[[value]] %",
                "showBalloon": true,
                "animationPlayed": true
              }],

              "chartCursor": {
                "zoomable": false,
                "categoryBalloonDateFormat": "DD",
                "cursorAlpha": 0,
                "valueBalloonsEnabled": false
              },
              "legend": {
                "bulletType": "round",
                "equalWidths": false,
                "valueWidth": 120,
                "useGraphSettings": true,
                //"color": "#FFFFFF"
              }
            } );
        });
    };

    FaceQuickProPage.prototype.spin = function() {
      var opts, spinner, target;
      opts = {
        lines: 13,
        length: 7,
        width: 4,
        radius: 10,
        corners: 1,
        rotate: 0,
        color: '#000',
        speed: 1,
        trail: 60,
        shadow: false,
        hwaccel: false,
        className: 'spinner',
        zIndex: 2e9,
        top: 'auto',
        left: 'auto'
      };
      target = document.getElementById('foo');
      return spinner = new Spinner(opts).spin(target);
    };

    FaceQuickProPage.prototype.face_tracking = function() {
      return $(function() {
            try{
                    var video = document.getElementById('video');
                    var canvas = document.getElementById('canvas');
                    var context = canvas.getContext('2d');

                    var tracker = new tracking.ObjectTracker('face');
                    tracker.setInitialScale(4);
                    tracker.setStepSize(2);
                    tracker.setEdgesDensity(0.1);

                    tracking.track('#video', tracker, { camera: true });

                    tracker.on('track', function(event) {
                      context.clearRect(0, 0, canvas.width, canvas.height);

                      event.data.forEach(function(rect) {
                        context.strokeStyle = '#a64ceb';
                        context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                        context.font = '11px Helvetica';
                        context.fillStyle = "#fff";
                        context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11);
                        context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22);
                      });
                    });

                    var gui = new dat.GUI();
                    gui.add(tracker, 'edgesDensity', 0.1, 0.5).step(0.01);
                    gui.add(tracker, 'initialScale', 1.0, 10.0).step(0.1);
                    gui.add(tracker, 'stepSize', 1, 5).step(0.1);
            }catch(e){
                console.log(e);
            }
        });
    };

    FaceQuickProPage.prototype.retry_cameras = function() {
      return $(function() {
            try{
                    var video = document.getElementById('video');
                    var canvas = document.getElementById('canvas');
                    var context = canvas.getContext('2d');

                    var tracker = new tracking.ObjectTracker('face');
                    tracker.setInitialScale(4);
                    tracker.setStepSize(2);
                    tracker.setEdgesDensity(0.1);

                    tracking.track('#video', tracker, { camera: true });

                    tracker.on('track', function(event) {
                      context.clearRect(0, 0, canvas.width, canvas.height);

                      event.data.forEach(function(rect) {
                        context.strokeStyle = '#a64ceb';
                        context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                        context.font = '11px Helvetica';
                        context.fillStyle = "#fff";
                        context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11);
                        context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22);
                      });
                    });

                    var gui = new dat.GUI();
                    gui.add(tracker, 'edgesDensity', 0.1, 0.5).step(0.01);
                    gui.add(tracker, 'initialScale', 1.0, 10.0).step(0.1);
                    gui.add(tracker, 'stepSize', 1, 5).step(0.1);
            }catch(e){
                console.log(e);
            }
        });
    };

    FaceQuickProPage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 500);
    };

    FaceQuickProPage.prototype.initpage = function(page) {
      return $(function() {
            $('#form_wizard_1').bootstrapWizard({
                'nextSelector': '.button-next',
                'previousSelector': '.button-previous',
                onTabClick: function (tab, navigation, index) {
                    //alert('on tab click disabled');
                    return false;
                },
                onNext: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('#form_wizard_1').find('.button-next').show();
                    if (current == 2){
                        page.get_card();
                        return false;
                    }else{
                        if (page.vm.show_canvas == false){
                            $('.alert-error', $('#submit_form')).show();
                            return false;
                        }else{
                            page.compare();
                            $('.alert-error', $('#submit_form')).hide();
                        }
                    }
                    
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                    } else {
                        $('#form_wizard_1').find('.button-previous').show();
                    }
                    //console.log(page.vm.show_card_result);
                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                        //displayConfirm();
                    } else {
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }
                    //App.scrollTo($('.page-title'));
                },
                onPrevious: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('.alert-error', $('#submit_form')).hide();
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                        $('#form_wizard_1').find('.button-next').hide();
                        page.vm.next_action = "读卡";
                        page.auto_Interval();
                    } else {
                        page.vm.compare_result = "正在比对.....";
                        //$('#div_result').find("#show_result_pass").hide();
                        var pass = document.getElementById('show_result_pass');
                        var mirror = document.getElementById('mirror');
                        pass.src="";
                        mirror.src = "";
                        page.vm.show_canvas = false;
                        $('#form_wizard_1').find('.button-previous').show();
                    }

                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                    } else {
                        if (current == 1){
                            return;
                        }
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }

                    //App.scrollTo($('.page-title'));
                },
                onTabShow: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    var $percent = (current / total) * 100;
                    $('#form_wizard_1').find('.bar').css({
                        width: $percent + '%'
                    });
                }
            });
            $('#form_wizard_1').find('.button-next').hide();
            $('#form_wizard_1').find('.button-previous').hide();
            $('#form_wizard_1 .button-submit').click(function () {
                page.attach();
            }).hide();
        });
    };

    FaceQuickProPage.prototype.retry_camera = function() {
      return this.webcam(this);
    };

    FaceQuickProPage.prototype.auto_Interval = function() {
      var i, _i, _len;
      for (_i = 0, _len = compare_Interval.length; _i < _len; _i++) {
        i = compare_Interval[_i];
        window.clearInterval(i);
      }
      if (compare_Interval.length) {
        compare_Interval.splice(0, compare_Interval.length);
      }
      this._loop = setInterval(((function(_this) {
        return function() {
          if (!compare_temp.length) {
            return _this.get_card();
          }
        };
      })(this)), 3000);
      return compare_Interval.push(this._loop);
    };

    FaceQuickProPage.prototype.set_time = function(times) {
      var day, month, year;
      year = times.substring(0, 4);
      month = times.substring(4, 6);
      day = times.substring(6, 8);
      return year + '年' + month + '月' + day + '日';
    };

    FaceQuickProPage.prototype.get_card = function() {
      var e, machine_path, query;
      try {
        query = new MachineRest('localhost:4567');
        machine_path = query.get_path('123');
        machine_path.done((function(_this) {
          return function(data) {
            var machine_detail, path;
            path = data.detail;
            query = new MachineRest('localhost:4567');
            machine_detail = query.get_card('123');
            machine_detail.done(function(data) {
              var img, _ref, _ref1;
              if (data.status === "success") {
                if ((_ref = data.detail.personId, __indexOf.call(compare_card, _ref) >= 0) && __indexOf.call(compare_result, 'pass') >= 0) {
                  _this.vm.status = "已通过";
                  _this.vm.result = "已通过";
                  return;
                }
                $("body").modalmanager("loading");
                if (__indexOf.call(compare_result, 'fail') >= 0 || (_ref1 = data.detail.personId, __indexOf.call(compare_card, _ref1) < 0)) {
                  $("#div_result").css("display", "none");
                  if (compare_card.length) {
                    compare_card.splice(0, compare_card.length);
                  }
                }
                _this.vm.show_all = false;
                _this.person_msg = JSON.stringify(data.detail);
                _this.vm.personName = data.detail.personName;
                _this.vm.sex = data.detail.sex;
                _this.vm.nation = data.detail.nation;
                _this.vm.personId = data.detail.personId;
                _this.vm.address = data.detail.address;
                _this.vm.department = data.detail.department;
                _this.vm.imgPath = data.detail.imgPath;
                _this.vm.show_card_result = true;
                _this.vm.birthday = _this.set_time(data.detail.birthday);
                _this.vm.startDate = _this.set_time(data.detail.startDate);
                _this.vm.endDate = _this.set_time(data.detail.endDate);

                /*$("#myTab li:eq(1) a").tab "show"
                $("#myTab li:eq(0)").addClass "done"
                $('.alert-error', $('#submit_form')).hide()
                @vm.next_action = "对比"
                $('#form_wizard_1').find('.bar').css({
                    width: 100 + '%'
                })
                 */
                img = new Image();
                img.src = path + '/person.jpg';
                return img.onload = function() {
                  var canvas_cards, cxt, dataURL, filename, h, w;
                  canvas_cards = document.getElementById("canvas_card");
                  cxt = canvas_cards.getContext("2d");
                  w = Math.min(400, img.width);
                  h = img.height * (w / img.width);
                  canvas_cards.width = w;
                  canvas_cards.height = h;
                  cxt.drawImage(img, 0, 0);
                  dataURL = canvas_cards.toDataURL("image/jpg");
                  _this.personal_id = _this.vm.personId;
                  filename = _this.sd.register.items["account"] + "_" + _this.personal_id + "_person.jpg";
                  _this._upload("", dataURL, filename, _this.sd.host, false);
                  if (_this.mode === "usb") {
                    _this.sayCheese.takeSnapshot();
                  } else {
                    _this.ipcam_takesnap();
                  }
                  _this.vm.status = "正在上传图片";
                  _this.vm.result = "正在上传图片";
                  _this.vm.com = "0%";
                  _this.vm.show_spin = true;
                  compare_card.push(_this.vm.personId);
                  compare_temp.push('get_card');
                  if (compare_result.length) {
                    return compare_result.splice(0, compare_result.length);
                  }
                };
              } else {
                _this.vm.status = "读卡失败";
                _this.vm.result = "读卡失败";

                /*@vm.personName = "未对比"
                @vm.sex = "未对比"
                @vm.birthday = "未对比"
                @vm.nation = "未对比"
                @vm.personId = "未对比"
                @vm.address = "未对比"
                @vm.startDate = "未对比"
                @vm.endDate = "未对比"
                @vm.department = "未对比"
                @vm.imgPath = "未对比"
                 */
                if (compare_card.length) {
                  compare_card.splice(0, compare_card.length);
                }
                if (compare_result.length) {
                  return compare_result.splice(0, compare_result.length);
                }
              }
            });
            return machine_detail.fail(function() {
              _this.vm.show_retry = false;
              _this.vm.status = "读卡器未连接";
              _this.vm.result = "读卡器未连接";
              _this.vm.com = "0%";
              $("#gritter-notice-wrapper").remove();
              return _this.show_tips(_this.vm.result);
            });
          };
        })(this));
        return machine_path.fail((function(_this) {
          return function() {
            _this.vm.status = "未安装驱动";
            _this.vm.result = "未安装驱动";
            _this.vm.com = "0%";
            $("#gritter-notice-wrapper").remove();
            return _this.show_tips(_this.vm.result);
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    FaceQuickProPage.prototype.show_tips = function(tips) {
      $.extend($.gritter.options, {
        class_name: 'gritter',
        position: 'bottom-right',
        fade_in_speed: 1000,
        fade_out_speed: 100,
        time: 10000
      });
      return $.gritter.add({
        title: '提示',
        text: tips
      });
    };

    FaceQuickProPage.prototype.check_remain = function() {
      if (parseInt(this.sd.register.items["remain"]) <= 0) {
        return false;
      }
      return true;
    };

    FaceQuickProPage.prototype.compare = function() {
      var e, machine, query;
      try {
        if (this.check_remain()) {
          query = new MachineRest(this.sd.host);
          machine = query.compare(this.sd.register.items["account"], this.personal_id, this.person_msg);
          return machine.done((function(_this) {
            return function(data) {
              return console.log(data);
            };
          })(this));
        } else {
          this.vm.status = "对比次数已用完，请充值";
          this.vm.result = "对比次数已用完，请充值";
          return this.vm.com = "0%";
        }
      } catch (_error) {
        e = _error;
        return console.log(e);
      }

      /*try
          if @check_remain()
              @frozen()
              chain = new Chain
              chain.chain =>
                  (new MachineRest @sd.host).compare @sd.register.items["account"],@personal_id,@person_msg
              chain.chain @sd.update("all"),true
              show_chain_progress(chain).done =>
                  console.log 'compare-success'
          else
              @vm.status = "对比次数已用完，请充值"
              @vm.result = "对比次数已用完，请充值"
              @vm.com = "0%"
               *return (new MessageModal('对比次数已用完，请充值')).attach()
      catch e
          console.log e
       */
    };

    FaceQuickProPage.prototype.show_stamp = function(con) {

      /*$('#form_wizard_1').find('.button-previous').hide()
      if parseInt(con) < 50
          @vm.compare_result = "识别度过低,请对准摄像头"
          $("#show_result_pass").stamper(
              image : "images/failed.png",
              scale : 3,
              speed : 300
          )
      else
          @vm.compare_result = "识别成功,相似度为:" + con + "%"
          $("#show_result_pass").stamper(
              image : "images/pass.png",
              scale : 3,
              speed : 300
          )
       */
      this.vm.show_loading = true;
      this.vm.show_spin = false;
      this.vm.show_all = true;
      $("#div_result").css("display", "block");
      if (parseInt(con) < 60) {
        this.vm.status = "对比完成";
        this.vm.result = "很抱歉,不通过";
        this.vm.com = parseInt(con) + "%";
        $("#show_result_pass").stamper({
          image: "images/failed.png",
          scale: 3,
          speed: 300
        });
        compare_result.push('fail');
      } else {
        this.vm.status = "对比完成";
        this.vm.result = "恭喜你,通过";
        this.vm.com = parseInt(con) + "%";
        $("#show_result_pass").stamper({
          image: "images/pass.png",
          scale: 3,
          speed: 300
        });
        compare_result.push('pass');
      }
      if (compare_temp.length) {
        compare_temp.splice(0, compare_temp.length);
      }
      return this.vm.show_retry = true;
    };

    FaceQuickProPage.prototype.show_stamp_new = function(con) {
      var img;
      $("body").modalmanager("removeLoading");
      this.vm.show_loading = true;
      this.vm.show_spin = false;
      this.vm.show_all = true;
      $("#div_result").css("display", "block");
      if (this.mode === "usb") {
        $("#face_ul").css("padding-top", "185px");
      } else {
        $("#face_ul").css("padding-top", "137px");
      }
      if (parseInt(con) < 60) {
        this.vm.status = "对比完成";
        this.vm.result = "很抱歉,不通过";
        this.vm.com = parseInt(con) + "%";
        img = document.getElementById('result_img');
        img.src = 'images/fail_img.png';
        compare_result.push('fail');
      } else {
        this.vm.status = "对比完成";
        this.vm.result = "恭喜你,通过";
        this.vm.com = parseInt(con) + "%";
        img = document.getElementById('result_img');
        img.src = 'images/pass_img.png';
        compare_result.push('pass');
      }
      if (compare_temp.length) {
        compare_temp.splice(0, compare_temp.length);
      }
      return this.vm.show_retry = true;
    };

    FaceQuickProPage.prototype.getpic = function() {
      var machine_detail, query;
      query = new MachineRest('localhost:4567');
      machine_detail = query.get_pic("123");
      machine_detail.done((function(_this) {
        return function(data) {
          return console.log(data);
        };
      })(this));
      return console.log(123123);
    };

    FaceQuickProPage.prototype.face_track = function(page) {
      return $(function() {
            var video = document.getElementById('video');
            var canvas = document.getElementById('canvas');
            var context = canvas.getContext('2d');
            page.vm.show_tracking = true;

            var tracker = new tracking.ObjectTracker('face');
            /*tracker.setInitialScale(4);
            tracker.setStepSize(2);
            tracker.setEdgesDensity(0.1);*/

            tracking.track('#video', tracker, { camera: true });
            
            tracker.on('track', function(event) {
              context.clearRect(0, 0, canvas.width, canvas.height);

              event.data.forEach(function(rect) {
                context.strokeStyle = '#a64ceb';
                context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                page.x1 = rect.width;
                page.y1 = rect.height;
                page.x2 = rect.x;
                page.y2 = rect.y;
                /*context.font = '11px Helvetica';
                context.fillStyle = "#fff";
                context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11);
                context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22);*/
              });
            });

            /*var gui = new dat.GUI();
            gui.add(tracker, 'edgesDensity', 0.1, 0.5).step(0.01);
            gui.add(tracker, 'initialScale', 1.0, 10.0).step(0.1);
            gui.add(tracker, 'stepSize', 1, 5).step(0.1);*/
        });
    };

    FaceQuickProPage.prototype.webcam = function(page) {
      return $(function() {
              var sayCheese = new SayCheese('#webcam', { audio: false });
              page.sayCheese = sayCheese;
              sayCheese.on('start', function() {
                page.vm.camera_error = false;
                //page.face_track(page);
                page.auto_Interval();
              })
              function base64Img2Blob(code){
                        var parts = code.split(';base64,');
                        var contentType = parts[0].split(':')[1];
                        var raw = window.atob(parts[1]);
                        var rawLength = raw.length;

                        var uInt8Array = new Uint8Array(rawLength);

                        for (var i = 0; i < rawLength; ++i) {
                          uInt8Array[i] = raw.charCodeAt(i);
                        }

                        return new Blob([uInt8Array], {type: contentType}); 
                    };
                    function downloadFile(fileName, content){
                       
                        var aLink = document.createElement('a');
                        var blob = base64Img2Blob(content); //new Blob([content]);
                        //page.compare(blob);
                        var evt = document.createEvent("HTMLEvents");
                        evt.initEvent("click", false, false);//initEvent 不加后两个参数在FF下会报错
                        aLink.download = fileName;
                        aLink.href = URL.createObjectURL(blob);
                        aLink.dispatchEvent(evt);
                    };      
                     
              sayCheese.on('snapshot', function(snapshot) {
                try{
                    //console.log(snapshot);
                    //var mirror = document.getElementById('mirror');
                    //mirror.width = snapshot.width;
                    //mirror.height = snapshot.height;

                   
                    var mirror = new Image();
                    var imgData = snapshot.toDataURL('png');
                    mirror.src = imgData;
                    mirror.onload = function(){
                        var facecut = document.getElementById('mirror');
                        var cxt = facecut.getContext("2d");
                        cxt.drawImage(mirror,190,87,264,282,0,0,120,126);
                        var dataURL = facecut.toDataURL("image/jpg");
                        var filename = page.sd.register.items["account"] + "_" + page.personal_id +"_own.jpg";
                        page._upload(page,dataURL,filename,page.sd.host,true);
                    }
                    page.vm.show_canvas = true;

                    page.vm.show_img = false;
                    //var mirror = document.getElementById('mirror');
                    //mirror.width = snapshot.width;
                    //mirror.height = snapshot.height;

                    var imgData = snapshot.toDataURL('png');
                    //mirror.src = imgData;
                    //$('#mirror').attr('style', 'background-image:url('+ imgData +');background-position: 358px 308px;width: 107px;height: 126px;background-size: 200%;')
                    page.vm.show_canvas = true;
                    //page._upload(page,snapshot.toDataURL("image/jpg"),filename,page.sd.host,true);
                }
                catch(e){
                    console.log(e);
                }
              });
            
              sayCheese.start();
              
              $('#shot').click(function () {
                //console.log(sayCheese);
                try{
                    sayCheese.takeSnapshot();
                }catch(e){
                    return;
                }
              });
        });
    };

    FaceQuickProPage.prototype._upload = function(page, base64, filename, host, compare) {
      return $(function() {
            try{
                function sumitImageFile(base64Codes){
                    var form=document.forms[0];
                    var formData = new FormData(form);  
                    formData.append("imageName",convertBase64UrlToBlob(base64Codes),filename);  
                    $.ajax({
                        url : "http://" + host + "/api/upgrade",
                        //url : "http://192.168.2.122:4569/api/upgrade",
                        type : "POST",
                        data : formData,
                        dataType:"text",
                        processData : false,        
                        contentType : false,
                        beforeSend: function(request) {
                            request.setRequestHeader("Test", "Chenxizhang");
                        },
                        success:function(data){
                            if (compare){
                                page.compare();
                            }
                            //window.location.href="${ctx}"+data;
                            //return (new MessageModal(lang.fileupload.upload_success)).attach();
                        },
                        xhr:function(){            
                            var xhr = new XMLHttpRequest();
                            xhr.upload.addEventListener("progress", function(evt){
                                if (evt.lengthComputable) {
                                    var percentComplete = Math.round(evt.loaded * 100 / evt.total);  
                                    console.log("正在提交."+percentComplete.toString() + '%');        //在控制台打印上传进度
                                }
                            }, false);
                            return xhr;
                        }
                        
                    });
                }
                function convertBase64UrlToBlob(urlData){
                    var bytes=window.atob(urlData.split(',')[1]);       
                    var ab = new ArrayBuffer(bytes.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < bytes.length; i++) {
                        ia[i] = bytes.charCodeAt(i);
                    }
                    return new Blob( [ab] , {type : 'image/jpeg'});
                }
                sumitImageFile(base64);
            }catch(e){
                console.log(e);
            }
        });
    };

    FaceQuickProPage.prototype.process = function(index) {
      var rate;
      $('#form_wizard').bootstrapWizard(rate = index / 2, $('#form_wizard').find('.bar').css({
        width: rate + '%'
      }));
      if (index === 2) {
        return $("#myTab li:eq(1) a").tab("show");
      }
    };

    return FaceQuickProPage;

  })(DetailTablePage);

  FaceQuickPage = (function(_super) {
    __extends(FaceQuickPage, _super);

    function FaceQuickPage(sd) {
      this.sd = sd;
      this.process = __bind(this.process, this);
      this._upload = __bind(this._upload, this);
      this.webcam = __bind(this.webcam, this);
      this.getpic = __bind(this.getpic, this);
      this.show_stamp = __bind(this.show_stamp, this);
      this.compare = __bind(this.compare, this);
      this.get_card = __bind(this.get_card, this);
      this.auto_Interval = __bind(this.auto_Interval, this);
      this.retry_camera = __bind(this.retry_camera, this);
      this.initpage = __bind(this.initpage, this);
      this.nprocess = __bind(this.nprocess, this);
      this.retry_cameras = __bind(this.retry_cameras, this);
      this.face_tracking = __bind(this.face_tracking, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FaceQuickPage.__super__.constructor.call(this, "facequickpage-", "html/facequickpage.html");
      this.dataurl = "";
      this.personal_id = "";
      this.person_msg = "";
      this.sayCheese = "";
      $(this.sd).on("compareresult", (function(_this) {
        return function(e, result) {
          if (result.name === "compareResult") {
            return _this.show_stamp(result.confidence);
          }
        };
      })(this));
    }

    FaceQuickPage.prototype.define_vm = function(vm) {
      var vm_show_compare;
      vm.lang = lang.facepage;
      vm.get_card = this.get_card;
      vm.compare = this.compare;
      vm.personName = "";
      vm.sex = "";
      vm.birthday = "";
      vm.nation = "";
      vm.personId = "";
      vm.address = "";
      vm.startDate = "";
      vm.endDate = "";
      vm.department = "";
      vm.imgPath = "";
      vm.show_card_result = false;
      vm.show_canvas = false;
      vm_show_compare = false;
      vm.show_loading = true;
      vm.show_cam = true;
      vm.checked = false;
      vm.upload_pic = this.upload_pic;
      vm.show_upload_canvas = false;
      vm.compare_result = "";
      vm.show_results = true;
      vm.next_action = "读卡";
      vm.camera_error = true;
      vm.retry_camera = this.retry_camera;
      return vm.retry_cameras = this.retry_cameras;
    };

    FaceQuickPage.prototype.rendered = function() {
      FaceQuickPage.__super__.rendered.call(this);
      new WOW().init();
      this.webcam(this);
      this.vm.show_card_result = false;
      this.vm.show_canvas = false;
      this.vm.show_cam = true;
      this.vm.camera_error = true;
      this.vm.show_loading = true;
      this.vm.show_upload_canvas = false;
      this.initpage(this);
      this.vm.compare_result = "";
      this.vm.show_results = true;
      this.vm.next_action = "读卡";
      return this.nprocess();
    };

    FaceQuickPage.prototype.face_tracking = function() {
      return $(function() {
            try{
                    var video = document.getElementById('video');
                    var canvas = document.getElementById('canvas');
                    var context = canvas.getContext('2d');

                    var tracker = new tracking.ObjectTracker('face');
                    tracker.setInitialScale(4);
                    tracker.setStepSize(2);
                    tracker.setEdgesDensity(0.1);

                    tracking.track('#video', tracker, { camera: true });

                    tracker.on('track', function(event) {
                      context.clearRect(0, 0, canvas.width, canvas.height);

                      event.data.forEach(function(rect) {
                        context.strokeStyle = '#a64ceb';
                        context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                        context.font = '11px Helvetica';
                        context.fillStyle = "#fff";
                        context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11);
                        context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22);
                      });
                    });

                    var gui = new dat.GUI();
                    gui.add(tracker, 'edgesDensity', 0.1, 0.5).step(0.01);
                    gui.add(tracker, 'initialScale', 1.0, 10.0).step(0.1);
                    gui.add(tracker, 'stepSize', 1, 5).step(0.1);
            }catch(e){
                console.log(e);
            }
        });
    };

    FaceQuickPage.prototype.retry_cameras = function() {
      return $(function() {
            try{
                    var video = document.getElementById('video');
                    var canvas = document.getElementById('canvas');
                    var context = canvas.getContext('2d');

                    var tracker = new tracking.ObjectTracker('face');
                    tracker.setInitialScale(4);
                    tracker.setStepSize(2);
                    tracker.setEdgesDensity(0.1);

                    tracking.track('#video', tracker, { camera: true });

                    tracker.on('track', function(event) {
                      context.clearRect(0, 0, canvas.width, canvas.height);

                      event.data.forEach(function(rect) {
                        context.strokeStyle = '#a64ceb';
                        context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                        context.font = '11px Helvetica';
                        context.fillStyle = "#fff";
                        context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11);
                        context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22);
                      });
                    });

                    var gui = new dat.GUI();
                    gui.add(tracker, 'edgesDensity', 0.1, 0.5).step(0.01);
                    gui.add(tracker, 'initialScale', 1.0, 10.0).step(0.1);
                    gui.add(tracker, 'stepSize', 1, 5).step(0.1);
            }catch(e){
                console.log(e);
            }
        });
    };

    FaceQuickPage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 500);
    };

    FaceQuickPage.prototype.initpage = function(page) {
      return $(function() {
            $('#form_wizard_1').bootstrapWizard({
                'nextSelector': '.button-next',
                'previousSelector': '.button-previous',
                onTabClick: function (tab, navigation, index) {
                    //alert('on tab click disabled');
                    return false;
                },
                onNext: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('#form_wizard_1').find('.button-next').show();
                    if (current == 2){
                        page.get_card();
                        return false;
                    }else{
                        if (page.vm.show_canvas == false){
                            $('.alert-error', $('#submit_form')).show();
                            return false;
                        }else{
                            page.compare();
                            $('.alert-error', $('#submit_form')).hide();
                        }
                    }
                    
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                    } else {
                        $('#form_wizard_1').find('.button-previous').show();
                    }
                    //console.log(page.vm.show_card_result);
                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                        //displayConfirm();
                    } else {
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }
                    //App.scrollTo($('.page-title'));
                },
                onPrevious: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('.alert-error', $('#submit_form')).hide();
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                        $('#form_wizard_1').find('.button-next').hide();
                        page.vm.next_action = "读卡";
                        page.auto_Interval();
                    } else {
                        page.vm.compare_result = "正在比对.....";
                        //$('#div_result').find("#show_result_pass").hide();
                        var pass = document.getElementById('show_result_pass');
                        var mirror = document.getElementById('mirror');
                        pass.src="";
                        mirror.src = "";
                        page.vm.show_canvas = false;
                        $('#form_wizard_1').find('.button-previous').show();
                    }

                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                    } else {
                        if (current == 1){
                            return;
                        }
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }

                    //App.scrollTo($('.page-title'));
                },
                onTabShow: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    var $percent = (current / total) * 100;
                    $('#form_wizard_1').find('.bar').css({
                        width: $percent + '%'
                    });
                }
            });
            $('#form_wizard_1').find('.button-next').hide();
            $('#form_wizard_1').find('.button-previous').hide();
            $('#form_wizard_1 .button-submit').click(function () {
                page.attach();
            }).hide();
        });
    };

    FaceQuickPage.prototype.retry_camera = function() {
      return this.webcam(this);
    };

    FaceQuickPage.prototype.auto_Interval = function() {
      if (!compare_Interval.length) {
        this._loop = setInterval(((function(_this) {
          return function() {
            return _this.get_card();
          };
        })(this)), 3000);
        return compare_Interval.push(this._loop);
      }
    };

    FaceQuickPage.prototype.get_card = function() {
      var e, machine_detail, query;
      try {
        query = new MachineRest('localhost:4567');
        machine_detail = query.get_path('123');
        return machine_detail.done((function(_this) {
          return function(data) {
            var path;
            path = data.detail;
            query = new MachineRest('localhost:4567');
            machine_detail = query.get_card('123');
            machine_detail.done(function(data) {
              var canvas_cards, cxt, img;
              if (data.status === "success") {
                _this.person_msg = JSON.stringify(data.detail);
                _this.vm.personName = data.detail.personName;
                _this.vm.sex = data.detail.sex;
                _this.vm.birthday = data.detail.birthday;
                _this.vm.nation = data.detail.nation;
                _this.vm.personId = data.detail.personId;
                _this.vm.address = data.detail.address;
                _this.vm.startDate = data.detail.startDate;
                _this.vm.endDate = data.detail.endDate;
                _this.vm.department = data.detail.department;
                _this.vm.imgPath = data.detail.imgPath;
                _this.vm.show_card_result = true;
                canvas_cards = document.getElementById("canvas_card");
                cxt = canvas_cards.getContext("2d");
                $("#myTab li:eq(1) a").tab("show");
                $("#myTab li:eq(0)").addClass("done");
                $('.alert-error', $('#submit_form')).hide();
                _this.vm.next_action = "对比";
                $('#form_wizard_1').find('.bar').css({
                  width: 100 + '%'
                });
                img = new Image();
                img.src = path + '/person.jpg';
                return img.onload = function() {
                  var dataURL, filename, h, w;
                  w = Math.min(400, img.width);
                  h = img.height * (w / img.width);
                  canvas_cards.width = w;
                  canvas_cards.height = h;
                  cxt.drawImage(img, 0, 0);
                  dataURL = canvas_cards.toDataURL("image/jpg");
                  _this.personal_id = _this.vm.personId;
                  filename = _this.sd.register.items["account"] + "_" + _this.personal_id + "_person.jpg";
                  _this._upload(dataURL, filename, _this.sd.host);
                  _this.sayCheese.takeSnapshot();
                  _this.compare();
                  if (_this._loop != null) {
                    return clearInterval(_this._loop);
                  }
                };
              } else {

              }
            });
            return machine_detail.fail(function() {
              return console.log('error');
            });
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    FaceQuickPage.prototype.compare = function() {
      var chain, e;
      try {
        this.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).compare(_this.sd.register.items["account"], _this.personal_id, _this.person_msg);
          };
        })(this));
        chain.chain(this.sd.update("all"), true);
        return show_chain_progress(chain).done((function(_this) {
          return function() {
            return console.log('compare-success');
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    FaceQuickPage.prototype.show_stamp = function(con) {
      $('#form_wizard_1').find('.button-previous').hide();
      this.vm.show_loading = false;
      if (parseInt(con) < 50) {
        this.vm.compare_result = "识别度过低,请对准摄像头";
        return $("#show_result_pass").stamper({
          image: "images/failed.png",
          scale: 3,
          speed: 300
        });
      } else {
        this.vm.compare_result = "识别成功,相似度为:" + con + "%";
        return $("#show_result_pass").stamper({
          image: "images/pass.png",
          scale: 3,
          speed: 300
        });
      }
    };

    FaceQuickPage.prototype.getpic = function() {
      var machine_detail, query;
      query = new MachineRest('localhost:4567');
      machine_detail = query.get_pic("123");
      machine_detail.done((function(_this) {
        return function(data) {
          return console.log(data);
        };
      })(this));
      return console.log(123123);
    };

    FaceQuickPage.prototype.webcam = function(page) {
      return $(function() {
              var sayCheese = new SayCheese('#webcam', { audio: false });
              page.sayCheese = sayCheese;
              sayCheese.on('start', function() {
                page.vm.camera_error = false;
				
                var video = document.getElementById('video');
                var canvas = document.getElementById('canvas');
                var context = canvas.getContext('2d');

                var tracker = new tracking.ObjectTracker('face');
                tracker.setInitialScale(4);
                tracker.setStepSize(2);
                tracker.setEdgesDensity(0.1);

                tracking.track('#video', tracker, { camera: true });
				page.auto_Interval();
                tracker.on('track', function(event) {
                  context.clearRect(0, 0, canvas.width, canvas.height);

                  event.data.forEach(function(rect) {
                    context.strokeStyle = '#a64ceb';
                    context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                    context.font = '11px Helvetica';
                    context.fillStyle = "#fff";
                    context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11);
                    context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22);
                  });
                });

                /*var gui = new dat.GUI();
                gui.add(tracker, 'edgesDensity', 0.1, 0.5).step(0.01);
                gui.add(tracker, 'initialScale', 1.0, 10.0).step(0.1);
                gui.add(tracker, 'stepSize', 1, 5).step(0.1);*/
              })
              function base64Img2Blob(code){
                        var parts = code.split(';base64,');
                        var contentType = parts[0].split(':')[1];
                        var raw = window.atob(parts[1]);
                        var rawLength = raw.length;

                        var uInt8Array = new Uint8Array(rawLength);

                        for (var i = 0; i < rawLength; ++i) {
                          uInt8Array[i] = raw.charCodeAt(i);
                        }

                        return new Blob([uInt8Array], {type: contentType}); 
                    };
                    function downloadFile(fileName, content){
                       
                        var aLink = document.createElement('a');
                        var blob = base64Img2Blob(content); //new Blob([content]);
                        //page.compare(blob);
                        var evt = document.createEvent("HTMLEvents");
                        evt.initEvent("click", false, false);//initEvent 不加后两个参数在FF下会报错
                        aLink.download = fileName;
                        aLink.href = URL.createObjectURL(blob);
                        aLink.dispatchEvent(evt);
                    };       
              sayCheese.on('snapshot', function(snapshot) {
                try{
                    var mirror = document.getElementById('mirror');
                    mirror.width = snapshot.width;
                    mirror.height = snapshot.height;
                    var imgData = snapshot.toDataURL('png');
                    mirror.src = imgData;
                    page.vm.show_canvas = true;

                    var filename = page.sd.register.items["account"] + "_" + page.personal_id +"_own.jpg";
                    page._upload(snapshot.toDataURL("image/jpg"),filename,page.sd.host);
                }
                catch(e){
                    console.log(e);
                }
              });
            
              sayCheese.start();
              
              $('#shot').click(function () {
                //console.log(sayCheese);
                try{
                    sayCheese.takeSnapshot();
                }catch(e){
                    return;
                }
              });
        });
    };

    FaceQuickPage.prototype._upload = function(base64, filename, host) {
      return $(function() {
            try{
                function sumitImageFile(base64Codes){
                    var form=document.forms[0];
                    var formData = new FormData(form);  
                    formData.append("imageName",convertBase64UrlToBlob(base64Codes),filename);  
                    $.ajax({
                        url : "http://" + host + "/api/upgrade",
                        //url : "http://192.168.2.122:4569/api/upgrade",
                        type : "POST",
                        data : formData,
                        dataType:"text",
                        processData : false,        
                        contentType : false,
                        beforeSend: function(request) {
                            request.setRequestHeader("Test", "Chenxizhang");
                        },
                        success:function(data){
                            //window.location.href="${ctx}"+data;
                            //return (new MessageModal(lang.fileupload.upload_success)).attach();
                        },
                        xhr:function(){            
                            var xhr = new XMLHttpRequest();
                            xhr.upload.addEventListener("progress", function(evt){
                                if (evt.lengthComputable) {
                                    var percentComplete = Math.round(evt.loaded * 100 / evt.total);  
                                    console.log("正在提交."+percentComplete.toString() + '%');        //在控制台打印上传进度
                                }
                            }, false);
                            return xhr;
                        }
                        
                    });
                }
                function convertBase64UrlToBlob(urlData){
                    var bytes=window.atob(urlData.split(',')[1]);       
                    var ab = new ArrayBuffer(bytes.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < bytes.length; i++) {
                        ia[i] = bytes.charCodeAt(i);
                    }
                    return new Blob( [ab] , {type : 'image/jpeg'});
                }
                sumitImageFile(base64);
            }catch(e){
                console.log(e);
            }
        });
    };

    FaceQuickPage.prototype.process = function(index) {
      var rate;
      $('#form_wizard').bootstrapWizard(rate = index / 2, $('#form_wizard').find('.bar').css({
        width: rate + '%'
      }));
      if (index === 2) {
        return $("#myTab li:eq(1) a").tab("show");
      }
    };

    return FaceQuickPage;

  })(DetailTablePage);

  FacePage = (function(_super) {
    __extends(FacePage, _super);

    function FacePage(sd) {
      this.sd = sd;
      this.process = __bind(this.process, this);
      this._upload = __bind(this._upload, this);
      this.webcam = __bind(this.webcam, this);
      this.getpic = __bind(this.getpic, this);
      this.show_stamp = __bind(this.show_stamp, this);
      this.compare = __bind(this.compare, this);
      this.get_card = __bind(this.get_card, this);
      this.auto_Interval = __bind(this.auto_Interval, this);
      this.upload_pic = __bind(this.upload_pic, this);
      this.retry_camera = __bind(this.retry_camera, this);
      this.initpage = __bind(this.initpage, this);
      this.nprocess = __bind(this.nprocess, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      FacePage.__super__.constructor.call(this, "facepage-", "html/facepage.html");
      this.dataurl = "";
      this.personal_id = "";
      this.person_msg = "";
      $(this.sd).on("compareresult", (function(_this) {
        return function(e, result) {
          if (result.name === "compareResult") {
            return _this.show_stamp(result.confidence);
          }
        };
      })(this));
    }

    FacePage.prototype.define_vm = function(vm) {
      var vm_show_compare;
      vm.lang = lang.facepage;
      vm.get_card = this.get_card;
      vm.compare = this.compare;
      vm.personName = "";
      vm.sex = "";
      vm.birthday = "";
      vm.nation = "";
      vm.personId = "";
      vm.address = "";
      vm.startDate = "";
      vm.endDate = "";
      vm.department = "";
      vm.imgPath = "";
      vm.show_card_result = false;
      vm.show_canvas = false;
      vm_show_compare = false;
      vm.show_loading = true;
      vm.show_cam = true;
      vm.checked = false;
      vm.upload_pic = this.upload_pic;
      vm.show_upload_canvas = false;
      vm.compare_result = "";
      vm.show_results = true;
      vm.next_action = "读卡";
      vm.camera_error = true;
      return vm.retry_camera = this.retry_camera;
    };

    FacePage.prototype.rendered = function() {
      FacePage.__super__.rendered.call(this);
      new WOW().init();
      this.webcam(this);
      this.vm.show_card_result = false;
      this.vm.show_canvas = false;
      this.vm.show_cam = true;
      this.vm.camera_error = true;
      this.vm.show_loading = true;
      this.vm.show_upload_canvas = false;
      this.initpage(this);
      this.vm.compare_result = "";
      this.vm.show_results = true;
      this.vm.next_action = "读卡";
      this.nprocess();
      return this.auto_Interval();
    };

    FacePage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 500);
    };

    FacePage.prototype.initpage = function(page) {
      return $(function() {
            $('#form_wizard_1').bootstrapWizard({
                'nextSelector': '.button-next',
                'previousSelector': '.button-previous',
                onTabClick: function (tab, navigation, index) {
                    //alert('on tab click disabled');
                    return false;
                },
                onNext: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('#form_wizard_1').find('.button-next').show();
                    if (current == 2){
                        page.get_card();
                        return false;
                    }else{
                        if (page.vm.show_canvas == false){
                            $('.alert-error', $('#submit_form')).show();
                            return false;
                        }else{
                            page.compare();
                            $('.alert-error', $('#submit_form')).hide();
                        }
                    }
                    
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                    } else {
                        $('#form_wizard_1').find('.button-previous').show();
                    }
                    //console.log(page.vm.show_card_result);
                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                        //displayConfirm();
                    } else {
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }
                    //App.scrollTo($('.page-title'));
                },
                onPrevious: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    $('.alert-error', $('#submit_form')).hide();
                    // set wizard title
                    $('.step-title', $('#form_wizard_1')).text('Step ' + (index + 1) + ' of ' + total);
                    // set done steps
                    jQuery('li', $('#form_wizard_1')).removeClass("done");
                    var li_list = navigation.find('li');
                    for (var i = 0; i < index; i++) {
                        jQuery(li_list[i]).addClass("done");
                    }

                    if (current == 1) {
                        $('#form_wizard_1').find('.button-previous').hide();
                        $('#form_wizard_1').find('.button-next').hide();
                        page.vm.next_action = "读卡";
                        page.auto_Interval();
                    } else {
                        page.vm.compare_result = "正在比对.....";
                        //$('#div_result').find("#show_result_pass").hide();
                        var pass = document.getElementById('show_result_pass');
                        var mirror = document.getElementById('mirror');
                        pass.src="";
                        mirror.src = "";
                        page.vm.show_canvas = false;
                        $('#form_wizard_1').find('.button-previous').show();
                    }

                    if (current >= total) {
                        $('#form_wizard_1').find('.button-next').hide();
                        $('#form_wizard_1').find('.button-submit').show();
                    } else {
                        if (current == 1){
                            return;
                        }
                        $('#form_wizard_1').find('.button-next').show();
                        $('#form_wizard_1').find('.button-submit').hide();
                    }

                    //App.scrollTo($('.page-title'));
                },
                onTabShow: function (tab, navigation, index) {
                    var total = navigation.find('li').length;
                    var current = index + 1;
                    var $percent = (current / total) * 100;
                    $('#form_wizard_1').find('.bar').css({
                        width: $percent + '%'
                    });
                }
            });
            $('#form_wizard_1').find('.button-next').hide();
            $('#form_wizard_1').find('.button-previous').hide();
            $('#form_wizard_1 .button-submit').click(function () {
                page.attach();
            }).hide();
        });
    };

    FacePage.prototype.retry_camera = function() {
      return this.webcam(this);
    };

    FacePage.prototype.upload_pic = function() {

      /*
      $.ajax(
          type: 'POST',
          url: 'http://192.168.2.84:8008/api/upload',
          data: '{ "imageData" : "' + @dataurl + '" }',
          contentType: 'application/json; charset=utf-8',
          dataType: 'json',
          success: (msg) ->
              alert("Done, Picture Uploaded.");
      )
      
      query = (new MachineRest('192.168.2.84:8008'))
      machine_detail = query.uploadpic @dataurl
      machine_detail.done (data) =>
          console.log data
       */
      return (new FaceUpLoadModal(this.sd, this)).attach();
    };

    FacePage.prototype.auto_Interval = function() {
      this._loop = setInterval(((function(_this) {
        return function() {
          return _this.get_card();
        };
      })(this)), 1000);
      return global_Interval.push(this._loop);
    };

    FacePage.prototype.get_card = function() {

      /*(new ConfirmModal lang.central_mysql.check, =>
              @frozen()
              chain = new Chain
              chain.chain =>
                  (new MachineRest @sd.host).check ip,name
              chain.chain @sd.update("all")
              show_chain_progress(chain).done =>
                  (new MessageModal (lang.central_mysql.check_success)).attach()
                  @attach()
          ).attach()
       */
      var e, machine_detail, query;
      try {
        query = new MachineRest('localhost:4567');
        machine_detail = query.get_path('123');
        return machine_detail.done((function(_this) {
          return function(data) {
            var path;
            path = data.detail;
            query = new MachineRest('localhost:4567');
            machine_detail = query.get_card('123');
            machine_detail.done(function(data) {
              var canvas_cards, cxt, img;
              if (data.status === "success") {
                _this.person_msg = JSON.stringify(data.detail);
                _this.vm.personName = data.detail.personName;
                _this.vm.sex = data.detail.sex;
                _this.vm.birthday = data.detail.birthday;
                _this.vm.nation = data.detail.nation;
                _this.vm.personId = data.detail.personId;
                _this.vm.address = data.detail.address;
                _this.vm.startDate = data.detail.startDate;
                _this.vm.endDate = data.detail.endDate;
                _this.vm.department = data.detail.department;
                _this.vm.imgPath = data.detail.imgPath;
                _this.vm.show_card_result = true;
                canvas_cards = document.getElementById("canvas_card");
                cxt = canvas_cards.getContext("2d");
                $("#myTab li:eq(1) a").tab("show");
                $("#myTab li:eq(0)").addClass("done");
                $('#form_wizard_1').find('.button-previous').show();
                $('#form_wizard_1').find('.button-next').show();
                $('.alert-error', $('#submit_form')).hide();
                _this.vm.next_action = "对比";
                $('#form_wizard_1').find('.bar').css({
                  width: 66.66 + '%'
                });
                img = new Image();
                img.src = path + '/person.jpg';
                img.onload = function() {
                  var dataURL, filename, h, w;
                  w = Math.min(400, img.width);
                  h = img.height * (w / img.width);
                  canvas_cards.width = w;
                  canvas_cards.height = h;
                  cxt.drawImage(img, 0, 0);
                  dataURL = canvas_cards.toDataURL("image/jpg");
                  _this.personal_id = _this.vm.personId;
                  filename = _this.sd.register.items["account"] + "_" + _this.personal_id + "_person.jpg";
                  return _this._upload(dataURL, filename, _this.sd.host);
                };
                if (_this._loop != null) {
                  return clearInterval(_this._loop);
                }
              } else {

              }
            });
            return machine_detail.fail(function() {
              _this.vm.show_card_result = false;
              $('.alert-error', $('#submit_form')).show();
              return (new MessageModal(_this.vm.lang.get_card_error)).attach();
            });
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    FacePage.prototype.compare = function() {
      var chain, e;
      try {

        /*
        @frozen()
        chain = new Chain
        chain.chain =>
            (new MachineRest 'localhost:4567').compare 'E:\\demo\\own.jpg'
        chain.chain @sd.update("all")
        show_chain_progress(chain).done =>
            query = (new MachineRest('localhost:4567'))
            machine_detail = query.compare 'E:\\demo\\own.jpg'
            machine_detail.done (data) =>
                if data.status is "success"
                    (new MessageModal(@vm.lang.compare_success(data.detail))).attach()
                else
                    (new MessageModal(@vm.lang.compare_error)).attach()
            machine_detail.fail =>
                (new MessageModal(@vm.lang.compare_link_error)).attach()
        @frozen()
        chain = new Chain
        chain.chain =>
            (new MachineRest '192.168.2.84:4567').compare "123"
        chain.chain @sd.update("all")
        show_chain_progress(chain).done =>
            query = (new MachineRest('192.168.2.84:4567'))
            machine_detail = query.compare "123"
            machine_detail.done (data) =>
                console.log data
                if data.status is "success"
                    (new MessageModal(@vm.lang.compare_success(data.detail))).attach()
                else
                    (new MessageModal(@vm.lang.compare_error)).attach()
            machine_detail.fail =>
                (new MessageModal(@vm.lang.compare_link_error)).attach()
         */

        /*
        @frozen()
        chain = new Chain
        chain.chain =>
            (new MachineRest @sd.host).compare "123456789",false
        chain.chain @sd.update("all")
        show_chain_progress(chain).done =>
            query = (new MachineRest(@sd.host))
            machine_detail = query.compare @sd.register.items["account"],true
            machine_detail.done (data) =>
                console.log data
                @vm.show_results = false
                pass = document.getElementById('show_result_pass')
                
                if data.status is "success"
                    @vm.compare_result = "识别成功,相似度:" + data.detail + "%"
                    $("#show_result_pass").stamper(
                        image : "images/pass.png",
                        scale : 3,
                        speed : 300
                    )
                     *pass.src = "images/pass.png"
                     *(new MessageModal(@vm.lang.compare_success(data.detail))).attach()
                else
                     *pass.src = "images/failed.png"
                    $("#show_result_pass").stamper(
                        image : "images/failed.png",
                        scale : 3,
                        speed : 300
                    )
                    if data.detail is "remain is 0"
                        @vm.compare_result = "剩余次数不足"
                         *(new MessageModal(@vm.lang.compare_remain_error)).attach()
                    else
                        @vm.compare_result = "识别度过低，请将面部对准摄像头"
                         *(new MessageModal(@vm.lang.compare_error)).attach()
        
            machine_detail.fail =>
                (new MessageModal(@vm.lang.compare_link_error)).attach()
            $('#form_wizard_1').find('.button-previous').hide();
         */
        this.frozen();
        chain = new Chain;
        chain.chain((function(_this) {
          return function() {
            return (new MachineRest(_this.sd.host)).compare(_this.sd.register.items["account"], _this.personal_id, _this.person_msg);
          };
        })(this));
        chain.chain(this.sd.update("all"), true);
        return show_chain_progress(chain).done((function(_this) {
          return function() {
            return console.log('compare-success');
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    FacePage.prototype.show_stamp = function(con) {
      $('#form_wizard_1').find('.button-previous').hide();
      this.vm.show_loading = false;
      if (parseInt(con) < 50) {
        this.vm.compare_result = "识别度过低,请对准摄像头";
        return $("#show_result_pass").stamper({
          image: "images/failed.png",
          scale: 3,
          speed: 300
        });
      } else {
        this.vm.compare_result = "识别成功,相似度为:" + con + "%";
        return $("#show_result_pass").stamper({
          image: "images/pass.png",
          scale: 3,
          speed: 300
        });
      }
    };

    FacePage.prototype.getpic = function() {
      var machine_detail, query;
      query = new MachineRest('localhost:4567');
      machine_detail = query.get_pic("123");
      machine_detail.done((function(_this) {
        return function(data) {
          return console.log(data);
        };
      })(this));
      return console.log(123123);
    };

    FacePage.prototype.webcam = function(page) {
      return $(function() {
              var sayCheese = new SayCheese('#webcam', { audio: false });
              sayCheese.on('start', function() {
                //console.log(123123000);
                //this.takeSnapshot();
                page.vm.camera_error = false;
              })
              function base64Img2Blob(code){
                        var parts = code.split(';base64,');
                        var contentType = parts[0].split(':')[1];
                        var raw = window.atob(parts[1]);
                        var rawLength = raw.length;

                        var uInt8Array = new Uint8Array(rawLength);

                        for (var i = 0; i < rawLength; ++i) {
                          uInt8Array[i] = raw.charCodeAt(i);
                        }

                        return new Blob([uInt8Array], {type: contentType}); 
                    };
                    function downloadFile(fileName, content){
                       
                        var aLink = document.createElement('a');
                        var blob = base64Img2Blob(content); //new Blob([content]);
                        //page.compare(blob);
                        var evt = document.createEvent("HTMLEvents");
                        evt.initEvent("click", false, false);//initEvent 不加后两个参数在FF下会报错
                        aLink.download = fileName;
                        aLink.href = URL.createObjectURL(blob);
                        aLink.dispatchEvent(evt);
                    };       
              sayCheese.on('snapshot', function(snapshot) {
                try{
                    var mirror = document.getElementById('mirror');
                    mirror.width = snapshot.width;
                    mirror.height = snapshot.height;
                    var imgData = snapshot.toDataURL('png');
                    mirror.src = imgData;
                    page.vm.show_canvas = true;

                    var filename = page.sd.register.items["account"] + "_" + page.personal_id +"_own.jpg";
                    page._upload(snapshot.toDataURL("image/jpg"),filename,page.sd.host);

                    //var mirror_shots = document.getElementById('mirror_shot');
                    //mirror_shots.src = imgData;
                    //var shotimg = document.getElementById('shotimg');
                    //shotimg.width = snapshot.width;
                    //shotimg.height = snapshot.height;
                    //shotimg.src = imgData;
                    //page.dataurl = snapshot.toDataURL('image/png').replace(/^data:image\/(png|jpg);base64,/, "");
                    //page.compare(snapshot.toDataURL("image/jpg"));
                    //sayCheese.stop();
                    //downloadFile('own.jpg', snapshot.toDataURL("image/jpg"));
                    //page.getpic();
                    //console.log(1231238989);
                    //sayCheese.start();
                    //page.vm.show_cam = false;
                    //sayCheese.start();
                    //page.process(3);
                    //console.log(snapshot);
                }
                catch(e){
                    console.log(e);
                }
              });
            
              sayCheese.start();
              
              $('#shot').click(function () {
                //console.log(sayCheese);
                try{
                    sayCheese.takeSnapshot();
                }catch(e){
                    return;
                }
              });
        });
    };

    FacePage.prototype._upload = function(base64, filename, host) {
      return $(function() {
            try{
                function sumitImageFile(base64Codes){
                    var form=document.forms[0];
                    var formData = new FormData(form);  
                    formData.append("imageName",convertBase64UrlToBlob(base64Codes),filename);  
                    $.ajax({
                        url : "http://" + host + "/api/upgrade",
                        //url : "http://192.168.2.122:4569/api/upgrade",
                        type : "POST",
                        data : formData,
                        dataType:"text",
                        processData : false,        
                        contentType : false,
                        beforeSend: function(request) {
                            request.setRequestHeader("Test", "Chenxizhang");
                        },
                        success:function(data){
                            //window.location.href="${ctx}"+data;
                            //return (new MessageModal(lang.fileupload.upload_success)).attach();
                        },
                        xhr:function(){            
                            var xhr = new XMLHttpRequest();
                            xhr.upload.addEventListener("progress", function(evt){
                                if (evt.lengthComputable) {
                                    var percentComplete = Math.round(evt.loaded * 100 / evt.total);  
                                    console.log("正在提交."+percentComplete.toString() + '%');        //在控制台打印上传进度
                                }
                            }, false);
                            return xhr;
                        }
                        
                    });
                }
                function convertBase64UrlToBlob(urlData){
                    var bytes=window.atob(urlData.split(',')[1]);       
                    var ab = new ArrayBuffer(bytes.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < bytes.length; i++) {
                        ia[i] = bytes.charCodeAt(i);
                    }
                    return new Blob( [ab] , {type : 'image/jpeg'});
                }
                sumitImageFile(base64);
            }catch(e){
                console.log(e);
            }
        });
    };

    FacePage.prototype.process = function(index) {
      var rate;
      $('#form_wizard').bootstrapWizard(rate = index / 3, $('#form_wizard').find('.bar').css({
        width: rate + '%'
      }));
      if (index === 2) {
        $("#myTab li:eq(1) a").tab("show");
      }
      if (index === 3) {
        return $("#myTab li:eq(2) a").tab("show");
      }
    };

    return FacePage;

  })(DetailTablePage);

  RegisterPage = (function(_super) {
    __extends(RegisterPage, _super);

    function RegisterPage(sd, switch_to_page) {
      this.sd = sd;
      this.switch_to_page = switch_to_page;
      this.subitems_journal = __bind(this.subitems_journal, this);
      this.change_data = __bind(this.change_data, this);
      this.change_head = __bind(this.change_head, this);
      this.baidu_maps_old = __bind(this.baidu_maps_old, this);
      this.baidu_maps_new = __bind(this.baidu_maps_new, this);
      this.gaode_maps = __bind(this.gaode_maps, this);
      this.location = __bind(this.location, this);
      this.calendar = __bind(this.calendar, this);
      this.weather = __bind(this.weather, this);
      this.recharge = __bind(this.recharge, this);
      this.record_detail = __bind(this.record_detail, this);
      this.subitems = __bind(this.subitems, this);
      this.refresh = __bind(this.refresh, this);
      this.update_journal = __bind(this.update_journal, this);
      this.old_time = __bind(this.old_time, this);
      this.baidu_weather = __bind(this.baidu_weather, this);
      this.day_chart = __bind(this.day_chart, this);
      this.count_day = __bind(this.count_day, this);
      this.datatable_init = __bind(this.datatable_init, this);
      this.chart_active = __bind(this.chart_active, this);
      this.grab_data = __bind(this.grab_data, this);
      this.count_day_amchart = __bind(this.count_day_amchart, this);
      this.waves = __bind(this.waves, this);
      this.fullpage = __bind(this.fullpage, this);
      this.scroller = __bind(this.scroller, this);
      this.nprocess = __bind(this.nprocess, this);
      this.avatar = __bind(this.avatar, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      RegisterPage.__super__.constructor.call(this, "userfilepage-", "html/registerpage.html");

      /*$(@sd.register).on "updated", (e, source) =>
          @vm.journal = @subitems()
      
      $(@sd).on "compareresult", (e, result) =>
           *@vm.journal = @subitems()
       */
    }

    RegisterPage.prototype.define_vm = function(vm) {
      vm.lang = lang.register;
      vm.journal = this.subitems();
      vm.fattr_journal_status = fattr.journal_status;
      vm.email = "";
      vm.hotelname = "";
      vm.location = "";
      vm.realname = "";
      vm.remain = "";
      vm.tel = "";
      vm.userlevel = "";
      vm.user = "";
      vm.summary = "";
      vm.total = "";
      vm.sex = "";
      vm.average = "";
      vm.change_data = this.change_data;
      vm.change_head = this.change_head;
      vm.recharge = this.recharge;
      vm.show_weather = false;
      vm.record_detail = this.record_detail;
      vm.user_name = "";
      vm.amount_compare = 0;
      vm.air = "";
      vm.location = "";
      vm.month_day = "";
      vm.week = "";
      vm.old_date = "";
      vm.temp = "";
      vm.day1 = "";
      vm.day2 = "";
      vm.day3 = "";
      vm.city = "深圳市";
      vm.show_weather_animate = false;
      vm.switch_to_page = this.switch_to_page;
      vm.gaode_maps = this.gaode_maps;
      vm.remain = "0";
      vm.userlevel = "0";
      vm.total = "0";
      vm.average = "0";
      return vm.user = "加载中..";
    };

    RegisterPage.prototype.rendered = function() {
      var $scroller;
      RegisterPage.__super__.rendered.call(this);
      this.avatar();
      $('.tip-twitter').remove();
      $('.anchorBL').remove();
      $('.hastip').poshytip({
        className: 'tip-twitter',
        showTimeout: 1,
        alignTo: 'target',
        alignX: 'center',
        offsetY: 5,
        allowTipHover: false,
        fade: false,
        slide: false
      });
      $scroller = $("#journals-scroller-1");
      $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $('#slider').nivoSlider({
        effect: "fade",
        animSpeed: 100,
        pauseTime: 10000
      });
      this.vm.show_weather_animate = false;
      this.vm.show_weather = false;
      this.refresh();
      this.gaode_maps();
      this.datatable_init(this);
      this.count_day(this, this.sd.pay.items);
      this.old_time(this);
      this.nprocess();
      this.count_day_amchart(this, this.sd.pay.items);
      this.baidu_weather(this, this.vm.city);
      new WOW().init();
      return $("#fadein").attr('style', "display:block;");
    };

    RegisterPage.prototype.avatar = function() {
      var id, urls;
      id = this.sd.register.items["account"];
      urls = 'http://' + this.sd.host + '/downloadAvatar/' + id + '/head/' + id + '_head.jpg';
      $("#headers").attr('src', urls + "?t=" + random);
      return $("#user_img_log").attr('src', urls + "?t=" + random);
    };

    RegisterPage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 500);
    };

    RegisterPage.prototype.scroller = function() {
      return $(window).on("load", (function(_this) {
        return function() {
          return $(".page-content").mCustomScrollbar();
        };
      })(this));
    };

    RegisterPage.prototype.fullpage = function() {
      $('#fullpage').fullpage({
        navigation: true,
        navigationPosition: "right",
        navigatinColor: "blue",
        loopBottom: true
      });
      return $.fn.fullpage.setAutoScrolling(true);
    };

    RegisterPage.prototype.waves = function() {
      window.Waves.attach('.wave', ['waves-button', 'waves-float']);
      return window.Waves.init();
    };

    RegisterPage.prototype.data_refresh = function() {
      var chain;
      chain = new Chain;
      chain.chain(this.sd.update("pay"));
      show_chain_progress(chain).done(function() {
        return console.log("Refresh Registerpage");
      });
    };

    RegisterPage.prototype.count_day_amchart = function(page, items) {
      return $(function () {
            function Appendzero(obj)  
            {  
                if(obj<10) return "0" +""+ obj;  
                else return obj;  
            }

            var myDate = new Date(); //获取今天日期

            myDate.setDate(myDate.getDate() - 9);
            var dateArray = []; 
            var dateTemp; 
            var total_count = {};
            var average_count = {};
            var flag = 1; 
            var total = [];
            for (var i = 0; i <= 9; i++) {
                dateTemp = (myDate.getFullYear() + '-' + Appendzero(myDate.getMonth()+1)) + "-" + Appendzero(myDate.getDate());
                dateArray.push(dateTemp);
                myDate.setDate(myDate.getDate() + flag);
            }
            for (var i = 0; i < dateArray.length; i++) {
                total_count[dateArray[i]] = 0;
                average_count[dateArray[i]] = 0;
            }   

            Array.prototype.Exists=function(v){
                var b=false;
                for(var i=0;i<this.length;i++){
                    if(this[i]==v){
                        b=true;
                        break;
                    }
                }
                return b;
            }

            for (var i = 0; i < items.length; i++) {
                var strdate = items[i].created.split(" ")[0].split("-")[0] + '-' + items[i].created.split(" ")[0].split("-")[1] + '-' + items[i].created.split(" ")[0].split("-")[2];
                average_count[items[i].created.split(" ")[0]] = average_count[items[i].created.split(" ")[0]] + parseInt(items[i].confidence)
                if ( dateArray.Exists(strdate)) {
                    total_count[strdate] = total_count[strdate] + 1;
                }
            }

            for (var i = 0; i < dateArray.length; i++) {
                total.push(total_count[dateArray[i]]);
                if (total_count[dateArray[i]] !== 0) {
                    average_count[dateArray[i]] = parseInt(average_count[dateArray[i]] / total_count[dateArray[i]]);
                }
            }
            page.grab_data(dateArray,total,average_count)
        });
    };

    RegisterPage.prototype.grab_data = function(dateArray, total, average_count) {
      var chartdata, chartdata1, i, _i, _ref;
      chartdata1 = [
        {
          "date": "2012-01-01",
          "rate": 227,
          "townName": "New York",
          "townName2": "New York",
          "townSize": 25,
          "average": 40
        }, {
          "date": "2012-01-02",
          "rate": 371,
          "townName": "Washington",
          "townSize": 14,
          "average": 38
        }, {
          "date": "2012-01-03",
          "rate": 433,
          "townName": "Wilmington",
          "townSize": 6,
          "average": 34
        }, {
          "date": "2012-01-04",
          "rate": 345,
          "townName": "Jacksonville",
          "townSize": 7,
          "average": 30
        }, {
          "date": "2012-01-05",
          "rate": 480,
          "townName": "Miami",
          "townName2": "Miami",
          "townSize": 10,
          "average": 25
        }, {
          "date": "2012-01-06",
          "rate": 386,
          "townName": "Tallahassee",
          "townSize": 7,
          "average": 30
        }, {
          "date": "2012-01-07",
          "rate": 348,
          "townName": "New Orleans",
          "townSize": 10,
          "average": 29
        }, {
          "date": "2012-01-08",
          "rate": 238,
          "townName": "Houston",
          "townName2": "Houston",
          "townSize": 16,
          "average": 29
        }, {
          "date": "2012-01-09",
          "rate": 218,
          "townName": "Dalas",
          "townSize": 17,
          "average": 32
        }, {
          "date": "2012-01-10",
          "rate": 349,
          "townName": "Oklahoma City",
          "townSize": 11,
          "average": 35
        }
      ];
      chartdata = [];
      for (i = _i = 0, _ref = dateArray.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        chartdata.push({
          "date": dateArray[i],
          "rate": total[i],
          "townName": "",
          "townSize": 10,
          "average": average_count[dateArray[i]]
        });
      }
      return this.chart_active(chartdata);
    };

    RegisterPage.prototype.chart_active = function(chartData) {
      return $(function() {
            /*var chartData = [ {
              "date": "2012-01-01",
              "distance": 227,
              "townName": "New York",
              "townName2": "New York",
              "townSize": 25,
              "latitude": 40
            }, {
              "date": "2012-01-02",
              "distance": 371,
              "townName": "Washington",
              "townSize": 14,
              "latitude": 38
            }, {
              "date": "2012-01-03",
              "distance": 433,
              "townName": "Wilmington",
              "townSize": 6,
              "latitude": 34
            }, {
              "date": "2012-01-04",
              "distance": 345,
              "townName": "Jacksonville",
              "townSize": 7,
              "latitude": 30
            }, {
              "date": "2012-01-05",
              "distance": 480,
              "townName": "Miami",
              "townName2": "Miami",
              "townSize": 10,
              "latitude": 25
            }, {
              "date": "2012-01-06",
              "distance": 386,
              "townName": "Tallahassee",
              "townSize": 7,
              "latitude": 30
            }, {
              "date": "2012-01-07",
              "distance": 348,
              "townName": "New Orleans",
              "townSize": 10,
              "latitude": 29
            }, {
              "date": "2012-01-08",
              "distance": 238,
              "townName": "Houston",
              "townName2": "Houston",
              "townSize": 16,
              "latitude": 29
            }, {
              "date": "2012-01-09",
              "distance": 218,
              "townName": "Dalas",
              "townSize": 17,
              "latitude": 32
            }, {
              "date": "2012-01-10",
              "distance": 349,
              "townName": "Oklahoma City",
              "townSize": 11,
              "latitude": 35
            }, {
              "date": "2012-01-11",
              "distance": 603,
              "townName": "Kansas City",
              "townSize": 10,
              "latitude": 39
            }, {
              "date": "2012-01-12",
              "distance": 534,
              "townName": "Denver",
              "townName2": "Denver",
              "townSize": 18,
              "latitude": 39
            }, {
              "date": "2012-01-13",
              "townName": "Salt Lake City",
              "townSize": 12,
              "distance": 425,
              "latitude": 40,
              "alpha": 0.4
            }, {
              "date": "2012-01-14",
              "latitude": 36,
              "distance": 425,
              "townName": "Las Vegas",
              "townName2": "Las Vegas",
              "bulletClass": "lastBullet"
            }];*/
            var chart = AmCharts.makeChart( "amchart", {

              "type": "serial",
              "theme": "light",
              "fontFamily":"Microsoft YaHei",
              
              "dataDateFormat": "YYYY-MM-DD",
              "dataProvider": chartData,

              "addClassNames": true,
              "startDuration": 1,
              //"color": "#FFFFFF",
              "marginLeft": 0,

              "categoryField": "date",
              "categoryAxis": {
                "parseDates": true,
                "minPeriod": "DD",
                "autoGridCount": false,
                "gridCount": 50,
                "gridAlpha": 0.1,
                "gridColor": "#FFFFFF",
                "axisColor": "#555555",
                "dateFormats": [ {
                  "period": 'DD',
                  "format": 'DD'
                }, {
                  "period": 'WW',
                  "format": 'MMM DD'
                }, {
                  "period": 'MM',
                  "format": 'MMM'
                }, {
                  "period": 'YYYY',
                  "format": 'YYYY'
                } ]
              },

              "valueAxes": [ {
                "id": "a1",
                "title": "对比次数",
                "gridAlpha": 0,
                "axisAlpha": 0
              }, {
                "id": "a2",
                "position": "right",
                "gridAlpha": 0,
                "axisAlpha": 0,
                "labelsEnabled": false
              }],
              "graphs": [ {
                "id": "g1",
                "valueField": "rate",
                "title": "对比次数",
                "type": "column",
                "fillAlphas": 0.9,
                "valueAxis": "a1",
                "balloonText": "[[value]] 次",
                "legendValueText": "[[value]] 次",
                "legendPeriodValueText": "总共: [[value.sum]] 次",
                "lineColor": "rgba(124, 181, 236,0.5)",
                "alphaField": "alpha"
              }, {
                "id": "g2",
                "valueField": "average",
                "classNameField": "bulletClass",
                "title": "平均相似度",
                "type": "line",
                "valueAxis": "a2",
                "lineColor": "rgb(137, 196, 244)",
                "lineThickness": 1,
                "legendValueText": "[[value]] %",
                "descriptionField": "townName",
                "bullet": "round",
                "bulletSizeField": "townSize",
                "bulletBorderColor": "rgb(23, 150, 249)",
                "bulletBorderAlpha": 1,
                "bulletBorderThickness": 3,
                "bulletColor": "rgba(255,255,255,1)",
                "labelText": "[[townName2]]",
                "labelPosition": "right",
                "balloonText": "平均相似度:[[value]] %",
                "showBalloon": true,
                "animationPlayed": true
              }],

              "chartCursor": {
                "zoomable": false,
                "categoryBalloonDateFormat": "DD",
                "cursorAlpha": 0,
                "valueBalloonsEnabled": false
              },
              "legend": {
                "bulletType": "round",
                "equalWidths": false,
                "valueWidth": 120,
                "useGraphSettings": true,
                //"color": "#FFFFFF"
              }
            } );
        });
    };

    RegisterPage.prototype.datatable_init = function(page) {
      return $(function() {
            var table = $("#log-table1").DataTable(dtable_opt({
                /*retrieve: true,
                bSort: false,
                scrollX: true,*/
                destroy:true,
                bProcessing: true,
                bServerSide: true,
                sAjaxSource: "http://" + page.sd.host + "/api/searchRecord",
                aoColumnDefs: [
                  {
                    "aTargets": [0],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                        return  "<img src=http://" + page.sd.host + "/images" + full[0].replace(" ", "%20") + " style='height: 20px;width: 20px;'>";
                    }
                  }, {
                    "aTargets": [1],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                        return  "<img src=http://" + page.sd.host + "/images" + full[1].replace(" ", "%20") + " style='height: 20px;width: 20px;'>";
                    }
                  }
                ],
                fnServerData: function(sSource, aoData, fnCallback) {
                  aoData.push({
                    "name": "account",
                    "value": page.sd.register.items["account"]
                  });
                  return $.ajax({
                    "type": 'post',
                    "url": sSource,
                    "dataType": "json",
                    "data": aoData,
                    "success": function(resp) {
                      //page.count_day(page,page.sd.pay.items);
                      try{
                        return fnCallback(resp);
                       }catch(e){
                        return
                       }
                    },
                    "error": function(e) {
                      return console.log('error');
                    }
                  });
                }
            }));
            $(".dataTables_filter input").addClass("m-wrap small");
            $(".dataTables_length select").addClass("m-wrap small");

            $('#log-table1 tbody').on( 'click', 'a', function () {
                var data = table.row( $(this).parents('tr') ).data();
                page.record_detail(data[ 3 ]);
            });
        });
    };

    RegisterPage.prototype.count_day = function(page, items) {
      return $(function () { 
            var myDate = new Date(); //获取今天日期
            myDate.setDate(myDate.getDate() - 9);
            var dateArray = []; 
            var dateTemp; 
            var total_count = {}
            var flag = 1; 
            var total = [];
            page.vm.amount_compare = 0;
            for (var i = 0; i <= 9; i++) {
                dateTemp = (myDate.getMonth()+1)+"月"+myDate.getDate();
                dateArray.push(dateTemp);
                myDate.setDate(myDate.getDate() + flag);
            }
            //var total = [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1];

            for (var i = 0; i < dateArray.length; i++) {
                total_count[dateArray[i]] = 0;
            }

            Array.prototype.Exists=function(v){
                var b=false;
                for(var i=0;i<this.length;i++){
                    if(this[i]==v){
                        b=true;
                        break;
                    }
                }
                return b;
            }

            for (var i = 0; i < items.length; i++) {
                var strdate = parseInt(items[i].created.split(" ")[0].split("-")[1]) + '月' + parseInt(items[i].created.split(" ")[0].split("-")[2]);
                if ( dateArray.Exists(strdate)) {
                    total_count[strdate] = total_count[strdate] + 1;
                }
            }

            for (var i = 0; i < dateArray.length; i++) {
                page.vm.amount_compare = page.vm.amount_compare + total_count[dateArray[i]];
                total.push(total_count[dateArray[i]]);
            }
            page.day_chart(dateArray,total);
        });
    };

    RegisterPage.prototype.day_chart = function(time, total) {
      return $(function () {
            $('#day_chart').highcharts({
                chart: {
                    type: 'areaspline',
                    marginRight: 10,
                    plotBorderColor:"rgb(255, 255, 255)",
                    plotBorderWidth:1
                },
                title: {
                    text: ''
                },
                subtitle: {
                    text: ''
                },
                exporting: {
                    enabled: false
                },
                credits: {
                    enabled:false
                },
                tooltip: {
                    formatter: function () {
                        return this.x + '<br/>' +
                               '<b>' + this.series.name + ':' +'</b>' + Highcharts.numberFormat(this.y, 0);
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8,
                        fontFamily:"Microsoft Yahei"
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                xAxis: {
                    categories: time,
                    labels:{
                        style: { 
                            "fontFamily": "Microsoft Yahei" 
                        }
                    }
                },
                yAxis: {
                    title: {
                        text: ''
                    },
                    min:-1,
                    tickColor:"rgba(0,0,0,0)",
                    tickWidth: 0,
                    gridLineColor: 'rgba(0,0,0,0)',
                    labels:{
                        enabled:false
                    }
                },
                plotOptions: {
                    areaspline: {
                        threshold: null,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        fillOpacity: 0.2,
                        marker: {
                            enabled: true,
                            symbol: 'circle',
                            radius: 5.0,
                            lineWidth: 3,
                            lineColor: "#1796f9",
                            fillColor:"#fff",
                            states: {
                                hover: {
                                    enabled: true
                                }
                            }
                        },
                        lineWidth: 2
                    }
                },
                series: [{
                    name: '对比次数',
                    data: total,
                    showInLegend: false
                }]
            });
        });
    };

    RegisterPage.prototype.baidu_weather = function(page, city) {
      var xhr;
      if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest();
      } else {
        xhr = new ActiveXObject("Microsoft.XMLHTTP");
      }
      xhr.open('get', 'http://api.map.baidu.com/telematics/v3/weather?location=' + city + '&output=json&ak=SGlfxoEEgdtmV60T195lr7BYx6bFLvkI', true);
      xhr.send(null);
      return xhr.onreadystatechange = (function(_this) {
        return function() {
          var air_con, count, e, i, idx, respon, skycons, staus, _i, _len, _ref;
          try {
            if (xhr.readyState === 4 || xhr.readyState === 200) {
              respon = $.parseJSON(xhr.responseText);
              air_con = parseInt(respon.results[0].pm25);
              if (0 <= air_con && air_con < 35) {
                _this.vm.air = "优";
              } else if (35 <= air_con && air_con < 75) {
                _this.vm.air = "良";
              } else if (75 <= air_con && air_con < 115) {
                _this.vm.air = "轻度污染";
              } else if (115 <= air_con && air_con < 150) {
                _this.vm.air = "中度污染";
              } else if (150 <= air_con && air_con < 250) {
                _this.vm.air = "重度污染";
              } else {
                _this.vm.air = "严重污染";
              }
              _this.vm.day1 = respon.results[0].weather_data[1].date;
              _this.vm.day2 = respon.results[0].weather_data[2].date;
              _this.vm.day3 = respon.results[0].weather_data[3].date;
              _this.vm.temp = respon.results[0].weather_data[0].temperature;
              skycons = new Skycons({
                "color": "rgb(22, 158, 244)"
              });
              count = 0;
              _ref = respon.results[0].weather_data;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                i = _ref[_i];
                staus = i.weather;
                idx = 'day' + count + '_weather';
                count = count + 1;
                if (staus.indexOf("晴") >= 0) {
                  skycons.add(document.getElementById(idx), Skycons.CLEAR_DAY);
                } else if (staus.indexOf("云") >= 0) {
                  skycons.add(document.getElementById(idx), Skycons.CLOUDY);
                } else if (staus.indexOf("雹") >= 0) {
                  skycons.add(document.getElementById(idx), Skycons.SLEET);
                } else if (staus.indexOf("雪") >= 0) {
                  skycons.add(document.getElementById(idx), Skycons.SNOW);
                } else if (staus.indexOf("雾") >= 0) {
                  skycons.add(document.getElementById(idx), Skycons.FOG);
                } else {
                  skycons.add(document.getElementById(idx), Skycons.RAIN);
                }
              }
              return skycons.play();
            }
          } catch (_error) {
            e = _error;
            console.log(e);
          }
        };
      })(this);
    };

    RegisterPage.prototype.old_time = function(page) {
      return $(function() {
            function getCurrentDateTime() { 
                var d = new Date(); 
                var year = d.getFullYear(); 
                var month = d.getMonth() + 1; 
                var date = d.getDate(); 
                var week = d.getDay(); 
                /*时分秒*/
                /*var hours = d.getHours(); 
                var minutes = d.getMinutes(); 
                var seconds = d.getSeconds(); 
                var ms = d.getMilliseconds();*/
                var curDateTime = year; 
                if (month > 9) 
                curDateTime = curDateTime + "年" + month; 
                else
                curDateTime = curDateTime + "年0" + month; 
                if (date > 9) 
                curDateTime = curDateTime + "月" + date + "日"; 
                else
                curDateTime = curDateTime + "月0" + date + "日"; 
                /*if (hours > 9) 
                curDateTime = curDateTime + " " + hours; 
                else 
                curDateTime = curDateTime + " 0" + hours; 
                if (minutes > 9) 
                curDateTime = curDateTime + ":" + minutes; 
                else 
                curDateTime = curDateTime + ":0" + minutes; 
                if (seconds > 9) 
                curDateTime = curDateTime + ":" + seconds; 
                else 
                curDateTime = curDateTime + ":0" + seconds;*/
                var weekday = ""; 
                if (week == 0) 
                weekday = "周日"; 
                else if (week == 1) 
                weekday = "周一"; 
                else if (week == 2) 
                weekday = "周二"; 
                else if (week == 3) 
                weekday = "周三"; 
                else if (week == 4) 
                weekday = "周四"; 
                else if (week == 5) 
                weekday = "周五"; 
                else if (week == 6) 
                weekday = "周六"; 
                curDateTime = curDateTime + " " + weekday; 
                return curDateTime; 
            }
            /*获取当前农历*/
            function showCal(){ 
                var D=new Date(); 
                var yy=D.getFullYear(); 
                var mm=D.getMonth()+1; 
                var dd=D.getDate(); 
                var ww=D.getDay(); 
                var ss=parseInt(D.getTime() / 1000); 
                if (yy<100) yy="19"+yy; 
                    return GetLunarDay(yy,mm,dd); 
                } 
                 
                //定义全局变量 
                var CalendarData=new Array(100); 
                var madd=new Array(12); 
                var tgString="甲乙丙丁戊己庚辛壬癸"; 
                var dzString="子丑寅卯辰巳午未申酉戌亥"; 
                var numString="一二三四五六七八九十"; 
                var monString="正二三四五六七八九十冬腊"; 
                var weekString="日一二三四五六"; 
                var sx="鼠牛虎兔龙蛇马羊猴鸡狗猪"; 
                var cYear,cMonth,cDay,TheDate; 
                CalendarData = new Array(0xA4B,0x5164B,0x6A5,0x6D4,0x415B5,0x2B6,0x957,0x2092F,0x497,0x60C96,0xD4A,0xEA5,0x50DA9,0x5AD,0x2B6,0x3126E, 0x92E,0x7192D,0xC95,0xD4A,0x61B4A,0xB55,0x56A,0x4155B, 0x25D,0x92D,0x2192B,0xA95,0x71695,0x6CA,0xB55,0x50AB5,0x4DA,0xA5B,0x30A57,0x52B,0x8152A,0xE95,0x6AA,0x615AA,0xAB5,0x4B6,0x414AE,0xA57,0x526,0x31D26,0xD95,0x70B55,0x56A,0x96D,0x5095D,0x4AD,0xA4D,0x41A4D,0xD25,0x81AA5,0xB54,0xB6A,0x612DA,0x95B,0x49B,0x41497,0xA4B,0xA164B, 0x6A5,0x6D4,0x615B4,0xAB6,0x957,0x5092F,0x497,0x64B, 0x30D4A,0xEA5,0x80D65,0x5AC,0xAB6,0x5126D,0x92E,0xC96,0x41A95,0xD4A,0xDA5,0x20B55,0x56A,0x7155B,0x25D,0x92D,0x5192B,0xA95,0xB4A,0x416AA,0xAD5,0x90AB5,0x4BA,0xA5B, 0x60A57,0x52B,0xA93,0x40E95); 
                madd[0]=0; 
                madd[1]=31; 
                madd[2]=59; 
                madd[3]=90; 
                madd[4]=120; 
                madd[5]=151; 
                madd[6]=181; 
                madd[7]=212; 
                madd[8]=243; 
                madd[9]=273; 
                madd[10]=304; 
                madd[11]=334; 
                 
                function GetBit(m,n){ 
                return (m>>n)&1; 
                } 
                //农历转换 
                function e2c(){ 
                TheDate= (arguments.length!=3) ? new Date() : new Date(arguments[0],arguments[1],arguments[2]); 
                var total,m,n,k; 
                var isEnd=false; 
                var tmp=TheDate.getYear(); 
                if(tmp<1900){ 
                tmp+=1900; 
                } 
                total=(tmp-1921)*365+Math.floor((tmp-1921)/4)+madd[TheDate.getMonth()]+TheDate.getDate()-38; 
                 
                if(TheDate.getYear()%4==0&&TheDate.getMonth()>1) { 
                total++; 
                } 
                for(m=0;;m++){ 
                k=(CalendarData[m]<0xfff)?11:12; 
                for(n=k;n>=0;n--){ 
                if(total<=29+GetBit(CalendarData[m],n)){ 
                isEnd=true; break; 
                } 
                total=total-29-GetBit(CalendarData[m],n); 
                } 
                if(isEnd) break; 
                } 
                cYear=1921 + m; 
                cMonth=k-n+1; 
                cDay=total; 
                if(k==12){ 
                if(cMonth==Math.floor(CalendarData[m]/0x10000)+1){ 
                cMonth=1-cMonth; 
                } 
                if(cMonth>Math.floor(CalendarData[m]/0x10000)+1){ 
                cMonth--; 
                } 
                } 
                } 
                 
                function GetcDateString(){ 
                var tmp=""; 
                /*显示农历年：（ 如：甲午(马)年 ）*/
                /*tmp+=tgString.charAt((cYear-4)%10); 
                tmp+=dzString.charAt((cYear-4)%12); 
                tmp+="("; 
                tmp+=sx.charAt((cYear-4)%12); 
                tmp+=")年 ";*/
                if(cMonth<1){ 
                tmp+="(闰)"; 
                tmp+=monString.charAt(-cMonth-1); 
                }else{ 
                tmp+=monString.charAt(cMonth-1); 
                } 
                tmp+="月"; 
                tmp+=(cDay<11)?"初":((cDay<20)?"十":((cDay<30)?"廿":"三十")); 
                if (cDay%10!=0||cDay==10){ 
                tmp+=numString.charAt((cDay-1)%10); 
                } 
                return tmp; 
                } 
                 
                function GetLunarDay(solarYear,solarMonth,solarDay){ 
                //solarYear = solarYear<1900?(1900+solarYear):solarYear; 
                if(solarYear<1921 || solarYear>2020){ 
                return ""; 
                }else{ 
                solarMonth = (parseInt(solarMonth)>0) ? (solarMonth-1) : 11; 
                e2c(solarYear,solarMonth,solarDay); 
                return GetcDateString(); 
                } 
            }
            var date = getCurrentDateTime(); 
            var calendar = showCal(); 
            page.vm.month_day = date.split(" ")[0];
            page.vm.week = date.split(" ")[1];
            page.vm.old_date = calendar;
        });
    };

    RegisterPage.prototype.update_journal = function() {
      return $(document).ready(function() {
            try{
                var xhr;  
                if (window.XMLHttpRequest){  
                    xhr=new XMLHttpRequest();  
                }else{  
                    xhr=new ActiveXObject("Microsoft.XMLHTTP");  
                }
                var id = page.sd.register.items["account"];
                xhr.open('get','http://' + page.sd.host + '/api/getRecord/' + id ,true);
                xhr.send(null);
                xhr.onreadystatechange = function(){  
                    if(xhr.readyState==4 || xhr.readyState==200){
                        console.log(JSON.parse(xhr.responseText));  
                    }  
                }
            }catch(e){
                console.log('error');
            }
        });
    };

    RegisterPage.prototype.refresh = function() {
      this.vm.email = this.sd.register.items["email"];
      this.vm.hotelname = this.sd.register.items["hotelname"];
      this.vm.location = this.sd.register.items["location"];
      this.vm.realname = this.sd.register.items["realname"];
      this.vm.remain = this.sd.register.items["remain"];
      this.vm.tel = this.sd.register.items["tel"];
      this.vm.userlevel = this.sd.register.items["userlevel"];
      this.vm.user = this.sd.register.items["user"];
      this.vm.total = this.sd.register.items["total"];
      this.vm.sex = this.sd.register.items["sex"];
      this.vm.average = this.sd.register.items["average"];
      if (this.vm.hotelname === "") {
        this.vm.hotelname = "请填写";
      }
      if (this.vm.location === "") {
        this.vm.location = "请填写";
      }
      if (this.vm.realname === "") {
        this.vm.realname = "请填写";
      }
      if (this.vm.tel === "") {
        this.vm.tel = "请填写";
      }
      if (this.vm.sex === "") {
        this.vm.sex = "请填写";
      }
      if (this.vm.user === "") {
        return this.vm.user = "请填写";
      }
    };

    RegisterPage.prototype.subitems = function() {
      var e;
      try {
        return this.sd.pay.items.reverse();
      } catch (_error) {
        e = _error;
        return [];
      }
    };

    RegisterPage.prototype.record_detail = function(uid) {
      return (new RegisterRecordModal(this.sd, this, uid)).attach();
    };

    RegisterPage.prototype.recharge = function() {
      return (new RegisterRechargeModal(this.sd, this)).attach();
    };

    RegisterPage.prototype.weather = function() {
      return $(function() {
          $.simpleWeather({
            location: '广东, 深圳',
            woeid: '',
            unit: 'c',
            success: function(weather) {
              html = '<h2><i class="icon-'+weather.code+'"></i> '+weather.temp+'&deg;'+weather.units.temp+'</h2>';
              html += '<ul><li>'+weather.city+', '+weather.region+'</li>';
              html += '<li class="currently">'+weather.currently+'</li>';
              //html += '<li>'+weather.wind.direction+' '+weather.wind.speed+' '+weather.units.speed+'</li></ul>';
          
              $("#_weather").html(html);
            },
            error: function(error) {
              $("#_weather").html('<p>'+error+'</p>');
            }
          });
        });
    };

    RegisterPage.prototype.calendar = function() {
      return $(document).ready(function() {
            $('#_calendar').clndr({
              template: $('#_calendar').html(),
              events: [
                { date: '2013-09-09', title: 'CLNDR GitHub Page Finished', url: 'http://github.com/kylestetz/CLNDR' }
              ],
              clickEvents: {
                click: function(target) {
                  console.log(target);
                },
                onMonthChange: function(month) {
                  console.log('you just went to ' + month.format('MMMM, YYYY'));
                }
              },
              doneRendering: function() {
                console.log('this would be a fine place to attach custom event handlers.');
              }
            });
        });
    };

    RegisterPage.prototype.location = function() {
      var latitude, longitude;
      longitude = 113.8875210000;
      latitude = 22.5533490000;
      return this.maps(longitude, latitude);
    };

    RegisterPage.prototype.gaode_maps = function() {
      var e, map;
      try {
        map = new AMap.Map('allmap', {
          resizeEnable: true
        });
        return map.plugin('AMap.Geolocation', (function(_this) {
          return function() {
            var geolocation;
            geolocation = new AMap.Geolocation({
              enableHighAccuracy: true,
              timeout: 10000,
              buttonOffset: new AMap.Pixel(10, 20),
              zoomToAccuracy: true,
              buttonPosition: 'RB'
            });
            map.addControl(geolocation);
            geolocation.getCurrentPosition();
            AMap.event.addListener(geolocation, 'complete', function(data) {
              var e;
              try {
                return _this.vm.city = data.addressComponent.city;
              } catch (_error) {
                e = _error;
                console.log(e);
              }
            });
            return AMap.event.addListener(geolocation, 'error', function(data) {
              var e;
              try {
                console.log(data);
                return (new MessageModal(lang.register.map_error)).attach();
              } catch (_error) {
                e = _error;
                console.log(e);
              }
            });
          };
        })(this));
      } catch (_error) {
        e = _error;
        console.log(e);
        return (new MessageModal(lang.register.map_error)).attach();
      }
    };

    RegisterPage.prototype.baidu_maps_new = function() {
      var e, keyword, map, urls, xhr;
      try {
        map = new BMap.Map("allmap");
        map.centerAndZoom(new BMap.Point(116.331398, 39.897445), 11);
        map.enableScrollWheelZoom(true);
        $('.anchorBL').remove();
        keyword = this.sd.register.items["location"] + this.sd.register.items["hotelname"];
        urls = "http://api.map.baidu.com/geocoder/v2/?address=" + keyword + "&output=json&ak=SGlfxoEEgdtmV60T195lr7BYx6bFLvkI";
        xhr = new XMLHttpRequest();
        xhr.open('get', urls, true);
        xhr.send(null);
        return xhr.onreadystatechange = (function(_this) {
          return function() {
            var marker, new_point, output;
            output = $.parseJSON(xhr.responseText);
            if (output !== null) {
              map.clearOverlays();
              new_point = new BMap.Point(output.result.location.lng, output.result.location.lat);
              marker = new BMap.Marker(new_point);
              map.addOverlay(marker);
              map.panTo(new_point);
              _this.baidu_weather(_this, _this.vm.city);
            }
          };
        })(this);
      } catch (_error) {
        e = _error;
        console.log(e);
        return (new MessageModal(lang.register.map_error)).attach();
      }
    };

    RegisterPage.prototype.baidu_maps_old = function(page) {
      return $(function() {
            try{
                var map = new BMap.Map("allmap");    // 创建Map实例
                map.centerAndZoom(new BMap.Point(116.404, 39.915), 11);  // 初始化地图,设置中心点坐标和地图级别
                map.addControl(new BMap.MapTypeControl());   //添加地图类型控件
                map.setCurrentCity("深圳");          // 设置地图显示的城市 此项是必须设置的
                map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放
                
                // 用经纬度设置地图中心点
                map.clearOverlays();//清空原来的标注
                var keyword = page.sd.register.items["location"] + page.sd.register.items["hotelname"];
                
                var localSearch = new BMap.LocalSearch(map);
                localSearch.enableAutoViewport(); //允许自动调节窗体大小

                localSearch.setSearchCompleteCallback(function (searchResult) {
                    try{
                        var poi = searchResult.getPoi(0);
                        map.centerAndZoom(poi.point, 10);
                        var marker = new BMap.Marker(new BMap.Point(poi.point.lng, poi.point.lat));  // 创建标注，为要查询的地方对应的经纬度
                        map.addOverlay(marker);

                        //var infoWindow = new BMap.InfoWindow("<p style='font-size:14px;'>" + content + "</p>");
                        //marker.addEventListener("click", function () { this.openInfoWindow(infoWindow); });
                    }catch(e){
                        return (new MessageModal(lang.register.address_error)).attach();
                    }

                });
                $('.anchorBL').remove();
                if (keyword !== ""){
                    localSearch.search(keyword);
                }
                //setTimeout(function(){
                    //map.setZoom(20);   
                //}, 2000);  //2秒后放大到14级
                

                function myFun(result){
                    var cityName = result.name;
                    map.setCenter(cityName);
                    page.vm.city = cityName;
                }
                var myCity = new BMap.LocalCity();
                myCity.get(myFun);
                //page.baidu_weather(page,page.vm.city);
                
                /*$('#relocate').click(function () {
                    var geolocation = new BMap.Geolocation();
                    geolocation.getCurrentPosition(function(r){
                        if(this.getStatus() == BMAP_STATUS_SUCCESS){
                            //var mk = new BMap.Marker(r.point);
                            //map.addOverlay(mk);
                            //map.panTo(r.point);

                            function initdata(){ //页面初始化
                                if (navigator.geolocation){
                                    navigator.geolocation.getCurrentPosition(showPosition,showError);//HTML5获取GPS设备地理位置信息
                                }else{
                                    document.getElementById("allmap").innerHTML="Geolocation is not supported by this browser.";
                                }
                            }
                            function showPosition(position){
                                var x=position.coords.latitude;//获取纬度
                                var y=position.coords.longitude;//获取经度
                                //转为百度地图坐标
                                //注意点：1、coords的经度、纬度顺序（可多组坐标转换，以；（分号）隔开）。2、from与to的准确性。3、callback为回调函数
                                var positionUrl = "http://api.map.baidu.com/geoconv/v1/?coords="+y+","+x+"&from=1&to=5&ak=SGlfxoEEgdtmV60T195lr7BYx6bFLvkI&callback=getMap";
                                var script = document.createElement('script');
                                script.src = positionUrl;
                                document.getElementsByTagName("head")[0].appendChild(script);
                            }
                            function getMap(data){
                                //返回的状态码，0为正常；1为内部错误；21为from非法；22为to非法；24为coords格式非法；25为coords个数非法，超过限制 
                                if(data.status!=0){
                                    alert("地图坐标转换出错");
                                    return ;
                                }
                                //result为数组
                                var result = data.result;
                                var lon = result[0].x;//经度
                                var lat = result[0].y;//纬度
                                                                                                                        
                                // 百度地图API功能
                                var point = new BMap.Point(lon,lat);
                                map.centerAndZoom(point, 14);
                                var marker1 = new BMap.Marker(point);  // 创建标注
                                map.addOverlay(marker1);              // 将标注添加到地图中
                                //创建信息窗口
                                var infoWindow1 = new BMap.InfoWindow("您当前所处的位置,经度:"+lon+";纬度:"+lat);
                                marker1.addEventListener("click", function(){this.openInfoWindow(infoWindow1);});
                            }
                            //HTML5获取地理位置信息错误处理
                            function showError(error)
                            {
                                switch(error.code)
                                  {
                                  case error.PERMISSION_DENIED:
                                    document.getElementById("allmap").innerHTML="User denied the request for Geolocation."
                                    break;
                                  case error.POSITION_UNAVAILABLE:
                                    document.getElementById("allmap").innerHTML="Location information is unavailable."
                                    break;
                                  case error.TIMEOUT:
                                    document.getElementById("allmap").innerHTML="The request to get user location timed out."
                                    break;
                                  case error.UNKNOWN_ERROR:
                                    document.getElementById("allmap").innerHTML="An unknown error occurred."
                                    break;
                                  }
                            }
                            //alert('您的位置：'+r.point.lng+','+r.point.lat);
                        }
                        else {
                            alert('failed'+this.getStatus());
                        }        
                    },{enableHighAccuracy: true})
                });*/

            }catch(e){
                return (new MessageModal(lang.register.map_error)).attach();
            }
        });
    };

    RegisterPage.prototype.change_head = function() {
      return (new RegisterChangeHeadModal(this.sd, this)).attach();
    };

    RegisterPage.prototype.change_data = function() {
      return (new RegisterChangeDataModal(this.sd, this)).attach();
    };

    RegisterPage.prototype.subitems_journal = function() {
      var arrays;
      arrays = [
        {
          "date": "2016/09/07 08:45:37",
          "level": "info",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "critical",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "critical",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "warning",
          "chinese_message": "用户 Ace 完成了一次对比"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "info",
          "chinese_message": "用户 Ace 已欠费"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "info",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "info",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "warning",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "info",
          "chinese_message": "用户 Ace 完成了一次充值"
        }, {
          "date": "2016/09/07 08:45:37",
          "level": "warning",
          "chinese_message": "用户 Ace 完成了一次充值"
        }
      ];
      return arrays;
    };

    return RegisterPage;

  })(DetailTablePage);

  PreCountPage = (function(_super) {
    __extends(PreCountPage, _super);

    function PreCountPage(sd) {
      this.sd = sd;
      this.option_camera = __bind(this.option_camera, this);
      this.goto_count = __bind(this.goto_count, this);
      this.goto_count_server = __bind(this.goto_count_server, this);
      this._search = __bind(this._search, this);
      this.search_data = __bind(this.search_data, this);
      this.datepicker = __bind(this.datepicker, this);
      this.nprocess = __bind(this.nprocess, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      PreCountPage.__super__.constructor.call(this, "countpage-", "html/pre_countpage.html");
    }

    PreCountPage.prototype.define_vm = function(vm) {
      vm.lang = lang.precountpage;
      vm.rendered = this.rendered;
      vm.search_data = this.search_data;
      vm._start = "";
      vm._end = "";
      vm.option_camera = this.option_camera();
      return vm.show_search = true;
    };

    PreCountPage.prototype.rendered = function() {
      PreCountPage.__super__.rendered.call(this);
      new WOW().init();
      $('.datepicker').remove();
      $("#camera").chosen();
      this.vm.option_camera = this.option_camera();
      this.datepicker();
      this.vm.show_search = true;
      return this.nprocess();
    };

    PreCountPage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 500);
    };

    PreCountPage.prototype.datepicker = function() {
      return $(function() {
            var nowTemp = new Date();
            var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);
            var checkin = $('#start_time').fdatepicker({
                /*
                onRender: function (date) {
                    return date.valueOf() < now.valueOf() ? 'disabled' : '';
                }
                */
            }).on('changeDate', function (ev) {
                if (ev.date.valueOf() > checkout.date.valueOf()) {
                    var newDate = new Date(ev.date)
                    newDate.setDate(newDate.getDate() + 1);
                    checkout.update(newDate);
                }
                checkin.hide();
                $('#end_time')[0].focus();
            }).data('datepicker');
            var checkout = $('#end_time').fdatepicker({
                onRender: function (date) {
                    return date.valueOf() <= checkin.date.valueOf() ? 'disabled' : '';
                }
            }).on('changeDate', function (ev) {
                checkout.hide();
            }).data('datepicker');
        });
    };

    PreCountPage.prototype.search_data = function() {
      var end_Time, endstamp, selected_camera, start_Time, startstamp;
      NProgress.start();
      start_Time = $('#start_time').val();
      end_Time = $('#end_time').val();
      selected_camera = $("#camera").val();
      if (selected_camera === "no" || start_Time === "" || end_Time === "") {
        (new MessageModal(this.vm.lang.no_select)).attach();
        return;
      }
      startstamp = (Date.parse(new Date(start_Time))) / 1000;
      endstamp = ((Date.parse(new Date(end_Time))) / 1000) + 86400;
      if (startstamp >= endstamp) {
        (new MessageModal(this.vm.lang.time_error)).attach();
        return;
      }
      this._search(this, selected_camera, startstamp, endstamp);
      return this.vm.show_search = false;
    };

    PreCountPage.prototype._search = function(page, ipc, start, end) {
      return $(function() {
            $.ajax({
                url: "http://192.168.2.122:8012/api/chart?start=" + start + "&end=" + end ,
                type:'GET',
                dataType: "json",
                success:function(data){
                    NProgress.done();
                    if ( data.num_age.length == 0){
                        page.vm.show_search = true;
                        return (new MessageModal(lang.precountpage.no_data)).attach();
                    }else{
                        page.goto_count_server(data,start,end);
                    }
                },
                error : function() {
                    NProgress.done();
                    page.vm.show_search = true;
                    return (new MessageModal(lang.precountpage.search_error)).attach();
                }
            })
        });

      /*$(`function() {
          try{
              $.ajax({
                  url : "http://192.168.2.82:8012/api/statistics",
                  type : "POST",
                  data : {"start":1451581261000,"end":1577811661000},
                  dataType:"json",
                  success:function(data){
                      console.log(data);
                      if ( !data.aaData.length){
                          page.vm.show_search = true;
                          return (new MessageModal(lang.precountpage.no_data)).attach();
                      }else{
                          page.goto_count(data.aaData,start,end);
                      }
                  }
              });
          }catch(e){
              console.log(e);
          }
      }`)
       */
    };

    PreCountPage.prototype.goto_count_server = function(_data, start_stamp, end_stamp) {
      var end_Time, start_Time;
      start_Time = $('#start_time').val();
      end_Time = $('#end_time').val();
      return (new CountPage(this.sd, this, _data, start_Time, end_Time, start_stamp, end_stamp)).attach();
    };

    PreCountPage.prototype.goto_count = function(_data, start_stamp, end_stamp) {
      var e, end_Time, i, start_Time, tmp, _i, _len;
      tmp = [];
      try {
        for (_i = 0, _len = _data.length; _i < _len; _i++) {
          i = _data[_i];
          i.sex = i[1];
          i.age = i[2];
          i.time = i[3];
          tmp.push({
            "age": i.age,
            "sex": i.sex,
            "time": i.time,
            "ipc": 1
          });
        }
        start_Time = $('#start_time').val();
        end_Time = $('#end_time').val();
        return (new CountPage(this.sd, this, tmp, start_Time, end_Time, start_stamp, end_stamp)).attach();
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    PreCountPage.prototype.option_camera = function() {
      var options;
      options = [
        {
          key: "请选择",
          value: "no"
        }, {
          key: "1",
          value: "1"
        }, {
          key: "2",
          value: "2"
        }, {
          key: "3",
          value: "3"
        }, {
          key: "4",
          value: "4"
        }, {
          key: "5",
          value: "5"
        }
      ];
      return options;
    };

    return PreCountPage;

  })(DetailTablePage);

  CountPage = (function(_super) {
    __extends(CountPage, _super);

    function CountPage(sd, page, _stat, start, end, start_stamp, end_stamp) {
      this.sd = sd;
      this.page = page;
      this._stat = _stat;
      this.start = start;
      this.end = end;
      this.start_stamp = start_stamp;
      this.end_stamp = end_stamp;
      this.load7 = __bind(this.load7, this);
      this.load6 = __bind(this.load6, this);
      this.load5 = __bind(this.load5, this);
      this.load4 = __bind(this.load4, this);
      this.load3 = __bind(this.load3, this);
      this.load2 = __bind(this.load2, this);
      this.load1 = __bind(this.load1, this);
      this.chart1 = __bind(this.chart1, this);
      this.chart_real = __bind(this.chart_real, this);
      this.chart_server = __bind(this.chart_server, this);
      this.getArrItem = __bind(this.getArrItem, this);
      this.maps = __bind(this.maps, this);
      this.subitems_time = __bind(this.subitems_time, this);
      this.subitems = __bind(this.subitems, this);
      this.search_result = __bind(this.search_result, this);
      this.strtime = __bind(this.strtime, this);
      this.datatable_init = __bind(this.datatable_init, this);
      this.nprocess = __bind(this.nprocess, this);
      this.rechoose = __bind(this.rechoose, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      CountPage.__super__.constructor.call(this, "countpage-", "html/countpage.html");
    }

    CountPage.prototype.define_vm = function(vm) {
      vm.lang = lang.register;
      vm.location_local = "";
      vm.ipc = 1;
      vm.start = this.start;
      vm.end = this.end;
      vm.location = "深圳春茧体育馆";
      vm.journal = [];
      vm.total_data = "";
      vm.calculate_sex = "";
      vm.calculate_age = "";
      vm.unit_age = "岁";
      return vm.rechoose = this.rechoose;
    };

    CountPage.prototype.rendered = function() {
      var $scroller;
      CountPage.__super__.rendered.call(this);
      new WOW().init();
      this.vm.total_data = 0;
      this.datatable_init(this);
      $scroller = $("#journals-scroller-1");
      $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      this.maps(this, this.vm.location);
      return this.chart_server();
    };

    CountPage.prototype.rechoose = function() {
      return (new PreCountPage(this.sd, this)).attach();
    };

    CountPage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 500);
    };

    CountPage.prototype.datatable_init = function(page) {
      $("#log-table1").dataTable(dtable_opt({
        bProcessing: true,
        bServerSide: true,
        destroy: true,
        sAjaxSource: "http://192.168.2.122:8012/api/statistics",
        aoColumnDefs: [
          {
            "aTargets": [0],
            "mData": null,
            "bSortable": false,
            "bSearchable": false,
            "mRender": function(data, type, full) {
              if (full[0] === 'N/A') {
                return "<img src='images/user-error.png' style='height: 30px;width: 30px;'>";
              } else {
                return "<img src=" + "http://192.168.2.122:8012/" + full[0] + " style='height: 30px;border-radius: 30px !important;width: 30px;'>";
              }
            }
          }
        ],
        fnServerData: function(sSource, aoData, fnCallback) {
          aoData.push({
            "name": "ipc",
            "value": page.vm.ipc
          });
          aoData.push({
            "name": "begin",
            "value": page.start_stamp
          });
          aoData.push({
            "name": "end",
            "value": page.end_stamp
          });
          return $.ajax({
            "type": 'post',
            "url": sSource,
            "dataType": "json",
            "data": aoData,
            "success": function(resp) {
              var e;
              try {
                console.log(resp);
                page.vm.total_data = resp.iTotalDisplayRecords;
                return fnCallback(resp);
              } catch (_error) {
                e = _error;
              }
            },
            "error": function(e) {
              return console.log(e.message);
            }
          });
        }
      }));
      $(".dataTables_filter input").addClass("m-wrap small");
      return $(".dataTables_length select").addClass("m-wrap small");
    };

    CountPage.prototype.strtime = function() {
      this.vm.start = new Date(this.start).toLocaleString();
      return this.vm.end = new Date(this.end).toLocaleString();
    };

    CountPage.prototype.search_result = function(page, ipc, start, end) {
      return $(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            xhr.open('get','http://192.168.2.84:7000/api/statistics/?query=ipc:' + ipc + '&limit=1000' + '&begin=' + start + '&end=' + end ,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    page._count =  xhr.responseText;
                    //console.log(xhr.responseText);  
                }  
            }
        });
    };

    CountPage.prototype.subitems = function() {
      var temp;
      temp = [
        {
          "age": "2",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "女",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "女",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "女",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "女",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "女",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "女",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "女",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "女",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "女",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "女",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "2",
          "sex": "男",
          "time": "0:00-3:00"
        }, {
          "age": "22",
          "sex": "女",
          "time": "3:00-6:00"
        }, {
          "age": "12",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "42",
          "sex": "女",
          "time": "12:00-15:00"
        }, {
          "age": "18",
          "sex": "女",
          "time": "15:00-18:00"
        }, {
          "age": "52",
          "sex": "男",
          "time": "18:00-21:00"
        }, {
          "age": "55",
          "sex": "女",
          "time": "21:00-24:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "9:00-12:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "6:00-9:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "12:00-15:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "12:00-15:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "12:00-15:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "12:00-15:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "12:00-15:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "12:00-15:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "3:00-6:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "3:00-6:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "3:00-6:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "3:00-6:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "15:00-18:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "15:00-18:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "15:00-18:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "15:00-18:00"
        }, {
          "age": "11",
          "sex": "男",
          "time": "15:00-18:00"
        }
      ];
      return temp;
    };

    CountPage.prototype.subitems_time = function() {
      var tmp;
      tmp = [
        {
          "age": "12",
          "sex": "男",
          "time": "2014-07-10 0:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 0:25:12"
        }, {
          "age": "27",
          "sex": "男",
          "time": "2014-07-10 0:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 0:05:12"
        }, {
          "age": "24",
          "sex": "女",
          "time": "2014-07-10 1:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 0:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 1:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 1:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 1:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 1:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 1:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 1:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 2:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 2:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 2:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 2:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 2:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 2:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 3:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 3:25:12"
        }, {
          "age": "25",
          "sex": "男",
          "time": "2014-07-10 3:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 3:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 3:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 3:25:12"
        }, {
          "age": "26",
          "sex": "男",
          "time": "2014-07-10 4:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 4:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 4:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 4:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 4:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 4:25:12"
        }, {
          "age": "29",
          "sex": "男",
          "time": "2014-07-10 5:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 5:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 5:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 5:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 5:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 5:25:12"
        }, {
          "age": "4",
          "sex": "男",
          "time": "2014-07-10 6:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 6:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 6:56:12"
        }, {
          "age": "15",
          "sex": "女",
          "time": "2014-07-10 6:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 6:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 6:25:12"
        }, {
          "age": "1",
          "sex": "男",
          "time": "2014-07-10 7:21:12"
        }, {
          "age": "12",
          "sex": "女",
          "time": "2014-07-10 7:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 7:56:12"
        }, {
          "age": "18",
          "sex": "女",
          "time": "2014-07-10 7:05:12"
        }, {
          "age": "51",
          "sex": "女",
          "time": "2014-07-10 7:15:12"
        }, {
          "age": "11",
          "sex": "男",
          "time": "2014-07-10 7:25:12"
        }, {
          "age": "23",
          "sex": "男",
          "time": "2014-07-10 8:21:12"
        }, {
          "age": "81",
          "sex": "女",
          "time": "2014-07-10 8:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 8:56:12"
        }, {
          "age": "41",
          "sex": "女",
          "time": "2014-07-10 8:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 8:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 9:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 9:21:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 9:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 9:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 9:05:12"
        }, {
          "age": "10",
          "sex": "女",
          "time": "2014-07-10 9:15:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 10:25:12"
        }, {
          "age": "23",
          "sex": "男",
          "time": "2014-07-10 11:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 10:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 11:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 10:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 11:15:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 11:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 12:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 11:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 12:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 11:05:12"
        }, {
          "age": "29",
          "sex": "女",
          "time": "2014-07-10 12:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 12:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 13:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 13:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 13:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 13:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 13:15:12"
        }, {
          "age": "5",
          "sex": "男",
          "time": "2014-07-10 13:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 14:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 14:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 14:56:12"
        }, {
          "age": "6",
          "sex": "女",
          "time": "2014-07-10 14:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 14:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 14:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 15:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 15:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 15:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 15:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 15:15:12"
        }, {
          "age": "38",
          "sex": "男",
          "time": "2014-07-10 15:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 16:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 16:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 16:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 16:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 16:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 16:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 17:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 17:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 17:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 17:05:12"
        }, {
          "age": "31",
          "sex": "女",
          "time": "2014-07-10 17:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 17:25:12"
        }, {
          "age": "33",
          "sex": "男",
          "time": "2014-07-10 18:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 18:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 18:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 18:05:12"
        }, {
          "age": "36",
          "sex": "女",
          "time": "2014-07-10 18:15:12"
        }, {
          "age": "31",
          "sex": "男",
          "time": "2014-07-10 18:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 19:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 19:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 19:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 19:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 19:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 19:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 20:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 20:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 20:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 20:05:12"
        }, {
          "age": "41",
          "sex": "女",
          "time": "2014-07-10 20:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 20:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 21:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 21:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 21:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 21:05:12"
        }, {
          "age": "61",
          "sex": "女",
          "time": "2014-07-10 21:15:12"
        }, {
          "age": "19",
          "sex": "男",
          "time": "2014-07-10 21:25:12"
        }, {
          "age": "3",
          "sex": "男",
          "time": "2014-07-10 22:21:12"
        }, {
          "age": "12",
          "sex": "女",
          "time": "2014-07-10 22:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 22:56:12"
        }, {
          "age": "21",
          "sex": "女",
          "time": "2014-07-10 22:05:12"
        }, {
          "age": "33",
          "sex": "女",
          "time": "2014-07-10 22:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 22:25:12"
        }, {
          "age": "43",
          "sex": "男",
          "time": "2014-07-10 23:21:12"
        }, {
          "age": "11",
          "sex": "女",
          "time": "2014-07-10 23:25:12"
        }, {
          "age": "21",
          "sex": "男",
          "time": "2014-07-10 23:56:12"
        }, {
          "age": "1",
          "sex": "女",
          "time": "2014-07-10 23:05:12"
        }, {
          "age": "39",
          "sex": "女",
          "time": "2014-07-10 23:15:12"
        }, {
          "age": "51",
          "sex": "男",
          "time": "2014-07-10 23:25:12"
        }
      ];
      return tmp;
    };

    CountPage.prototype.maps = function(page, location) {
      return $(function() {
            try{
                var map = new BMap.Map("allmap");    // 创建Map实例
                map.centerAndZoom(new BMap.Point(116.404, 39.915), 11);  // 初始化地图,设置中心点坐标和地图级别
                map.addControl(new BMap.MapTypeControl());   //添加地图类型控件
                map.setCurrentCity("深圳");          // 设置地图显示的城市 此项是必须设置的
                map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放
                
                // 用经纬度设置地图中心点
                map.clearOverlays();//清空原来的标注
                var keyword = location;
                //page.vm.location_local = keyword;
                var localSearch = new BMap.LocalSearch(map);
                localSearch.enableAutoViewport(); //允许自动调节窗体大小

                localSearch.setSearchCompleteCallback(function (searchResult) {
                    var poi = searchResult.getPoi(0);
                    map.centerAndZoom(poi.point, 20);
                    var marker = new BMap.Marker(new BMap.Point(poi.point.lng, poi.point.lat));  // 创建标注，为要查询的地方对应的经纬度
                    map.addOverlay(marker);

                    //var infoWindow = new BMap.InfoWindow("<p style='font-size:14px;'>" + content + "</p>");
                    //marker.addEventListener("click", function () { this.openInfoWindow(infoWindow); });

                });
                $('.anchorBL').remove();
                if (keyword !== ""){
                    localSearch.search(keyword);
                }
                //setTimeout(function(){
                    //map.setZoom(20);   
                //}, 2000);  //2秒后放大到14级
                
            }catch(e){
                return (new MessageModal(lang.register.map_error)).attach();
            }
        });
    };

    CountPage.prototype.getArrItem = function(arr, num) {
      var arrIndex, i, index, return_array, temp_array, _i, _j, _len;
      temp_array = new Array();
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        index = arr[_i];
        temp_array.push(index);
      }
      return_array = new Array();
      for (i = _j = 0; 0 <= num ? _j <= num : _j >= num; i = 0 <= num ? ++_j : --_j) {
        if (temp_array.length > 0) {
          arrIndex = Math.floor(Math.random() * temp_array.length);
          return_array[i] = temp_array[arrIndex];
          temp_array.splice(arrIndex, 1);
        } else {
          break;
        }
      }
      return return_array;
    };

    CountPage.prototype.chart_server = function() {
      var collect_age, e, i, max, num, num_age, num_female, num_male, num_xy_female, num_xy_male, total_female, total_male, xy_female, xy_male, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      collect_age = [];
      num_male = this._stat.num_male;
      num_female = this._stat.num_female;
      num = this._stat.num;
      total_male = this._stat.total_male;
      total_female = this._stat.total_female;
      num_xy_male = this._stat.num_xy_male;
      num_xy_female = this._stat.num_xy_female;
      num_age = this._stat.num_age;
      if (num_male > num_female) {
        this.vm.calculate_sex = "男";
      } else {
        this.vm.calculate_sex = "女";
      }
      for (_i = 0, _len = num_age.length; _i < _len; _i++) {
        i = num_age[_i];
        collect_age.push(i[1]);
      }
      max = Math.max.apply(null, collect_age);
      for (_j = 0, _len1 = num_age.length; _j < _len1; _j++) {
        i = num_age[_j];
        if (i[1] === max) {
          this.vm.calculate_age = i[0];
          if (i[0] === "99以上") {
            this.vm.calculate_age = "99";
            this.vm.unit_age = "以上";
          }
        }
      }
      xy_male = this.getArrItem(num_xy_male, 100);
      xy_female = this.getArrItem(num_xy_female, 100);
      for (_k = 0, _len2 = xy_male.length; _k < _len2; _k++) {
        i = xy_male[_k];
        i[0] = i[0] * 1000;
      }
      for (_l = 0, _len3 = xy_female.length; _l < _len3; _l++) {
        i = xy_female[_l];
        i[0] = i[0] * 1000;
      }
      try {
        this.load1(num_male, num_female);
        this.load2(num);
        this.load3(num);
        this.load4(total_male, total_female);
        this.load7(num_age);
        return this.load5(xy_male, xy_female);
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    CountPage.prototype.chart_real = function() {
      var ages, base, collect_age, dist_age, i, max, num_age, num_female, num_male, xy, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      base = this._stat;
      dist_age = {};
      num_male = 0;
      num_female = 0;
      num_age = [];
      collect_age = [];
      for (_i = 0, _len = base.length; _i < _len; _i++) {
        i = base[_i];
        if (i.sex === "男") {
          num_male = num_male + 1;
        } else {
          num_female = num_female + 1;
        }
      }
      if (num_male > num_female) {
        this.vm.calculate_sex = "男";
      } else {
        this.vm.calculate_sex = "女";
      }
      this.load4(num_male, num_female);
      ages = ['1-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90-99', '99以上'];
      for (_j = 0, _len1 = ages.length; _j < _len1; _j++) {
        i = ages[_j];
        dist_age[i] = 0;
      }
      for (_k = 0, _len2 = base.length; _k < _len2; _k++) {
        i = base[_k];
        if ((1 <= (_ref = parseInt(i.age)) && _ref <= 9)) {
          dist_age['1-9'] = dist_age['1-9'] + 1;
        } else if ((10 <= (_ref1 = parseInt(i.age)) && _ref1 <= 19)) {
          dist_age['10-19'] = dist_age['10-19'] + 1;
        } else if ((20 <= (_ref2 = parseInt(i.age)) && _ref2 <= 29)) {
          dist_age['20-29'] = dist_age['20-29'] + 1;
        } else if ((30 <= (_ref3 = parseInt(i.age)) && _ref3 <= 39)) {
          dist_age['30-39'] = dist_age['30-39'] + 1;
        } else if ((40 <= (_ref4 = parseInt(i.age)) && _ref4 <= 49)) {
          dist_age['40-49'] = dist_age['40-49'] + 1;
        } else if ((50 <= (_ref5 = parseInt(i.age)) && _ref5 <= 59)) {
          dist_age['50-59'] = dist_age['50-59'] + 1;
        } else if ((60 <= (_ref6 = parseInt(i.age)) && _ref6 <= 69)) {
          dist_age['60-69'] = dist_age['60-69'] + 1;
        } else if ((70 <= (_ref7 = parseInt(i.age)) && _ref7 <= 79)) {
          dist_age['70-79'] = dist_age['70-79'] + 1;
        } else if ((80 <= (_ref8 = parseInt(i.age)) && _ref8 <= 89)) {
          dist_age['80-89'] = dist_age['80-89'] + 1;
        } else if ((90 <= (_ref9 = parseInt(i.age)) && _ref9 <= 99)) {
          dist_age['90-99'] = dist_age['90-99'] + 1;
        } else {
          dist_age['99以上'] = dist_age['99以上'] + 1;
        }
      }
      for (_l = 0, _len3 = ages.length; _l < _len3; _l++) {
        i = ages[_l];
        xy = [];
        xy.push(i);
        xy.push(dist_age[i]);
        collect_age.push(dist_age[i]);
        if (dist_age[i] !== 0) {
          num_age.push(xy);
        }
      }
      max = Math.max.apply(null, collect_age);
      for (_m = 0, _len4 = ages.length; _m < _len4; _m++) {
        i = ages[_m];
        if (dist_age[i] === max) {
          this.vm.calculate_age = i;
          if (i === "99以上") {
            this.vm.calculate_age = "99";
            this.vm.unit_age = "以上";
          }
        }
      }
      return this.load7(num_age);
    };

    CountPage.prototype.chart1 = function() {
      var ages, dist, dist_age, dist_female, dist_male, i, num, num_age, num_female, num_male, num_xy_female, num_xy_male, sexs, times, timestamp2, total, total_female, total_male, total_time, xy, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      dist = {};
      dist_male = {};
      dist_female = {};
      dist_age = {};
      num = [];
      num_male = [];
      num_female = [];
      num_age = [];
      num_xy_male = [];
      num_xy_female = [];
      total_male = 0;
      total_female = 0;
      times = ['0:00-3:00', '3:00-6:00', '6:00-9:00', '9:00-12:00', '12:00-15:00', '15:00-18:00', '18:00-21:00', '21:00-24:00'];
      ages = ['1-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90-99'];
      sexs = ['male', 'female'];
      total = this.subitems();
      total_time = this.subitems_time();
      for (_i = 0, _len = times.length; _i < _len; _i++) {
        i = times[_i];
        dist[i] = 0;
        dist_male[i] = 0;
        dist_female[i] = 0;
      }
      for (_j = 0, _len1 = ages.length; _j < _len1; _j++) {
        i = ages[_j];
        dist_age[i] = 0;
      }
      for (_k = 0, _len2 = total.length; _k < _len2; _k++) {
        i = total[_k];
        dist[i.time] = dist[i.time] + 1;
        if (i.sex === "男") {
          dist_male[i.time] = dist_male[i.time] + 1;
        } else {
          dist_female[i.time] = dist_female[i.time] + 1;
        }
        if ((1 <= (_ref = parseInt(i.age)) && _ref <= 9)) {
          dist_age['1-9'] = dist_age['1-9'] + 1;
        } else if ((10 <= (_ref1 = parseInt(i.age)) && _ref1 <= 19)) {
          dist_age['10-19'] = dist_age['10-19'] + 1;
        } else if ((20 <= (_ref2 = parseInt(i.age)) && _ref2 <= 29)) {
          dist_age['20-29'] = dist_age['20-29'] + 1;
        } else if ((30 <= (_ref3 = parseInt(i.age)) && _ref3 <= 39)) {
          dist_age['30-39'] = dist_age['30-39'] + 1;
        } else if ((40 <= (_ref4 = parseInt(i.age)) && _ref4 <= 49)) {
          dist_age['40-49'] = dist_age['40-49'] + 1;
        } else if ((50 <= (_ref5 = parseInt(i.age)) && _ref5 <= 59)) {
          dist_age['50-59'] = dist_age['50-59'] + 1;
        } else if ((60 <= (_ref6 = parseInt(i.age)) && _ref6 <= 69)) {
          dist_age['60-69'] = dist_age['60-69'] + 1;
        } else if ((70 <= (_ref7 = parseInt(i.age)) && _ref7 <= 79)) {
          dist_age['70-79'] = dist_age['70-79'] + 1;
        } else if ((80 <= (_ref8 = parseInt(i.age)) && _ref8 <= 89)) {
          dist_age['80-89'] = dist_age['80-89'] + 1;
        } else {
          dist_age['90-99'] = dist_age['90-99'] + 1;
        }
      }
      for (_l = 0, _len3 = ages.length; _l < _len3; _l++) {
        i = ages[_l];
        xy = [];
        xy.push(i);
        xy.push(dist_age[i]);
        if (dist_age[i] !== 0) {
          num_age.push(xy);
        }
      }
      for (_m = 0, _len4 = times.length; _m < _len4; _m++) {
        i = times[_m];
        num.push(dist[i]);
        num_male.push(dist_male[i]);
        num_female.push(dist_female[i]);
      }
      for (_n = 0, _len5 = num_male.length; _n < _len5; _n++) {
        i = num_male[_n];
        total_male = total_male + i;
      }
      for (_o = 0, _len6 = num_female.length; _o < _len6; _o++) {
        i = num_female[_o];
        total_female = total_female + i;
      }
      for (_p = 0, _len7 = total_time.length; _p < _len7; _p++) {
        i = total_time[_p];
        xy = [];
        timestamp2 = Date.parse(new Date(i.time));
        timestamp2 = timestamp2 / 1000;
        xy.push(parseInt(timestamp2));
        xy.push(parseInt(i.age));
        if (i.sex === "男") {
          num_xy_male.push(xy);
        } else {
          num_xy_female.push(xy);
        }
      }
      this.load1(num_male, num_female);
      this.load2(num);
      this.load3(num);
      this.load4(total_male, total_female);
      this.load5(num_xy_male, num_xy_female);
      return this.load7(num_age);
    };

    CountPage.prototype.load1 = function(male, female) {
      return $(function () {
            $('#chart1').highcharts({
                chart:{
                  type:"spline"
                },
                title: {
                    text: '',
                    x: -20 //center
                },
                subtitle: {
                    text: '',
                    x: -20
                },
                xAxis: {
                    categories: ['0:00-3:00','3:00-6:00','6:00-9:00','9:00-12:00','12:00-15:00','15:00-18:00','18:00-21:00','21:00-24:00']

                },
                credits: {
                      enabled: false
                },
                exporting: {
                      enabled: false
                },
                yAxis: {
                    title: {
                        text: '人数',
                        style:{
                            fontFamily:'Microsoft Yahei'
                        }
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    valueSuffix: '人',
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8,
                        fontFamily:'Microsoft Yahei'
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    borderWidth: 0
                },
                series: [{
                    name: '男',
                    data: male
                }, {
                    name: '女',
                    data: female
                }]
            });
        });
    };

    CountPage.prototype.load2 = function(num) {
      return $(function () {
            $(document).ready(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
                $('#chart2').highcharts({
                    chart: {
                      type: 'column'
                    },
                    title: {
                      text: ''
                    },
                    subtitle: {
                      text: ''
                    },
                    credits: {
                      enabled: false
                    },
                    exporting: {
                      enabled: false
                    },
                    legend: {
                      enabled: true,
                      backgroundColor: '#FFFFFF',
                      floating: true,
                      align: 'right',
                      layout: 'vertical',
                      verticalAlign: 'top',
                      itemStyle: {
                        color: 'rgb(110,110,110)',
                        fontWeight: '100',
                        fontFamily: "Microsoft YaHei"
                      }
                    },
                    xAxis: {
                      crosshair: true,
                      categories: ['0:00-3:00','3:00-6:00','6:00-9:00','9:00-12:00','12:00-15:00','15:00-18:00','18:00-21:00','21:00-24:00']
                    },
                    yAxis: {
                      min: 0,
                      title: {
                        text: '总人数',
                        style:{
                            fontFamily:'Microsoft Yahei'
                        }
                      }
                    },
                    tooltip: {
                      //headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                      pointFormat: '<tr><td style="color:{series.color};padding:0"></td>' + '<td style="padding:0"><b>{point.y}人 </b></td></tr>',
                      footerFormat: '</table>',
                      shared: true,
                      useHTML: true,
                      style: {
                        color: '#fff',
                        fontSize: '12px',
                        opacity: 0.8,
                        fontFamily:'Microsoft Yahei'
                      },
                      borderRadius: 0,
                      borderColor: '#000',
                      backgroundColor: '#000'
                    },
                    plotOptions: {
                      column: {
                        animation: false,
                        //pointPadding: 0.2,
                        borderWidth: 0,
                        color: 'rgba(60, 192, 150,0.2)',
                        borderColor: 'rgb(60, 192, 150)',
                        borderWidth: 1,
                        //pointPadding: 0,
                        events: {
                          legendItemClick: function() {
                            return false;
                          },
                          click: function(event) {}
                        }
                      }
                    },
                    series: [
                      {
                        name: '总人数',
                        data: num
                      }
                    ]
                });
            });
        });
    };

    CountPage.prototype.load3 = function(num) {
      return $(function () {
            $('#chart3').highcharts({
                chart: {
                    polar: true
                },
                title: {
                    text: ''
                },
                pane: {
                    startAngle: 0,
                    endAngle: 360
                },
                credits: {
                      enabled: false
                },
                exporting: {
                  enabled: false
                },
                xAxis: {
                    tickInterval: 3,
                    min: 0,
                    max: 24,
                    labels: {
                        formatter: function () {
                            return this.value + ':00';
                        }
                    }
                },
                yAxis: {
                    min: 0,
                    max:50
                },
                legend: {
                    enabled: true
                },
                plotOptions: {
                    series: {
                        pointStart: 0,
                        pointInterval: 45
                    },
                    column: {
                        pointPadding: 0,
                        groupPadding: 0
                    }
                },
                series: [ {
                    type: 'area',
                    name: '人数',
                    data:  num
                }]
            });
        });
    };

    CountPage.prototype.load4 = function(male, female) {
      return $(function () {
            $('#chart4').highcharts({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false
                },
                title: {
                    text: ''
                },
                tooltip: {
                    pointFormat: '<b>{point.percentage:.1f}%</b>',
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8,
                        fontFamily:'Microsoft Yahei'
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                credits: {
                      enabled: false
                },
                exporting: {
                  enabled: false
                },
                legend: {
                    enabled: true
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: false,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        },
                        showInLegend: true
                    }
                },
                //colors:['rgb(124, 181, 236)','rgb(244, 91, 91)'],
                series: [{
                    type: 'pie',
                    name: '',
                    data: [
                        ['男',   male],
                        ['女',   female]
                    ]
                }]
            });
        });
    };

    CountPage.prototype.load5 = function(male, female) {
      return $(function () {
            $('#chart5').highcharts({
                chart: {
                    type: 'scatter',
                    zoomType: 'xy'
                },
                title: {
                    text: ''
                },
                subtitle: {
                    text: ''
                },
                credits: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                xAxis: {
                    title: {
                        enabled: true,
                        text: '出现时间',
                        style:{
                            fontFamily:'Microsoft Yahei'
                        }
                    },
                    type:"datetime",
                    dateTimeLabelFormats: {   
                            day: '%Y-%m-%d',  
                    },  
                    tickWidth: 0,
                    /*labels: {
                        enabled: false
                    },*/
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: '年龄',
                        style:{
                            fontFamily:'Microsoft Yahei'
                        }
                    }
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    //x: 100,
                    //y: 70,
                    //floating: true,
                    //backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF',
                    //borderWidth: 1
                },
                tooltip: {
                    formatter: function () {
                        return '性别：'+'<b>' + this.series.name + '</b><br/>' +
                        '出现时间：' + Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                        '年龄：' + Highcharts.numberFormat(this.y, 0) + '岁';
                    },
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8,
                        fontFamily:'Microsoft Yahei'
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                plotOptions: {
                    scatter: {
                        marker: {
                            radius: 5,
                            states: {
                                hover: {
                                    enabled: true,
                                    lineColor: 'rgb(100,100,100)'
                                }
                            }
                        },
                        states: {
                            hover: {
                                marker: {
                                    enabled: false
                                }
                            }
                        },
                        tooltip: {
                            headerFormat: '<b>{series.name}</b><br>',
                            pointFormat: '{point.x}, {point.y} 岁'
                        }
                    }
                },
                series: [{
                    name: '女',
                    color: 'rgba(223, 83, 83, .5)',
                    data: female
                }, {
                    name: '男',
                    color: 'rgba(119, 152, 191, .5)',
                    data: male
                }]
            });
        });
    };

    CountPage.prototype.load6 = function() {
      return $(function () {
            var categories = ['0-4', '5-9', '10-14', '15-19',
                              '20-24', '25-29', '30-34', '35-39', '40-44',
                              '45-49', '50-54', '55-59', '60-64', '65-69',
                              '70-74', '75-79', '80-84', '85-89', '90-94',
                              '95-99', '100 + '];
            $(document).ready(function () {
                $('#chart6').highcharts({
                    chart: {
                        type: 'bar'
                    },
                    title: {
                        text: ''
                    },
                    credits: {
                        enabled: false
                    },
                    exporting: {
                        enabled: false
                    },
                    xAxis: [{
                        categories: categories,
                        reversed: false,
                        labels: {
                            step: 1
                        }
                    }, { // mirror axis on right side
                        opposite: true,
                        reversed: false,
                        categories: categories,
                        linkedTo: 0,
                        labels: {
                            step: 1
                        }
                    }],
                    yAxis: {
                        title: {
                            text: null,
                            style:{
                                fontFamily:'Microsoft Yahei'
                            }
                        },
                        labels: {
                            formatter: function () {
                                return (Math.abs(this.value) / 1000000) + 'M';
                            }
                        },
                        min: -4000000,
                        max: 4000000
                    },
                    plotOptions: {
                        series: {
                            stacking: 'normal'
                        }
                    },
                    tooltip: {
                        formatter: function () {
                            return '<b>' + this.series.name + ', age ' + this.point.category + '</b><br/>' +
                                'Population: ' + Highcharts.numberFormat(Math.abs(this.point.y), 0);
                        },
                        style: {
                            color:'#fff',
                            fontSize:'12px',
                            opacity:0.8,
                            fontFamily:'Microsoft Yahei'
                        },
                        borderRadius:0,
                        borderColor:'#000',
                        backgroundColor:'#000'
                    },
                    series: [{
                        name: '男',
                        data: [-1746181, -1884428, -2089758, -2222362, -2537431, -2507081, -2443179,
                               -2664537, -3556505, -3680231, -3143062, -2721122, -2229181, -2227768,
                               -2176300, -1329968, -836804, -354784, -90569, -28367, -3878]
                    }, {
                        name: '女',
                        data: [1656154, 1787564, 1981671, 2108575, 2403438, 2366003, 2301402, 2519874,
                               3360596, 3493473, 3050775, 2759560, 2304444, 2426504, 2568938, 1785638,
                               1447162, 1005011, 330870, 130632, 21208]
                    }]
                });
            });
        });
    };

    CountPage.prototype.load7 = function(age) {
      return $(function () {
            $('#chart7').highcharts({
                chart: {
                    type: 'pie',
                    options3d: {
                        enabled: true,
                        alpha: 45,
                        beta: 0
                    }
                },
                title: {
                    text: ''
                },
                legend: {
                    enabled:true,
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    verticalAlign: 'top',
                    labelFormatter: function () {
                        return this.name + '岁';
                    }
                },
                tooltip: {
                    pointFormat: '<b>{point.percentage:.1f}%</b>',
                    style: {
                        color:'#fff',
                        fontSize:'12px',
                        opacity:0.8,
                        fontFamily:'Microsoft Yahei'
                    },
                    borderRadius:0,
                    borderColor:'#000',
                    backgroundColor:'#000'
                },
                credits: {
                    enabled: false
                },
                exporting: {
                    enabled: false
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        depth: 35,
                        dataLabels: {
                            enabled: false,
                            format: '{point.name}'
                        },
                        showInLegend: true
                    }
                },
                series: [{
                    type: 'pie',
                    name: '',
                    data: age
                }]
            });
        });
    };

    return CountPage;

  })(DetailTablePage);

  ManagerPage = (function(_super) {
    __extends(ManagerPage, _super);

    function ManagerPage(sd) {
      this.sd = sd;
      this.amap = __bind(this.amap, this);
      this.ammaps = __bind(this.ammaps, this);
      this.maper_search = __bind(this.maper_search, this);
      this.maps = __bind(this.maps, this);
      this.maper = __bind(this.maper, this);
      this.chart_level = __bind(this.chart_level, this);
      this.chart_active = __bind(this.chart_active, this);
      this.load4 = __bind(this.load4, this);
      this.load3 = __bind(this.load3, this);
      this.chart_pie = __bind(this.chart_pie, this);
      this.record_detail = __bind(this.record_detail, this);
      this.init_chart = __bind(this.init_chart, this);
      this.count_num = __bind(this.count_num, this);
      this.subitems = __bind(this.subitems, this);
      this.get_user_data = __bind(this.get_user_data, this);
      this.add_user = __bind(this.add_user, this);
      this.delete_user = __bind(this.delete_user, this);
      this.view_detail = __bind(this.view_detail, this);
      this.datatable_init = __bind(this.datatable_init, this);
      this.nprocess = __bind(this.nprocess, this);
      this.rendered = __bind(this.rendered, this);
      this.define_vm = __bind(this.define_vm, this);
      ManagerPage.__super__.constructor.call(this, "managerpage-", "html/managerpage.html");
      $(this.sd.manager).on("updated", (function(_this) {
        return function(e, source) {};
      })(this));
      this.location_str = "";
    }

    ManagerPage.prototype.define_vm = function(vm) {
      vm.lang = lang.manager;
      vm.user_data = this.get_user_data();
      vm.journal = this.subitems();
      vm.fattr_journal_status = fattr.journal_status;
      vm.record_detail = this.record_detail;
      vm.users_num = "";
      vm.num_log = "";
      vm.num_compare = "";
      vm.num_recharge = "";
      vm.add_user = this.add_user;
      return vm.delete_user = this.delete_user;
    };

    ManagerPage.prototype.rendered = function() {
      var $scroller, $scroller1;
      ManagerPage.__super__.rendered.call(this);
      new WOW().init();
      $('.anchorBL').remove();
      $('.datepicker').remove();
      $scroller = $("#journals-scroller-1");
      $scroller.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      $scroller1 = $("#users-scroller-1");
      $scroller1.slimScroll({
        size: '7px',
        color: '#a1b2bd',
        position: 'right',
        height: $scroller1.attr("data-height"),
        alwaysVisible: true,
        railVisible: false,
        disableFadeOut: true,
        railDraggable: true
      });
      this.maper();
      this.chart_active(this);
      this.chart_pie(this);
      this.count_num();
      this.datatable_init(this);
      return this.nprocess();
    };

    ManagerPage.prototype.nprocess = function() {
      NProgress.start();
      return setTimeout(((function(_this) {
        return function() {
          NProgress.done();
          return $('.fade').removeClass('out');
        };
      })(this)), 1000);
    };

    ManagerPage.prototype.datatable_init = function(page) {
      return $(function() {
            var table_users = $("#users-table").DataTable(dtable_opt({
                bProcessing: true,
                bServerSide: true,
                destroy:true,
                sAjaxSource: "http://" + page.sd.host + "/api/searchUsers",
                aoColumnDefs: [{
                    "aTargets": [5],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                        return "<a class='btn mini green' id='view_detail'>查看</a><a class='btn mini red' id='delete_user'>删除</a>";
                    }
                },{
                    "aTargets": [0],
                    "mData": "5",
                    "bSortable": false,
                    "bSearchable": false,
                    "className": "dt-body-center",
                    "mRender": function(data, type, full) {
                        return '<input type="checkbox"  class="editor-active" />';
                    }
                }],
                rowCallback: function ( row, data ) {
                    // Set the checked state of the checkbox in the table
                    $('input.editor-active', row).prop( 'checked', data.active == 1 );
                },
                select: {
                    style: 'os',
                    selector: 'td:not(:last-child)' // no row selection on last column
                },
                fnServerData: function(sSource, aoData, fnCallback) {
                  return $.ajax({
                    "type": 'post',
                    "url": sSource,
                    "dataType": "json",
                    "data": aoData,
                    "success": function(resp) {
                      try{
                        return fnCallback(resp);
                      }catch(e){
                        return
                      }
                    },
                    "error": function(e) {
                      return console.log('error');
                    }
                  });
                }
            }));

            var table = $("#log-table1").DataTable(dtable_opt({
                /*retrieve: true,
                bSort: false,
                scrollX: true,*/
                bProcessing: true,
                bServerSide: true,
                destroy:true,
                sAjaxSource: "http://" + page.sd.host + "/api/searchRecord",
                aoColumnDefs: [
                  {
                    "aTargets": [3],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                        return "<a class='btn mini green' id='view_detail'>查看</a>";
                    }
                  }, {
                    "aTargets": [1],
                    "mData": null,
                    "bSortable": false,
                    "bSearchable": false,
                    "mRender": function(data, type, full) {
                      if (full[1] === "info") {
                        return "<span class='label label-success'><i class='fa fa-volume-up'></i>提醒</span>";
                      } else if (full[1] === "warning") {
                        return "<span class='label label-warning'><i class='fa fa-warning-sign'></i>警告</span>";
                      } else {
                        return "<span class='label label-important'><i class='fa fa-remove'></i>错误</span>";
                      }
                    }
                  }
                ],
                fnServerData: function(sSource, aoData, fnCallback) {
                  var min = parseInt( $('#min').val());
                  var max = parseInt( $('#max').val());
                  var logtype = $('#logtype').val();
                  var start_Time = (Date.parse(new Date($('#start_time').val())))/1000;
                  var end_Time = (Date.parse(new Date($('#end_time').val())))/1000;

                  aoData.push({"name":"min","value":min});
                  aoData.push({"name":"max","value":max});
                  aoData.push({"name":"start_time","value":start_Time});
                  aoData.push({"name":"end_time","value":end_Time});
                  aoData.push({"name":"logtype","value":logtype});
                  return $.ajax({
                    "type": 'post',
                    "url": sSource,
                    "dataType": "json",
                    "data": aoData,
                    "success": function(resp) {
                      try{
                        return fnCallback(resp);
                      }catch(e){
                        return
                      }
                    },
                    "error": function(e) {
                      return console.log('error');
                    }
                  });
                }
            }));
            $(".dataTables_filter input").addClass("m-wrap small")
            $(".dataTables_length select").addClass("m-wrap small")
            /* 行详情 
            function format ( d ) {
                return 'Full name:';
            };

            var detailRows = [];
            $('#users-table tbody').on( 'click', 'tr td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = table_users.row( tr );
                var idx = $.inArray( tr.attr('id'), detailRows );
         
                if ( row.child.isShown() ) {
                    tr.removeClass( 'details' );
                    row.child.hide();
                    detailRows.splice( idx, 1 );
                }
                else {
                    tr.addClass( 'details' );
                    row.child( format( row.data() ) ).show();
                    if ( idx === -1 ) {
                        detailRows.push( tr.attr('id') );
                    }
                }
            } );
         
            table_users.on( 'draw', function () {
                $.each( detailRows, function ( i, id ) {
                    $('#'+id+' td.details-control').trigger( 'click' );
                });
            });
            */

            // 复选框
            /*
            var check_all = []
            function removeByValue(arr, val) {
                for(var i=0; i<arr.length; i++) {
                  if(arr[i] == val) {
                    arr.splice(i, 1);
                    break;
                  }
                }
            }

            $('#users-table').on('change', 'tbody td input[type="checkbox"]', function(){
                var checka = table_users.row( $(this).closest('tr')).data();
                var id = checka['5']; 
                if(!this.checked){
                    removeByValue(check_all, id);
                }else{
                    check_all.push(id);
                }     
            });

            $("#delete_user").click(function () {
                console.log(check_all);
            });
            */

            $('#users-table tbody ').on( 'click', 'tr', function () {
                if ( $(this).hasClass('selected') ) {
                    $(this).removeClass('selected');
                }
                else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            } );
            
            $('#users-table').on( 'change', 'input.editor-active', function () {
                var checka = table_users.row( $(this).closest('tr')).data();
                var id = checka['5']; 
                console.log(id);
            });

            /*$('#delete_user').click( function () {
                if (table.rows('.selected').data().length==0){
                    alert( table.rows('.selected').data().length +' row(s) selected, you should select the row you want to delete!' );
         
                }
                alert( table.rows('.selected').data().length +' row(s) selected, are you sure you want to delete this row?' );
         
                table.rows('.selected').remove().draw(false);
            } );*/

            $("#checkall").click(function () {
                var check = $(this).prop("checked");
                $(".checkchild").prop("checked", check);
            });

            //搜索框
            $('#min, #max, #start_time,#end_time ,#logtype').keyup( function() {
                table.draw();
            } );

            $('#log-table1 tbody').on( 'click', 'a', function () {
                var data = table.row( $(this).parents('tr') ).data();
                page.record_detail(data[ 3 ]);
            });
                     
            $('#users-table tbody').on( 'click', '#view_detail',function () {
                var data = table_users.row( $(this).parents('tr') ).data();
                page.view_detail(data[ 2 ]);
            });

            $('#users-table tbody').on( 'click', '#delete_user',function () {
                var data = table_users.row( $(this).parents('tr') ).data();
                page.delete_user(data[ 2 ]);
            });

            //时间选择器
            var nowTemp = new Date();
            var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);
            var checkin = $('#start_time').fdatepicker({
                /*
                onRender: function (date) {
                    return date.valueOf() < now.valueOf() ? 'disabled' : '';
                }
                */
            }).on('changeDate', function (ev) {
                if (ev.date.valueOf() > checkout.date.valueOf()) {
                    var newDate = new Date(ev.date);
                    newDate.setDate(newDate.getDate() + 1);
                    checkout.update(newDate);
                }
                checkin.hide();
                $('#end_time')[0].focus();
            }).data('datepicker')
            var checkout = $('#end_time').fdatepicker({
                onRender: function (date) {
                    return date.valueOf() <= checkin.date.valueOf() ? 'disabled' : '';
                }
            }).on('changeDate', function (ev) {
                table.draw();
                checkout.hide();
            }).data('datepicker');

        });
    };

    ManagerPage.prototype.view_detail = function(account) {
      return (new RegisterDetailModal(this.sd, this, account)).attach();
    };

    ManagerPage.prototype.delete_user = function(uid) {
      return (new ConfirmModal(this.vm.lang.confirm_delete, (function(_this) {
        return function() {
          var chain;
          _this.frozen();
          chain = new Chain;
          chain.chain(function() {
            return (new MachineRest(_this.sd.host)).delete_user(uid);
          });
          chain.chain(_this.sd.update("all"));
          return show_chain_progress(chain).done(function() {
            (new MessageModal(_this.vm.lang.delete_success)).attach();
            return _this.attach();
          });
        };
      })(this))).attach();
    };

    ManagerPage.prototype.add_user = function() {
      return (new RegisterAddModal(this.sd, this)).attach();
    };

    ManagerPage.prototype.data_refresh = function() {
      var chain;
      chain = new Chain;
      chain.chain(this.sd.update("manager"));
      show_chain_progress(chain).done(function() {
        return console.log("Refresh Managerpage");
      });
    };

    ManagerPage.prototype.get_user_data = function() {
      var e, sub;
      sub = [];
      try {
        return this.sd.manager.items.users;
      } catch (_error) {
        e = _error;
        return sub;
      }
    };

    ManagerPage.prototype.subitems = function() {
      var e, sub;
      sub = [];
      try {
        return this.sd.manager.items.records.reverse();
      } catch (_error) {
        e = _error;
        return sub;
      }
    };

    ManagerPage.prototype.count_num = function() {
      var i, num_com, num_rec, totals, _i, _len;
      totals = this.get_user_data();
      num_com = 0;
      num_rec = 0;
      for (_i = 0, _len = totals.length; _i < _len; _i++) {
        i = totals[_i];
        num_com = num_com + parseInt(i.total);
        num_rec = num_rec + parseInt(i.recharge);
      }
      this.vm.users_num = totals.length;
      this.vm.num_log = this.subitems().length;
      this.vm.num_compare = num_com;
      return this.vm.num_recharge = num_rec;
    };

    ManagerPage.prototype.init_chart = function() {
      var e, i, locations, sub, total, _i, _len;
      try {
        sub = [];
        total = this.get_user_data();
        for (_i = 0, _len = total.length; _i < _len; _i++) {
          i = total[_i];
          locations = "";
          locations = i.location + i.hotelname;
          sub.push(locations);
        }
        return this.maps(sub, this);
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    ManagerPage.prototype.record_detail = function(uid) {
      return (new RegisterRecordModal(this.sd, this, uid)).attach();
    };

    ManagerPage.prototype.chart_pie = function(page) {
      var a, b, c;
      a = [18, 24, 27, 39, 26, 25, 20, 20];
      b = 109;
      c = 90;
      this.load3(a);
      return this.load4(b, c);
    };

    ManagerPage.prototype.load3 = function(num) {
      return $(function () {
            var chart = AmCharts.makeChart("chart3", {
              "type": "radar",
              "theme": "light",
              "dataProvider": [],
              "valueAxes": [{
                "gridType": "circles",
                "minimum": 0
              }],
              "startDuration": 1,
              "polarScatter": {
                "minimum": 0,
                "maximum": 359,
                "step": 1
              },
              "legend": {
                "position": "right"
              },
              "graphs": [{
                "title": "Trial #1",
                "balloonText": "[[category]]: [[value]] m/s",
                "bullet": "round",
                "lineAlpha": 0,
                "series": [[83,5.1],[44,5.8],[76,9],[2,1.4],[100,8.3],[96,1.7],[68,3.9],[0,3],[100,4.1],[16,5.5],[71,6.8],[100,7.9],[9,6.8],[85,8.3],[51,6.7],[95,3.8],[95,4.4],[1,0.2],[107,9.7],[50,4.2],[42,9.2],[35,8],[44,6],[64,0.7],[53,3.3],[92,4.1],[43,7.3],[15,7.5],[43,4.3],[90,9.9]]
              }, {
                "title": "Trial #2",
                "balloonText": "[[category]]: [[value]] m/s",
                "bullet": "round",
                "lineAlpha": 0,
                "series": [[178,1.3],[129,3.4],[99,2.4],[80,9.9],[118,9.4],[103,8.7],[91,4.2],[151,1.2],[168,5.2],[168,1.6],[152,1.2],[149,3.4],[182,8.8],[106,6.7],[111,9.2],[130,6.3],[147,2.9],[81,8.1],[138,7.7],[107,3.9],[124,0.7],[130,2.6],[86,9.2],[169,7.5],[122,9.9],[100,3.8],[172,4.1],[140,7.3],[161,2.3],[141,0.9]]
              }, {
                "title": "Trial #3",
                "balloonText": "[[category]]: [[value]] m/s",
                "bullet": "round",
                "lineAlpha": 0,
                "series": [[419,4.9],[417,5.5],[434,0.1],[344,2.5],[279,7.5],[307,8.4],[279,9],[220,8.4],[204,8],[446,0.9],[397,8.9],[351,1.7],[393,0.7],[254,1.8],[260,0.4],[300,3.5],[199,2.7],[182,5.8],[173,2],[201,9.7],[288,1.2],[333,7.4],[308,1.9],[330,8],[408,1.7],[274,0.8],[296,3.1],[279,4.3],[379,5.6],[175,6.8]]
              }],
              "export": {
                "enabled": false
              }
            });
        });
    };

    ManagerPage.prototype.load4 = function(male, female) {
      return $(function () {
            $('#chart4').highcharts({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false
                },
                title: {
                    text: ''
                },
                tooltip: {
                    pointFormat: '<b>{point.percentage:.1f}%</b>'
                },
                credits: {
                      enabled: false
                },
                exporting: {
                  enabled: false
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        }
                    }
                },
                series: [{
                    type: 'pie',
                    name: '',
                    data: [
                        ['男',   male],
                        ['女',   female]
                    ]
                }]
            });
        });
    };

    ManagerPage.prototype.chart_active = function() {
      return $(function() {
            var chartData = [ {
              "date": "2012-01-01",
              "distance": 227,
              "townName": "New York",
              "townName2": "New York",
              "townSize": 25,
              "latitude": 40
            }, {
              "date": "2012-01-02",
              "distance": 371,
              "townName": "Washington",
              "townSize": 14,
              "latitude": 38
            }, {
              "date": "2012-01-03",
              "distance": 433,
              "townName": "Wilmington",
              "townSize": 6,
              "latitude": 34
            }, {
              "date": "2012-01-04",
              "distance": 345,
              "townName": "Jacksonville",
              "townSize": 7,
              "latitude": 30
            }, {
              "date": "2012-01-05",
              "distance": 480,
              "townName": "Miami",
              "townName2": "Miami",
              "townSize": 10,
              "latitude": 25
            }, {
              "date": "2012-01-06",
              "distance": 386,
              "townName": "Tallahassee",
              "townSize": 7,
              "latitude": 30
            }, {
              "date": "2012-01-07",
              "distance": 348,
              "townName": "New Orleans",
              "townSize": 10,
              "latitude": 29
            }, {
              "date": "2012-01-08",
              "distance": 238,
              "townName": "Houston",
              "townName2": "Houston",
              "townSize": 16,
              "latitude": 29
            }, {
              "date": "2012-01-09",
              "distance": 218,
              "townName": "Dalas",
              "townSize": 17,
              "latitude": 32
            }, {
              "date": "2012-01-10",
              "distance": 349,
              "townName": "Oklahoma City",
              "townSize": 11,
              "latitude": 35
            }, {
              "date": "2012-01-11",
              "distance": 603,
              "townName": "Kansas City",
              "townSize": 10,
              "latitude": 39
            }, {
              "date": "2012-01-12",
              "distance": 534,
              "townName": "Denver",
              "townName2": "Denver",
              "townSize": 18,
              "latitude": 39
            }, {
              "date": "2012-01-13",
              "townName": "Salt Lake City",
              "townSize": 12,
              "distance": 425,
              "latitude": 40,
              "alpha": 0.4
            }, {
              "date": "2012-01-14",
              "latitude": 36,
              "distance": 425,
              "townName": "Las Vegas",
              "townName2": "Las Vegas",
              "bulletClass": "lastBullet"
            }];
            var chart = AmCharts.makeChart( "amchart1", {

              "type": "serial",
              "theme": "light",
              "fontFamily":"Microsoft YaHei",
              
              "dataDateFormat": "YYYY-MM-DD",
              "dataProvider": chartData,

              "addClassNames": true,
              "startDuration": 1,
              //"color": "#FFFFFF",
              "marginLeft": 0,

              "categoryField": "date",
              "categoryAxis": {
                "parseDates": true,
                "minPeriod": "DD",
                "autoGridCount": false,
                "gridCount": 50,
                "gridAlpha": 0.1,
                "gridColor": "#FFFFFF",
                "axisColor": "#555555",
                "dateFormats": [ {
                  "period": 'DD',
                  "format": 'DD'
                }, {
                  "period": 'WW',
                  "format": 'MMM DD'
                }, {
                  "period": 'MM',
                  "format": 'MMM'
                }, {
                  "period": 'YYYY',
                  "format": 'YYYY'
                } ]
              },

              "valueAxes": [ {
                "id": "a1",
                "title": "在线人数",
                "gridAlpha": 0,
                "axisAlpha": 0
              }, {
                "id": "a2",
                "position": "right",
                "gridAlpha": 0,
                "axisAlpha": 0,
                "labelsEnabled": false
              }],
              "graphs": [ {
                "id": "g1",
                "valueField": "distance",
                "title": "在线人数",
                "type": "column",
                "fillAlphas": 0.9,
                "valueAxis": "a1",
                "balloonText": "[[value]] 人",
                "legendValueText": "[[value]] 人",
                "legendPeriodValueText": "总共: [[value.sum]] 人",
                "lineColor": "rgba(8, 163, 204,0.8)",
                "alphaField": "alpha"
              }, {
                "id": "g2",
                "valueField": "latitude",
                "classNameField": "bulletClass",
                "title": "充值人数",
                "type": "line",
                "valueAxis": "a2",
                "lineColor": "rgb(137, 196, 244)",
                "lineThickness": 1,
                "legendValueText": "[[value]] 人",
                "descriptionField": "townName",
                "bullet": "round",
                "bulletSizeField": "townSize",
                "bulletBorderColor": "rgb(2, 97, 122)",
                "bulletBorderAlpha": 1,
                "bulletBorderThickness": 2,
                "bulletColor": "rgba(137, 196, 244,1)",
                "labelText": "[[townName2]]",
                "labelPosition": "right",
                "balloonText": "充值人数:[[value]] 人",
                "showBalloon": true,
                "animationPlayed": true
              }],

              "chartCursor": {
                "zoomable": false,
                "categoryBalloonDateFormat": "DD",
                "cursorAlpha": 0,
                "valueBalloonsEnabled": false
              },
              "legend": {
                "bulletType": "round",
                "equalWidths": false,
                "valueWidth": 120,
                "useGraphSettings": true,
                //"color": "#FFFFFF"
              }
            } );
        });
    };

    ManagerPage.prototype.chart_level = function(page) {
      return $(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            var id = page.sd.register.items["account"];
            xhr.open('get','http://' + page.sd.host + '/api/downloadAvatar/' + id ,true);
            xhr.send(null);
            xhr.onreadystatechange = function(){  
                if(xhr.readyState==4 || xhr.readyState==200){
                    var chart = AmCharts.makeChart("chart_level",
                    {
                        "type": "serial",
                        "theme": "light",
                        "dataProvider": [{
                            "name": "John",
                            "points": 35654,
                            "color": "#7F8DA9",
                            "bullet": xhr.responseText
                        }, {
                            "name": "Damon",
                            "points": 65456,
                            "color": "#FEC514",
                            "bullet": "https://www.amcharts.com/lib/images/faces/C02.png"
                        }, {
                            "name": "Patrick",
                            "points": 45724,
                            "color": "#DB4C3C",
                            "bullet": "https://www.amcharts.com/lib/images/faces/D02.png"
                        }, {
                            "name": "Mark",
                            "points": 13654,
                            "color": "#DAF0FD",
                            "bullet": "https://www.amcharts.com/lib/images/faces/E01.png"
                        }],
                        "valueAxes": [{
                            "maximum": 80000,
                            "minimum": 0,
                            "axisAlpha": 0,
                            "dashLength": 4,
                            "position": "left"
                        }],
                        "startDuration": 1,
                        "graphs": [{
                            "balloonText": "<span style='font-size:13px;'>[[category]]: <b>[[value]]</b></span>",
                            "bulletOffset": 10,
                            "bulletSize": 52,
                            "colorField": "color",
                            "cornerRadiusTop": 8,
                            "customBulletField": "bullet",
                            "fillAlphas": 0.8,
                            "lineAlpha": 0,
                            "type": "column",
                            "valueField": "points"
                        }],
                        "marginTop": 0,
                        "marginRight": 0,
                        "marginLeft": 0,
                        "marginBottom": 0,
                        "autoMargins": false,
                        "categoryField": "name",
                        "categoryAxis": {
                            "axisAlpha": 0,
                            "gridAlpha": 0,
                            "inside": true,
                            "tickLength": 0
                        },
                        "export": {
                            "enabled": false
                         }
                    });
                }  
            }

            
        });
    };

    ManagerPage.prototype.maper = function() {
      var e, i, locations, sub, total, _i, _len;
      try {
        sub = [];
        total = this.get_user_data();
        for (_i = 0, _len = total.length; _i < _len; _i++) {
          i = total[_i];
          locations = "";
          locations = i.location + i.hotelname;
          sub.push(locations);
        }
        return this.maps(sub, this);
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    ManagerPage.prototype.maps = function(locations, page) {
      return $(function() {
            try{
                var map = new BMap.Map("map");    // 创建Map实例
                
                map.centerAndZoom(new BMap.Point(116.404, 39.915), 11);  // 初始化地图,设置中心点坐标和地图级别
                map.addControl(new BMap.MapTypeControl());   //添加地图类型控件
                map.setCurrentCity("深圳");          // 设置地图显示的城市 此项是必须设置的
                map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放
                
                // 用经纬度设置地图中心点
                map.clearOverlays();//清空原来的标注
                var keyword = page.sd.register.items["location"] + page.sd.register.items["hotelname"];

                //var all_location = [];
                var localSearch = new BMap.LocalSearch(map);
                localSearch.enableAutoViewport(); //允许自动调节窗体大小

                localSearch.setSearchCompleteCallback(function (searchResult) {
                    try{
                        
                        var poi = searchResult.getPoi(0);
                        
                        //var single_location = {};
                        //single_location["zoomLevel"] = 5;
                        //single_location["scale"] = 0.5;
                        //single_location["title"] = poi.address;
                        //single_location["latitude"] = poi.point.lat;
                        //single_location["longitude"] = poi.point.lng;
                        //all_location.push(single_location);
                        

                        var marker = new BMap.Marker(new BMap.Point(poi.point.lng, poi.point.lat));  // 创建标注，为要查询的地方对应的经纬度
                        map.addOverlay(marker);
                        map.centerAndZoom(poi.point, 10);

                        var content = poi.address + "<br/><br/>经度：" + poi.point.lng + "<br/>纬度：" + poi.point.lat;

                        var infoWindow = new BMap.InfoWindow("<p style='font-size:14px;'>" + content + "</p>");
                        marker.addEventListener("click", function () { this.openInfoWindow(infoWindow); });
                    }catch(e){
                        return
                        //console.log(e);
                        //return (new MessageModal(lang.register.address_error)).attach();
                    }
                });
                $('.anchorBL').remove();
                
                for (i = 0, len = locations.length; i < len; i++) {
                    if (locations[i] !== ""){
                        localSearch.search(locations[i]);
                    }
                }
                //if (all_location.length !== 0){
                    //page.amap(all_location);
                //}
                //setTimeout(function(){
                    //map.setZoom(20);   
                //}, 2000);  //2秒后放大到14级
            }catch(e){
                return (new MessageModal(lang.register.part_map_error)).attach();
            }
        });
    };

    ManagerPage.prototype.maper_search = function(page) {
      return $(function() {
            var xhr;  
            if (window.XMLHttpRequest){  
                xhr=new XMLHttpRequest();  
            }else{  
                xhr=new ActiveXObject("Microsoft.XMLHTTP");  
            }
            try{
                var sub = [];
                total = page.get_user_data();
                for (_i = 0, _len = total.length; _i < _len; _i++) {
                    i = total[_i];
                    if (i.hotelname != "" && i.location != ""){
                        xhr.open('get','http://api.map.baidu.com/geocoder/v2/?address=' + i.location + i.hotelname + '&output=json&ak=SGlfxoEEgdtmV60T195lr7BYx6bFLvkI&callback=showLocation' ,true);
                        xhr.send(null);
                        xhr.onreadystatechange = function(){  
                            if(xhr.readyState==4 || xhr.readyState==200){
                                //var _data = JSON.parse(xhr.responseText);
                                //page._count =  xhr.responseText;
                                //sub.push(locations);
                                console.log(xhr.responseText);  
                            }  
                        }
                    }
                }
            }catch(e){
                return (new MessageModal(lang.manager.map_error)).attach();
            }
        });
    };

    ManagerPage.prototype.ammaps = function(locations, page) {
      return $(function() {
            try{
                var targetSVG = "M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z";
                var planeSVG = "M19.671,8.11l-2.777,2.777l-3.837-0.861c0.362-0.505,0.916-1.683,0.464-2.135c-0.518-0.517-1.979,0.278-2.305,0.604l-0.913,0.913L7.614,8.804l-2.021,2.021l2.232,1.061l-0.082,0.082l1.701,1.701l0.688-0.687l3.164,1.504L9.571,18.21H6.413l-1.137,1.138l3.6,0.948l1.83,1.83l0.947,3.598l1.137-1.137V21.43l3.725-3.725l1.504,3.164l-0.687,0.687l1.702,1.701l0.081-0.081l1.062,2.231l2.02-2.02l-0.604-2.689l0.912-0.912c0.326-0.326,1.121-1.789,0.604-2.306c-0.452-0.452-1.63,0.101-2.135,0.464l-0.861-3.838l2.777-2.777c0.947-0.947,3.599-4.862,2.62-5.839C24.533,4.512,20.618,7.163,19.671,8.11z";
                var map = AmCharts.makeChart( "map", {
                  "type": "map",
                  "theme": "light",
                  "dataProvider": {
                    "map": "worldLow",
                    "zoomLevel": 3.5,
                    "zoomLongitude": -20.1341,
                    "zoomLatitude": 49.1712,

                    "lines": [ {
                      "latitudes": [ 51.5002, 50.4422 ],
                      "longitudes": [ -0.1262, 30.5367 ]
                    }, {
                      "latitudes": [ 51.5002, 46.9480 ],
                      "longitudes": [ -0.1262, 7.4481 ]
                    }, {
                      "latitudes": [ 51.5002, 59.3328 ],
                      "longitudes": [ -0.1262, 18.0645 ]
                    }, {
                      "latitudes": [ 51.5002, 40.4167 ],
                      "longitudes": [ -0.1262, -3.7033 ]
                    }, {
                      "latitudes": [ 51.5002, 46.0514 ],
                      "longitudes": [ -0.1262, 14.5060 ]
                    }, {
                      "latitudes": [ 51.5002, 48.2116 ],
                      "longitudes": [ -0.1262, 17.1547 ]
                    }, {
                      "latitudes": [ 51.5002, 44.8048 ],
                      "longitudes": [ -0.1262, 20.4781 ]
                    }, {
                      "latitudes": [ 51.5002, 55.7558 ],
                      "longitudes": [ -0.1262, 37.6176 ]
                    }, {
                      "latitudes": [ 51.5002, 38.7072 ],
                      "longitudes": [ -0.1262, -9.1355 ]
                    }, {
                      "latitudes": [ 51.5002, 54.6896 ],
                      "longitudes": [ -0.1262, 25.2799 ]
                    }, {
                      "latitudes": [ 51.5002, 64.1353 ],
                      "longitudes": [ -0.1262, -21.8952 ]
                    }, {
                      "latitudes": [ 51.5002, 40.4300 ],
                      "longitudes": [ -0.1262, -74.0000 ]
                    } ],
                    "images": [ {
                      "id": "london",
                      "svgPath": targetSVG,
                      "title": "London",
                      "latitude": 51.5002,
                      "longitude": -0.1262,
                      "scale": 1
                    }, {
                      "svgPath": targetSVG,
                      "title": "Brussels",
                      "latitude": 50.8371,
                      "longitude": 4.3676,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Prague",
                      "latitude": 50.0878,
                      "longitude": 14.4205,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Athens",
                      "latitude": 37.9792,
                      "longitude": 23.7166,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Reykjavik",
                      "latitude": 64.1353,
                      "longitude": -21.8952,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Dublin",
                      "latitude": 53.3441,
                      "longitude": -6.2675,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Oslo",
                      "latitude": 59.9138,
                      "longitude": 10.7387,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Lisbon",
                      "latitude": 38.7072,
                      "longitude": -9.1355,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Moscow",
                      "latitude": 55.7558,
                      "longitude": 37.6176,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Belgrade",
                      "latitude": 44.8048,
                      "longitude": 20.4781,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Bratislava",
                      "latitude": 48.2116,
                      "longitude": 17.1547,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Ljubljana",
                      "latitude": 46.0514,
                      "longitude": 14.5060,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Madrid",
                      "latitude": 40.4167,
                      "longitude": -3.7033,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Stockholm",
                      "latitude": 59.3328,
                      "longitude": 18.0645,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Bern",
                      "latitude": 46.9480,
                      "longitude": 7.4481,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Kiev",
                      "latitude": 50.4422,
                      "longitude": 30.5367,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "Paris",
                      "latitude": 48.8567,
                      "longitude": 2.3510,
                      "scale": 0.5
                    }, {
                      "svgPath": targetSVG,
                      "title": "New York",
                      "latitude": 40.43,
                      "longitude": -74,
                      "scale": 0.5
                    } ]
                  },

                  "areasSettings": {
                    "unlistedAreasColor": "#FFCC00",
                    "unlistedAreasAlpha": 0.9
                  },

                  "imagesSettings": {
                    "color": "#CC0000",
                    "rollOverColor": "#CC0000",
                    "selectedColor": "#000000"
                  },

                  "linesSettings": {
                    "arc": -0.7, // this makes lines curved. Use value from -1 to 1
                    "arrow": "middle",
                    "color": "#CC0000",
                    "alpha": 0.4,
                    "arrowAlpha": 1,
                    "arrowSize": 4
                  },
                  "zoomControl": {
                    "gridHeight": 100,
                    "draggerAlpha": 1,
                    "gridAlpha": 0.2
                  },

                  "backgroundZoomsToTop": true,
                  "linesAboveImages": true,
                  
                  "export": {
                    "enabled": true
                  }
                });
            }catch(e){
                return (new MessageModal(lang.register.map_error)).attach();
            }
        });
    };

    ManagerPage.prototype.amap = function(all_location) {
      return $(function() {
            var map = AmCharts.makeChart( "map", {
              "type": "map",
              "theme": "light",
              "projection": "miller",

              "imagesSettings": {
                "rollOverColor": "#089282",
                "rollOverScale": 3,
                "selectedScale": 3,
                "selectedColor": "#089282",
                "color": "#13564e"
              },

              "areasSettings": {
                "unlistedAreasColor": "#15A892"
              },

              "dataProvider": {
                "map": "worldLow",
                "images": all_location
              }
            });

            // add events to recalculate map position when the map is moved or zoomed
            map.addListener( "positionChanged", updateCustomMarkers );

            // this function will take current images on the map and create HTML elements for them
            function updateCustomMarkers( event ) {
              // get map object
              var map = event.chart;

              // go through all of the images
              for ( var x in map.dataProvider.images ) {
                // get MapImage object
                var image = map.dataProvider.images[ x ];

                // check if it has corresponding HTML element
                if ( 'undefined' == typeof image.externalElement )
                  image.externalElement = createCustomMarker( image );

                // reposition the element accoridng to coordinates
                var xy = map.coordinatesToStageXY( image.longitude, image.latitude );
                image.externalElement.style.top = xy.y + 'px';
                image.externalElement.style.left = xy.x + 'px';
              }
            }

            // this function creates and returns a new marker element
            function createCustomMarker( image ) {
              // create holder
              var holder = document.createElement( 'div' );
              holder.className = 'map-marker';
              holder.title = image.title;
              holder.style.position = 'absolute';

              // maybe add a link to it?
              if ( undefined != image.url ) {
                holder.onclick = function() {
                  window.location.href = image.url;
                };
                holder.className += ' map-clickable';
              }

              // create dot
              var dot = document.createElement( 'div' );
              dot.className = 'dot';
              holder.appendChild( dot );

              // create pulse
              var pulse = document.createElement( 'div' );
              pulse.className = 'pulse';
              holder.appendChild( pulse );

              // append the marker to the map container
              image.chart.chartDiv.appendChild( holder );

              return holder;
            }
        });
    };

    return ManagerPage;

  })(DetailTablePage);

  this.DetailTablePage = DetailTablePage;

  this.DiskPage = DiskPage;

  this.InitrPage = InitrPage;

  this.LoginPage = LoginPage;

  this.MaintainPage = MaintainPage;

  this.OverviewPage = OverviewPage;

  this.QuickModePage = QuickModePage;

  this.RaidPage = RaidPage;

  this.SettingPage = SettingPage;

  this.VolumePage = VolumePage;

  this.Page = Page;

  this.CentralLoginPage = CentralLoginPage;

  this.CentralStoremonitorPage = CentralStoremonitorPage;

  this.CentralServermonitorPage = CentralServermonitorPage;

  this.CentralStoreDetailPage = CentralStoreDetailPage;

  this.CentralServerDetailPage = CentralServerDetailPage;

  this.CentralServerViewPage = CentralServerViewPage;

  this.CentralStoreViewPage = CentralStoreViewPage;

  this.CentralServerlistPage = CentralServerlistPage;

  this.CentralStorelistPage = CentralStorelistPage;

  this.CentralClientlistPage = CentralClientlistPage;

  this.CentralWarningPage = CentralWarningPage;

  this.CentralMonitorPage = CentralMonitorPage;

  this.PreCountPage = PreCountPage;

  this.RegisterPage = RegisterPage;

  this.FacePage = FacePage;

  this.CountPage = CountPage;

  this.ManagerPage = ManagerPage;

  this.FaceQuickPage = FaceQuickPage;

  this.FaceQuickProPage = FaceQuickProPage;

}).call(this);

(function() {
  var sds;

  sds = [];

  $(function() {
    avalon.config({
      loader: false
    });
    this.serverUI = server_type;
    this.serverUI.type = 'central';
    this.serverUI.store = false;
    window.adminview = new CentralView(this.serverUI);
    avalon.scan();
    App.init();
    $.fn.modalmanager.defaults.resize = true;
    $.validator.addMethod('duplicated', function(val, elem, items) {
      var e;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          e = items[_i];
          if (e.name === val || e.wwn === val) {
            _results.push(e);
          }
        }
        return _results;
      })()).length === 0;
    });
    $.validator.addMethod("regex", function(val, elem, regexp) {
      var re;
      re = new RegExp(regexp);
      return this.optional(elem) || re.test(val);
    }, "输入格式不正确");
    return HotKeyManager.hotkey();
  });

  this.sds = sds;

}).call(this);
